//;-*- mode: antlr -*-
//
//                      QueryJ
//
//  Copyright (C) 2002-2005  ACM-SL
//                           chous@acm-sl.org
//
//  This library is free software; you can redistribute it and/or
//  modify it under the terms of the GNU General Public
//  License as published by the Free Software Foundation; either
//  version 2 of the License, or any later version.
//
//  This library is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
//  General Public License for more details.
//
//  You should have received a copy of the GNU General Public
//  License along with this library; if not, write to the Free Software
//  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
//
//  Thanks to ACM S.L. for distributing this library under the GPL license.
//  Contact info: jose.sanleandro@acm-sl.com
//  Postal Address: c/Playa de Lagoa, 1
//                  Urb. Valdecabanas
//                  Boadilla del monte
//                  28660 Madrid
//                  Spain
//
//***************************************************************************
//
// Filename: $RCSfile: $
//
// Author: Jose San Leandro Armendariz
//
// Description: Defines the rules to generate Repository DAO
//              implementations.
//
// Version: $Revision: 563 $ ($Author: chous $ at $Date: 2006-04-26 23:06:32 +0200 (Wed, 26 Apr 2006) $)
//
// $Id: BaseDAO.stg 563 2006-04-26 21:06:32Z chous $
//
group RepositoryDAO;

source(input) ::= <<
<!
  Generates a repository DAO implementation source file.
  @param input.copyright_years the copyright's years.
  @param input.package the package.
  @param input.dao_class_name the DAO class name.
  @param input.dao_factory_class_name the DAO factory class name.
  @param input.dao_implementation_class_name the DAO implementation class name.
  @params project_imports
  @params class
!>
<if(input.header)>
<input.header>
<else>
<java_header(
  years=input.copyright_years,
  description=
  [
    first_line_description(repository=input.tr_name)
  ],
  timestamp=input.timestamp)>
<endif>

<package_declaration(
  packageNames=
  [
    input.base_package_name,
    typeInitMap.baseDAOSubpackageName,
    typeInitMap.rdbSubpackageName,
    input.subpackage_name
  ])>

<project_imports(
  basePackageName=input.base_package_name,
  baseDAOSubpackageName=typeInitMap.baseDAOSubpackageName,
  voSubpackageName=typeInitMap.voSubpackageName,
  repository=input.tr_name_capitalized,
  voName=input.vo_name)>

/*
 * Importing Spring classes.
 */
import org.springframework.dao.DataAccessException;

/*
 * Importing some JDK classes.
 */
import java.math.BigDecimal;
import java.util.Calendar;
import java.util.Date;
import java.util.List;

<class(input=input)>
>>

first_line_description(repository) ::= <<
<!
  Generates the first line of the generated file description.
  @param tableName the table name.
!>
Defines the global queries defined for <repository>.
>>


project_imports(
  basePackageName,
  baseDAOSubpackageName,
  repository,
  voSubpackageName,
  voName) ::= <<
<!
 Generates the project imports.
 @param basePackageName the base package name.
 @param baseDAOSubpackageName the BaseDAO subpackage name.
 @param voSubpackageName the value-object subpackage name.
 @param repository the repository.
 @param voName the value-object name.
!>
/*
 * Importing project classes.
 */
import <basePackageName>.<baseDAOSubpackageName>.<repository>DAO;
>>

class(input) ::= <<
<!
 Generates the class body.
 @param input the input.
!>
/**
 * <[
      first_line_description(tableName=input.table_name)
    ]:{line |<line>}; separator="\n * ">
 * @author \<a href="http://maven.acm-sl.org/queryj"\>QueryJ\</a\>
 * @version <"$">Revision: $ (<"$">Author: $ at <"$">Date: $)
 * @since <input.timestamp>
 */
public class <input.engine_name><input.tr_name_capitalized>DAO
    implements  <input.tr_name_capitalized>DAO
{
    <input.custom_selects:custom_select(
      cs=it, input=input); separator="\n">

    <input.custom_updates_or_inserts:custom_update_or_insert(
      cs=it, input=input); separator="\n">

    <input.custom_selects_for_update:custom_select_for_update(
      cs=it, input=input); separator="\n">
}
>>

custom_select(cs, input) ::= <<
<!
  Writes the code for a custom select query.
  @param cs the custom select.
  @param input the input.
!>
/**
 * Custom select \<i><cs.id>\</i>:\<br/>
 * \<b><cs.description>\<b>.
 <cs.parameters:attribute_javadoc(name=it.nameLowercased); separator="\n">
 * @return the \<i><cs.resultClass>\</i> information retrieved.
 * @throws DataAccessException if the operation fails.
 */
public <cs.resultClass> <cs.nameUncapitalized>(
    <cs.parameters:attribute_declaration(attr=it); separator=",\n">)
  throws DataAccessException;
>>

custom_update_or_insert(cs, input) ::= <<
<!
 Writes the subtemplate for custom updates or inserts.
  @param cs the custom sql.
  @param input the input.
!>
/**
 * Custom sql \<i><cs.id>\</i>:\<br/>
 * \<b><cs.description>\<b>.
 <cs.parameters:attribute_javadoc(name=it.nameLowercased); separator="\n">
 * @throws DataAccessException if the operation fails.
 */
public void <cs.nameUncapitalized>(
    <cs.parameters:attribute_declaration(attr=it); separator=",\n">)
  throws DataAccessException;
>>

custom_select_for_update(cs, input) ::= <<
<!
  Writes the code for a custom select for update.
  @param cs the custom sql.
  @param input the input.
!>
/**
 * Custom select for update \<i><cs.id>\</i>:\<br/>
 * \<b><cs.description>\<b>.
 <cs.parameters:attribute_javadoc(name=it.nameLowercased); separator="\n">
 * @return the \<i><cs.resultClass>\</i> information retrieved.
 * @throws DataAccessException if the operation fails.
 */
public <cs.resultClass> <cs.nameUncapitalized>(
    <cs.parameters:attribute_declaration(attr=it); separator=",\n">)
  throws DataAccessException;
>>
