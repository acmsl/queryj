/*
                        QueryJ

    Copyright (C) 2002-2005  Jose San Leandro Armendariz
                        chous@acm-sl.org

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    General Public License for more details.

    You should have received a copy of the GNU General Public
    License along with this library; if not, write to the Free Software
    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

    Thanks to ACM S.L. for distributing this library under the GPL license.
    Contact info: chous@acm-sl.org
    Postal Address: c/Playa de Lagoa, 1
                    Urb. Valdecabanas
                    Boadilla del monte
                    28660 Madrid
                    Spain

 ******************************************************************************
 *
 * Filename: $RCSfile: $
 *
 * Author: Jose San Leandro Armendariz
 *
 * Description: Is able to generate XML DAO factories according to
 *              database metadata.
 *
 */
package org.acmsl.queryj.tools.templates.dao.xml;

/*
 * Importing some project-specific classes.
 */
import org.acmsl.queryj.tools.metadata.DecoratorFactory;
import org.acmsl.queryj.tools.PackageUtils;
import org.acmsl.queryj.tools.templates.TableTemplate;

/*
 * Importing some ACM-SL classes.
 */
import org.acmsl.commons.utils.EnglishGrammarUtils;
import org.acmsl.commons.utils.StringUtils;

/*
 * Importing some JDK classes.
 */
import java.text.MessageFormat;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

/**
 * Is able to generate XML DAO factories according to
 * database metadata.
 * @author <a href="mailto:chous@acm-sl.org"
 * >Jose San Leandro</a>
 * @version $Revision$ at $Date$ by $Author$
 */
public class XMLDAOFactoryTemplate
    extends     AbstractXMLDAOFactoryTemplate
    implements  XMLDAOFactoryTemplateDefaults
{
    /**
     * Builds a <code>XMLDAOFactoryTemplate</code> using given information.
     * @param header the header.
     * @param decoratorFactory the <code>DecoratorFactory</code> instance.
     * @param tableTemplate the table template.
     * @param packageName the package name.
     * @param basePackageName the base package name.
     */
    public XMLDAOFactoryTemplate(
        final String header,
        final DecoratorFactory decoratorFactory,
        final TableTemplate tableTemplate,
        final String packageName,
        final String basePackageName)
    {
        super(
//            (header != null) ? header : DEFAULT_HEADER,
            DEFAULT_HEADER,
            decoratorFactory,
            PACKAGE_DECLARATION,
            tableTemplate,
            packageName,
            basePackageName,
            DEFAULT_PROJECT_IMPORTS,
            DEFAULT_JDK_IMPORTS,
            DEFAULT_COMMONS_LOGGING_IMPORTS,
            DEFAULT_JAVADOC,
            CLASS_DEFINITION,
            DEFAULT_CLASS_START,
            DEFAULT_SINGLETON_BODY,
            DEFAULT_FACTORY_METHOD,
            DEFAULT_CLASS_END);
    }

    /**
     * Retrieves the source code generated by this template.
     * @param header the header.
     * @return such code.
     */
    protected String generateOutput(final String header)
    {
        return
            generateOutput(
                header,
                getTableTemplate(),
                PackageUtils.getInstance(),
                StringUtils.getInstance(),
                EnglishGrammarUtils.getInstance());
    }
    
    /**
     * Retrieves the source code generated by this template.
     * @param header the header.
     * @param tableTemplate the table template.
     * @param packageUtils the <code>PackageUtils</code> instance.
     * @param stringUtils the <code>StringUtils</code> instance.
     * 2param englishGrammarUtils the <code>EnglishGrammarUtils</code>
     * instance.
     * @return such code.
     */
    protected String generateOutput(
        final String header,
        final TableTemplate tableTemplate,
        final PackageUtils packageUtils,
        final StringUtils stringUtils,
        final EnglishGrammarUtils englishGrammarUtils)
    {
        StringBuffer t_sbResult = new StringBuffer();

        Object[] t_aCapitalizedTableName =
            new Object[]
            {
                stringUtils.capitalize(
                    englishGrammarUtils.getSingular(
                        tableTemplate.getTableName().toLowerCase()),
                    '_'),
            };

        MessageFormat t_Formatter = new MessageFormat(header);
        t_sbResult.append(
            t_Formatter.format(
                new Object[]
                {
                    tableTemplate.getTableName()
                }));

        t_Formatter = new MessageFormat(getPackageDeclaration());
        t_sbResult.append(
            t_Formatter.format(
                new Object[]
                {
                    getPackageName()
                }));

        t_Formatter = new MessageFormat(getProjectImports());
        t_sbResult.append(
            t_Formatter.format(
                new Object[]
                {
                    packageUtils.retrieveBaseDAOPackage(
                        getBasePackageName()),
                    t_aCapitalizedTableName[0],
                    packageUtils.retrieveBaseDAOFactoryPackage(
                        getBasePackageName()),
                    packageUtils.retrieveXMLDAOPackage(
                        getBasePackageName())
                }));

        t_sbResult.append(getJdkImports());
        t_sbResult.append(getCommonsLoggingImports());

        t_Formatter = new MessageFormat(getJavadoc());
        t_sbResult.append(
            t_Formatter.format(
                new Object[]
                {
                    tableTemplate.getTableName()
                }));

        t_Formatter = new MessageFormat(getClassDefinition());
        t_sbResult.append(t_Formatter.format(t_aCapitalizedTableName));

        t_Formatter = new MessageFormat(getClassStart());
        t_sbResult.append(
            t_Formatter.format(
                new Object[]
                {
                    tableTemplate.getTableName().toLowerCase()
                }));

        t_Formatter = new MessageFormat(getSingletonBody());

        t_sbResult.append(t_Formatter.format(t_aCapitalizedTableName));

        t_Formatter = new MessageFormat(getFactoryMethod());

        t_sbResult.append(t_Formatter.format(t_aCapitalizedTableName));

        t_sbResult.append(getClassEnd());

        return t_sbResult.toString();
    }
}
