/*
                        QueryJ

    Copyright (C) 2002-2007  Jose San Leandro Armendariz
                        chous@acm-sl.org

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    General Public License for more details.

    You should have received a copy of the GNU General Public
    License along with this library; if not, write to the Free Software
    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

    Thanks to ACM S.L. for distributing this library under the GPL license.
    Contact info: chous@acm-sl.org
    Postal Address: c/Playa de Lagoa, 1
                    Urb. Valdecabanas
                    Boadilla del monte
                    28660 Madrid
                    Spain

 *****************************************************************************
 *
 * Filename: QueryPreparedStatementCreatorTemplate.java
 *
 * Author: Jose San Leandro Armendariz
 *
 * Description: Is able to create engine-specific DAO interfaces for each
 *              table in the persistence model.
 *
 */
package org.acmsl.queryj.tools.templates.dao;

/*
 * Importing some project-specific classes.
 */
import org.acmsl.queryj.tools.metadata.DecoratorFactory;
import org.acmsl.queryj.tools.templates.dao.AbstractQueryPreparedStatementCreatorTemplate;
import org.acmsl.queryj.tools.templates.dao.QueryPreparedStatementCreatorTemplateDefaults;

/*
 * Importing some JDK classes.
 */
import java.text.MessageFormat;

/**
 * Is able to create engine-specific DAO interfaces for each
 * table in the persistence model.
 * @author <a href="mailto:chous@acm-sl.org"
 *         >Jose San Leandro</a>
 */
public class QueryPreparedStatementCreatorTemplate
    extends  AbstractQueryPreparedStatementCreatorTemplate
    implements  QueryPreparedStatementCreatorTemplateDefaults
{
    /**
     * Builds a <code>QueryPreparedStatementCreatorTemplate</code>
     * using given information.
     * @param header the header.
     * @param decoratorFactory the <code>DecoratorFactory</code> instance.
     * @param packageName the package name.
     */
    public QueryPreparedStatementCreatorTemplate(
        final String header,
        final DecoratorFactory decoratorFactory,
        final String packageName)
    {
        super(
//            (header != null) ? header : DEFAULT_HEADER,
            DEFAULT_HEADER,
            decoratorFactory,
            DEFAULT_PACKAGE_DECLARATION,
            packageName,
            DEFAULT_ACMSL_IMPORTS,
            DEFAULT_ADDITIONAL_IMPORTS,
            DEFAULT_JDK_IMPORTS,
            DEFAULT_JAVADOC,
            DEFAULT_CLASS_DEFINITION,
            DEFAULT_CLASS_START,
            DEFAULT_CLASS_CONSTRUCTOR,
            DEFAULT_CREATE_PREPARED_STATEMENT_METHOD,
            DEFAULT_CLASS_END);
    }

    /**
     * Retrieves the source code generated by this template.
     * @param header the header.
     * @return such code.
     */
    protected String generateOutput(final String header)
    {
        return
            generateOutput(
                header,
                getPackageDeclaration(),
                getPackageName(),
                getAcmslImports(),
                getAdditionalImports(),
                getJdkImports(),
                getJavadoc(),
                getClassDefinition(),
                getClassStart(),
                getClassConstructor(),
                getCreatePreparedStatementMethod(),
                getClassEnd());
    }

    /**
     * Retrieves the source code generated by this template.
     * @param header the header.
     * @param packageDeclaration the package declaration.
     * @param packageName the package name.
     * @param acmslImports the ACM-SL imports.
     * @param additionalImports the additional imports.
     * @param jdkImports the JDK imports.
     * @param javadoc the class Javadoc.
     * @param classDefinition the class definition.
     * @param classStart the class start.
     * @param classConstructor the class constructor.
     * @param createPreparedStatementMethod the subtemplate
     * to build the <code>createPreparedStatementMethod</code>.
     * @param classEnd the class end.
     * @return such code.
     */
    protected String generateOutput(
        final String header,
        final String packageDeclaration,
        final String packageName,
        final String acmslImports,
        final String additionalImports,
        final String jdkImports,
        final String javadoc,
        final String classDefinition,
        final String classStart,
        final String classConstructor,
        final String createPreparedStatementMethod,
        final String classEnd)
    {
        StringBuffer t_sbResult = new StringBuffer();

        MessageFormat t_PackageDeclarationFormatter =
            new MessageFormat(packageDeclaration);

        t_sbResult.append(header);

        t_sbResult.append(
            t_PackageDeclarationFormatter.format(
                new Object[] { packageName }));

        t_sbResult.append(acmslImports);
        t_sbResult.append(additionalImports);
        t_sbResult.append(jdkImports);
        t_sbResult.append(javadoc);
        t_sbResult.append(classDefinition);
        t_sbResult.append(classStart);
        t_sbResult.append(classConstructor);
        t_sbResult.append(createPreparedStatementMethod);
        t_sbResult.append(classEnd);

        return t_sbResult.toString();
    }
}
