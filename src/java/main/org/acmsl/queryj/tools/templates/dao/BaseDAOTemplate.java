/*
                        QueryJ

    Copyright (C) 2002  Jose San Leandro Armendariz
                        jsanleandro@yahoo.es
                        chousz@yahoo.com

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    General Public License for more details.

    You should have received a copy of the GNU General Public
    License along with this library; if not, write to the Free Software
    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

    Thanks to ACM S.L. for distributing this library under the GPL license.
    Contact info: jsanleandro@yahoo.es
    Postal Address: c/Playa de Lagoa, 1
                    Urb. Valdecabanas
                    Boadilla del monte
                    28660 Madrid
                    Spain

 ******************************************************************************
 *
 * Filename: $RCSfile$
 *
 * Author: Jose San Leandro Armendariz
 *
 * Description: Is able to create DAO interfaces for each table in the
 *              persistence model.
 *
 * Last modified by: $Author$ at $Date$
 *
 * File version: $Revision$
 *
 * Project version: $Name$
 *
 * $Id$
 *
 */
package org.acmsl.queryj.tools.templates.dao;

/*
 * Importing some project-specific classes.
 */
import org.acmsl.queryj.tools.DatabaseMetaDataManager;
import org.acmsl.queryj.tools.MetaDataUtils;
import org.acmsl.queryj.tools.templates.TableTemplate;

/*
 * Importing some ACM-SL classes.
 */
import org.acmsl.commons.utils.EnglishGrammarUtils;
import org.acmsl.commons.utils.StringUtils;

/*
 * Importing some JDK classes.
 */
import java.text.MessageFormat;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

/*
 * Importing Apache Commons Logging classes.
 */
import org.apache.commons.logging.LogFactory;

/**
 * Is able to create DAO interfaces for each table in the
 * persistence model.
 * @author <a href="mailto:jsanleandro@yahoo.es"
           >Jose San Leandro</a>
 * @version $Revision$
 */
public class BaseDAOTemplate
    extends     AbstractBaseDAOTemplate
    implements  BaseDAOTemplateDefaults
{
    /**
     * Builds a BaseDAOTemplate using given information.
     * @param tableTemplate the table template.
     * @param metaDataManager the database metadata manager.
     * @param packageName the package name.
     */
    public BaseDAOTemplate(
        final TableTemplate           tableTemplate,
        final DatabaseMetaDataManager metaDataManager,
        final String                  packageName)
    {
        super(
            tableTemplate,
            metaDataManager,
            DEFAULT_HEADER,
            PACKAGE_DECLARATION,
            packageName,
            ACMSL_IMPORTS,
            JDK_IMPORTS,
            DEFAULT_JAVADOC,
            CLASS_DEFINITION,
            DEFAULT_CLASS_START,
            DEFAULT_FIND_BY_PRIMARY_KEY_METHOD,
            DEFAULT_FIND_BY_PRIMARY_KEY_PK_JAVADOC,
            DEFAULT_FIND_BY_PRIMARY_KEY_PK_DECLARATION,
            DEFAULT_INSERT_METHOD,
            DEFAULT_INSERT_PARAMETERS_JAVADOC,
            DEFAULT_INSERT_PARAMETERS_DECLARATION,
            DEFAULT_UPDATE_METHOD,
            DEFAULT_UPDATE_PARAMETERS_JAVADOC,
            DEFAULT_UPDATE_PARAMETERS_DECLARATION,
            DEFAULT_DELETE_METHOD,
            DEFAULT_DELETE_PK_JAVADOC,
            DEFAULT_DELETE_PK_DECLARATION,
            DEFAULT_CLASS_END);
    }

    /**
     * Retrieves the source code generated by this template.
     * @return such code.
     */
    public String toString()
    {
        StringBuffer t_sbResult = new StringBuffer();

        EnglishGrammarUtils t_EnglishGrammarUtils =
            EnglishGrammarUtils.getInstance();
        StringUtils t_StringUtils = StringUtils.getInstance();

        MetaDataUtils t_MetaDataUtils = MetaDataUtils.getInstance();

        TableTemplate t_TableTemplate = getTableTemplate();

        DatabaseMetaDataManager t_MetaDataManager = getMetaDataManager();

        if  (   (t_TableTemplate   != null)
             && (t_MetaDataManager != null)
             && (t_MetaDataUtils   != null)
             && (t_StringUtils     != null))
        {
            MessageFormat t_HeaderFormatter = new MessageFormat(getHeader());

            t_sbResult.append(
                t_HeaderFormatter.format(
                    new Object[]
                    {
                        t_TableTemplate.getTableName()
                    }));

            MessageFormat t_PackageDeclarationFormatter =
                new MessageFormat(getPackageDeclaration());

            t_sbResult.append(
                t_PackageDeclarationFormatter.format(
                    new Object[]{getPackageName()}));

            t_sbResult.append(getAcmslImports());
            t_sbResult.append(getJdkImports());

            MessageFormat t_JavadocFormatter = new MessageFormat(getJavadoc());

            t_sbResult.append(
                t_JavadocFormatter.format(
                    new Object[]
                    {
                        t_TableTemplate.getTableName()
                    }));

            MessageFormat t_ClassDefinitionFormatter =
                new MessageFormat(getClassDefinition());

            t_sbResult.append(
                t_ClassDefinitionFormatter.format(
                    new Object[]
                    {
                        t_StringUtils.capitalize(
                            t_EnglishGrammarUtils.getSingular(
                                t_TableTemplate.getTableName()
                                    .toLowerCase()),
                            '_')
                    }));

            t_sbResult.append(getClassStart());

            MessageFormat t_FindByPrimaryKeyFormatter =
                new MessageFormat(getFindByPrimaryKeyMethod());

            MessageFormat t_FindByPrimaryKeyPkJavadocFormatter =
                new MessageFormat(getFindByPrimaryKeyPkJavadoc());

            MessageFormat t_FindByPrimaryKeyPkDeclarationFormatter =
                new MessageFormat(getFindByPrimaryKeyPkDeclaration());

            MessageFormat t_InsertMethodFormatter =
                new MessageFormat(getInsertMethod());

            MessageFormat t_InsertParametersJavadocFormatter =
                new MessageFormat(getInsertParametersJavadoc());

            MessageFormat t_InsertParametersDeclarationFormatter =
                new MessageFormat(getInsertParametersDeclaration());

            MessageFormat t_UpdateMethodFormatter =
                new MessageFormat(getUpdateMethod());

            MessageFormat t_UpdateParametersJavadocFormatter =
                new MessageFormat(getUpdateParametersJavadoc());

            MessageFormat t_UpdateParametersDeclarationFormatter =
                new MessageFormat(getUpdateParametersDeclaration());

            String[] t_astrPrimaryKeys =
                t_MetaDataManager.getPrimaryKeys(t_TableTemplate.getTableName());

            MessageFormat t_DeleteMethodFormatter =
                new MessageFormat(getDeleteMethod());

            StringBuffer t_sbPkJavadoc = new StringBuffer();
            StringBuffer t_sbPkDeclaration = new StringBuffer();
            StringBuffer t_sbDeleteMethod = new StringBuffer();
            StringBuffer t_sbInsertPkJavadoc = new StringBuffer();
            StringBuffer t_sbInsertPkDeclaration = new StringBuffer();

            if  (t_astrPrimaryKeys != null)
            {
                StringBuffer t_sbSelectFields = new StringBuffer();
                StringBuffer t_sbFilterDeclaration = new StringBuffer();
                StringBuffer t_sbFilterValues = new StringBuffer();

                for  (int t_iPkIndex = 0;
                          t_iPkIndex < t_astrPrimaryKeys.length;
                          t_iPkIndex++)
                {
                    String t_strPkJavadoc =
                        t_FindByPrimaryKeyPkJavadocFormatter.format(
                            new Object[]
                            {
                                t_astrPrimaryKeys[t_iPkIndex].toLowerCase(),
                                t_astrPrimaryKeys[t_iPkIndex]
                            });

                    String t_strPkDeclaration =
                        t_FindByPrimaryKeyPkDeclarationFormatter.format(
                            new Object[]
                            {
                                t_MetaDataUtils.getNativeType(
                                    t_MetaDataManager.getColumnType(
                                        t_TableTemplate.getTableName(),
                                        t_astrPrimaryKeys[t_iPkIndex])),
                                t_astrPrimaryKeys[t_iPkIndex].toLowerCase()
                            });

                    t_sbPkJavadoc.append(t_strPkJavadoc);
                    t_sbPkDeclaration.append(t_strPkDeclaration);

                    if  (!t_MetaDataManager.isManagedExternally(
                             t_TableTemplate.getTableName(),
                             t_astrPrimaryKeys[t_iPkIndex]))
                    {
                        t_sbInsertPkJavadoc.append(t_strPkJavadoc);
                        t_sbInsertPkDeclaration.append(t_strPkDeclaration);
                    }
                }

                t_sbResult.append(
                    t_FindByPrimaryKeyFormatter.format(
                        new Object[]
                        {
                            t_TableTemplate.getTableName(),
                            t_sbPkJavadoc,
                            t_StringUtils.capitalize(
                                t_EnglishGrammarUtils.getSingular(
                                    t_TableTemplate.getTableName()
                                        .toLowerCase()),
                                '_'),
                            t_sbPkDeclaration
                        }));

                t_sbDeleteMethod.append(
                    t_DeleteMethodFormatter.format(
                        new Object[]
                        {
                            t_TableTemplate.getTableName(),
                            t_sbPkJavadoc,
                            t_sbPkDeclaration,
                            "Phoenix"
                        }));
            }

            String[] t_astrColumnNames =
                t_MetaDataManager.getColumnNames(t_TableTemplate.getTableName());

            if  (t_astrColumnNames != null)
            {
                StringBuffer t_sbBuildValueObjectRetrieval     =
                    new StringBuffer();
                StringBuffer t_sbInsertParametersJavadoc       =
                    new StringBuffer();
                StringBuffer t_sbInsertParametersDeclaration   =
                    new StringBuffer();
                StringBuffer t_sbInsertParametersSpecification =
                    new StringBuffer();
                StringBuffer t_sbUpdateParametersJavadoc       =
                    new StringBuffer();
                StringBuffer t_sbUpdateParametersDeclaration   =
                    new StringBuffer();
                StringBuffer t_sbUpdateParametersSpecification =
                    new StringBuffer();

                for  (int t_iColumnIndex = 0;
                          t_iColumnIndex < t_astrColumnNames.length;
                          t_iColumnIndex++)
                {
                    if  (!t_MetaDataManager.isManagedExternally(
                             t_TableTemplate.getTableName(),
                             t_astrColumnNames[t_iColumnIndex]))
                    {
                        if  (!t_MetaDataManager.isPrimaryKey(
                                 t_TableTemplate.getTableName(),
                                 t_astrColumnNames[t_iColumnIndex]))
                        {
                            t_sbInsertParametersJavadoc.append(
                                t_InsertParametersJavadocFormatter.format(
                                    new Object[]
                                    {
                                        t_astrColumnNames[t_iColumnIndex]
                                            .toLowerCase(),
                                        t_astrColumnNames[t_iColumnIndex]
                                    }));

                            t_sbUpdateParametersJavadoc.append(
                                t_UpdateParametersJavadocFormatter.format(
                                new Object[]
                                {
                                    t_astrColumnNames[t_iColumnIndex].toLowerCase(),
                                    t_astrColumnNames[t_iColumnIndex]
                                }));

                            t_sbInsertParametersDeclaration.append(
                                t_InsertParametersDeclarationFormatter.format(
                                    new Object[]
                                    {
                                        t_MetaDataUtils.getNativeType(
                                            t_MetaDataManager.getColumnType(
                                                t_TableTemplate.getTableName(),
                                                t_astrColumnNames[
                                                    t_iColumnIndex])),
                                        t_astrColumnNames[t_iColumnIndex]
                                            .toLowerCase()
                                    }));

                            t_sbInsertParametersDeclaration.append(",");

                            t_sbUpdateParametersDeclaration.append(
                                t_UpdateParametersDeclarationFormatter.format(
                                    new Object[]
                                    {
                                        t_MetaDataUtils.getNativeType(
                                            t_MetaDataManager.getColumnType(
                                                t_TableTemplate.getTableName(),
                                                t_astrColumnNames[
                                                    t_iColumnIndex])),
                                        t_astrColumnNames[t_iColumnIndex]
                                            .toLowerCase()
                                    }));

                            t_sbUpdateParametersDeclaration.append(",");
                        }
                    }
                }

                t_sbResult.append(
                    t_InsertMethodFormatter.format(
                        new Object[]
                        {
                            t_StringUtils.capitalize(
                                t_EnglishGrammarUtils.getSingular(
                                    t_TableTemplate.getTableName()
                                        .toLowerCase()),
                                '_'),
                            t_sbInsertPkJavadoc.toString(),
                            t_sbInsertParametersJavadoc,
                            t_sbInsertPkDeclaration,
                            t_sbInsertParametersDeclaration
                        }));

                t_sbResult.append(
                    t_UpdateMethodFormatter.format(
                        new Object[]
                        {
                            t_StringUtils.capitalize(
                                t_EnglishGrammarUtils.getSingular(
                                    t_TableTemplate.getTableName()
                                        .toLowerCase()),
                                '_'),
                            t_sbPkJavadoc.toString(),
                            t_sbUpdateParametersJavadoc,
                            t_sbPkDeclaration,
                            t_sbUpdateParametersDeclaration
                        }));

            }

            t_sbResult.append(t_sbDeleteMethod);
        }

        t_sbResult.append(getClassEnd());

        return t_sbResult.toString();
    }
}
