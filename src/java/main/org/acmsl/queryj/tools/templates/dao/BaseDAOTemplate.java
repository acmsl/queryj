/*
                        QueryJ

    Copyright (C) 2002  Jose San Leandro Armendariz
                        jsanleandro@yahoo.es
                        chousz@yahoo.com

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    General Public License for more details.

    You should have received a copy of the GNU General Public
    License along with this library; if not, write to the Free Software
    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

    Thanks to ACM S.L. for distributing this library under the GPL license.
    Contact info: jsanleandro@yahoo.es
    Postal Address: c/Playa de Lagoa, 1
                    Urb. Valdecabanas
                    Boadilla del monte
                    28660 Madrid
                    Spain

 ******************************************************************************
 *
 * Filename: $RCSfile$
 *
 * Author: Jose San Leandro Armendariz
 *
 * Description: Is able to create DAO interfaces for each table in the
 *              persistence model.
 *
 * Last modified by: $Author$ at $Date$
 *
 * File version: $Revision$
 *
 * Project version: $Name$
 *
 * $Id$
 *
 */
package org.acmsl.queryj.tools.templates.dao;

/*
 * Importing some project-specific classes.
 */
import org.acmsl.queryj.tools.DatabaseMetaDataManager;
import org.acmsl.queryj.tools.MetaDataUtils;
import org.acmsl.queryj.tools.templates.TableTemplate;

/*
 * Importing some ACM-SL classes.
 */
import org.acmsl.commons.utils.EnglishGrammarUtils;
import org.acmsl.commons.utils.StringUtils;

/*
 * Importing Ant classes.
 */
import org.apache.tools.ant.Project;
import org.apache.tools.ant.Task;

/*
 * Importing some JDK classes.
 */
import java.text.MessageFormat;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

/**
 * Is able to create DAO interfaces for each table in the
 * persistence model.
 * @author <a href="mailto:jsanleandro@yahoo.es"
 *         >Jose San Leandro</a>
 * @version $Revision$
 */
public class BaseDAOTemplate
    extends     AbstractBaseDAOTemplate
    implements  BaseDAOTemplateDefaults
{
    /**
     * Builds a <code>BaseDAOTemplate</code> using given information.
     * @param tableTemplate the table template.
     * @param metaDataManager the database metadata manager.
     * @param packageName the package name.
     * @param valueObjectPackageName the value object package name.
     * @param project the project, for logging purposes.
     * @param task the task, for logging purposes.
     */
    public BaseDAOTemplate(
        final TableTemplate tableTemplate,
        final DatabaseMetaDataManager metaDataManager,
        final String packageName,
        final String valueObjectPackageName,
        final Project project,
        final Task task)
    {
        super(
            tableTemplate,
            metaDataManager,
            DEFAULT_HEADER,
            PACKAGE_DECLARATION,
            packageName,
            valueObjectPackageName,
            DEFAULT_PROJECT_IMPORTS,
            ACMSL_IMPORTS,
            JDK_IMPORTS,
            DEFAULT_JAVADOC,
            CLASS_DEFINITION,
            DEFAULT_CLASS_START,
            DEFAULT_FIND_BY_PRIMARY_KEY_METHOD,
            DEFAULT_FIND_BY_PRIMARY_KEY_PK_JAVADOC,
            DEFAULT_FIND_BY_PRIMARY_KEY_PK_DECLARATION,
            DEFAULT_INSERT_METHOD,
            DEFAULT_INSERT_PARAMETERS_JAVADOC,
            DEFAULT_INSERT_PARAMETERS_DECLARATION,
            DEFAULT_UPDATE_METHOD,
            DEFAULT_UPDATE_PARAMETERS_JAVADOC,
            DEFAULT_UPDATE_PARAMETERS_DECLARATION,
            DEFAULT_DELETE_METHOD,
            DEFAULT_DELETE_PK_JAVADOC,
            DEFAULT_DELETE_PK_DECLARATION,
            DEFAULT_CLASS_END,
            project,
            task);
    }

    /**
     * Retrieves the source code generated by this template.
     * @return such code.
     */
    protected String generateOutput()
    {
        return
            generateOutput(
                getTableTemplate(),
                getMetaDataManager(),
                getHeader(),
                getPackageDeclaration(),
                getPackageName(),
                getValueObjectPackageName(),
                getProjectImports(),
                getAcmslImports(),
                getJdkImports(),
                getJavadoc(),
                getClassDefinition(),
                getClassStart(),
                getFindByPrimaryKeyMethod(),
                getFindByPrimaryKeyPkJavadoc(),
                getFindByPrimaryKeyPkDeclaration(),
                getInsertMethod(),
                getInsertParametersJavadoc(),
                getInsertParametersDeclaration(),
                getUpdateMethod(),
                getUpdateParametersJavadoc(),
                getUpdateParametersDeclaration(),
                getDeleteMethod(),
                getDeletePkJavadoc(),
                getDeletePkDeclaration(),
                getClassEnd(),
                MetaDataUtils.getInstance(),
                EnglishGrammarUtils.getInstance(),
                StringUtils.getInstance());
    }

    /**
     * Retrieves the source code generated by this template.
     * @param tableTemplate the table template.
     * @param metaDataManager the database metadata manager.
     * @param header the header.
     * @param packageDeclaration the package declaration.
     * @param packageName the package name.
     * @param valueObjectPackageName the value object package name.
     * @param projectImports the project imports.
     * @param acmslImports the ACM-SL imports.
     * @param jdkImports the JDK imports.
     * @param javadoc the class Javadoc.
     * @param classDefinition the class definition.
     * @param classStart the class start.
     * @param findByPrimaryKeyMethod the find by primary key method.
     * @param findByPrimaryKeyPkJavadoc the find by primary key pk javadoc.
     * @param findByPrimaryKeyPkDeclaration the find by primary key pk
     * declaration.
     * @param insertMethod the insert method.
     * @param insertParametersJavadoc the javadoc of the insert method's parameters.
     * @param insertParametersDeclaration the declaration of the insert method's parameters.
     * @param updateMethod the update method.
     * @param updateParametersJavadoc the javadoc of the update method's parameters.
     * @param updateParametersDeclaration the declaration of the update method's parameters.
     * @param deleteMethod the delete method.
     * @param deletePkJavadoc the delete PK javadoc.
     * @param deletePkDeclaration the delete PK declaration.
     * @param classEnd the class end.
     * @param metaDataUtils the <code>MetaDataUtils</code> instance.
     * @param englishGrammarUtils the <code>EnglishGrammarUtils</code>
     * instance.
     * @param stringUtils the <code>StringUtils</code> instance.
     * @return such code.
     * @precondition tableTemplate != null
     * @precondition metaDataManager != null
     * @precondition metaDataUtils != null
     * @precondition englishGrammarUtils != null
     * @precondition stringUtils != null
     */
    protected String generateOutput(
        final TableTemplate tableTemplate,
        final DatabaseMetaDataManager metaDataManager,
        final String header,
        final String packageDeclaration,
        final String packageName,
        final String valueObjectPackageName,
        final String projectImports,
        final String acmslImports,
        final String jdkImports,
        final String javadoc,
        final String classDefinition,
        final String classStart,
        final String findByPrimaryKeyMethod,
        final String findByPrimaryKeyPkJavadoc,
        final String findByPrimaryKeyPkDeclaration,
        final String insertMethod,
        final String insertParametersJavadoc,
        final String insertParametersDeclaration,
        final String updateMethod,
        final String updateParametersJavadoc,
        final String updateParametersDeclaration,
        final String deleteMethod,
        final String deletePkJavadoc,
        final String deletePkDeclaration,
        final String classEnd,
        final MetaDataUtils metaDataUtils,
        final EnglishGrammarUtils englishGrammarUtils,
        final StringUtils stringUtils)
    {
        StringBuffer t_sbResult = new StringBuffer();

        MessageFormat t_HeaderFormatter = new MessageFormat(header);

        t_sbResult.append(
            t_HeaderFormatter.format(
                new Object[]
                {
                    tableTemplate.getTableName()
                }));

        MessageFormat t_PackageDeclarationFormatter =
            new MessageFormat(packageDeclaration);

        t_sbResult.append(
            t_PackageDeclarationFormatter.format(
                new Object[]{packageName}));

        MessageFormat t_ProjectImportsFormatter =
            new MessageFormat(projectImports);

        t_sbResult.append(
            t_ProjectImportsFormatter.format(
                new Object[]
                {
                    valueObjectPackageName,
                    stringUtils.capitalize(
                        englishGrammarUtils.getSingular(
                            tableTemplate.getTableName().toLowerCase()),
                        '_')
                }));

        t_sbResult.append(acmslImports);
        t_sbResult.append(jdkImports);

        MessageFormat t_JavadocFormatter = new MessageFormat(javadoc);

        t_sbResult.append(
            t_JavadocFormatter.format(
                new Object[]
                {
                    tableTemplate.getTableName()
                }));

        MessageFormat t_ClassDefinitionFormatter =
            new MessageFormat(classDefinition);

        t_sbResult.append(
            t_ClassDefinitionFormatter.format(
                new Object[]
                {
                    stringUtils.capitalize(
                        englishGrammarUtils.getSingular(
                            tableTemplate.getTableName().toLowerCase()),
                        '_')
                }));

        t_sbResult.append(classStart);

        MessageFormat t_FindByPrimaryKeyFormatter =
            new MessageFormat(findByPrimaryKeyMethod);

        MessageFormat t_FindByPrimaryKeyPkJavadocFormatter =
            new MessageFormat(findByPrimaryKeyPkJavadoc);

        MessageFormat t_FindByPrimaryKeyPkDeclarationFormatter =
            new MessageFormat(findByPrimaryKeyPkDeclaration);

        MessageFormat t_InsertMethodFormatter =
            new MessageFormat(insertMethod);

        MessageFormat t_InsertParametersJavadocFormatter =
            new MessageFormat(insertParametersJavadoc);

        MessageFormat t_InsertParametersDeclarationFormatter =
            new MessageFormat(insertParametersDeclaration);

        MessageFormat t_UpdateMethodFormatter =
            new MessageFormat(updateMethod);

        MessageFormat t_UpdateParametersJavadocFormatter =
            new MessageFormat(updateParametersJavadoc);

        MessageFormat t_UpdateParametersDeclarationFormatter =
            new MessageFormat(updateParametersDeclaration);

        String[] t_astrPrimaryKeys =
            metaDataManager.getPrimaryKeys(tableTemplate.getTableName());

        MessageFormat t_DeleteMethodFormatter =
            new MessageFormat(deleteMethod);

        StringBuffer t_sbPkJavadoc = new StringBuffer();
        StringBuffer t_sbPkDeclaration = new StringBuffer();
        StringBuffer t_sbDeleteMethod = new StringBuffer();
        StringBuffer t_sbInsertPkJavadoc = new StringBuffer();
        StringBuffer t_sbInsertPkDeclaration = new StringBuffer();

        if  (t_astrPrimaryKeys != null)
        {
            StringBuffer t_sbSelectFields = new StringBuffer();
            StringBuffer t_sbFilterDeclaration = new StringBuffer();
            StringBuffer t_sbFilterValues = new StringBuffer();

            for  (int t_iPkIndex = 0;
                      t_iPkIndex < t_astrPrimaryKeys.length;
                      t_iPkIndex++)
            {
                String t_strPkJavadoc =
                    t_FindByPrimaryKeyPkJavadocFormatter.format(
                        new Object[]
                        {
                            t_astrPrimaryKeys[t_iPkIndex].toLowerCase(),
                            t_astrPrimaryKeys[t_iPkIndex]
                        });

                String t_strPkDeclaration =
                    t_FindByPrimaryKeyPkDeclarationFormatter.format(
                        new Object[]
                        {
                            metaDataUtils.getNativeType(
                                metaDataManager.getColumnType(
                                    tableTemplate.getTableName(),
                                    t_astrPrimaryKeys[t_iPkIndex])),
                            t_astrPrimaryKeys[t_iPkIndex].toLowerCase()
                        });

                t_sbPkJavadoc.append(t_strPkJavadoc);

                if  (t_iPkIndex < t_astrPrimaryKeys.length - 1)
                {
                    t_sbPkDeclaration.append(",");
                }
                t_sbPkDeclaration.append(t_strPkDeclaration);

                if  (!metaDataManager.isManagedExternally(
                         tableTemplate.getTableName(),
                         t_astrPrimaryKeys[t_iPkIndex]))
                {
                    t_sbInsertPkJavadoc.append(t_strPkJavadoc);
                    t_sbInsertPkDeclaration.append(t_strPkDeclaration);
                }
            }

            t_sbResult.append(
                t_FindByPrimaryKeyFormatter.format(
                    new Object[]
                    {
                        tableTemplate.getTableName(),
                        t_sbPkJavadoc,
                        stringUtils.capitalize(
                            englishGrammarUtils.getSingular(
                                tableTemplate.getTableName()
                                .toLowerCase()),
                            '_'),
                        t_sbPkDeclaration
                    }));

            t_sbDeleteMethod.append(
                t_DeleteMethodFormatter.format(
                    new Object[]
                    {
                        tableTemplate.getTableName(),
                        t_sbPkJavadoc,
                        t_sbPkDeclaration
                    }));
        }

        String[] t_astrColumnNames =
            metaDataManager.getColumnNames(tableTemplate.getTableName());

        if  (t_astrColumnNames != null)
        {
            StringBuffer t_sbBuildValueObjectRetrieval     =
                new StringBuffer();
            StringBuffer t_sbInsertParametersJavadoc       =
                new StringBuffer();
            StringBuffer t_sbInsertParametersDeclaration   =
                new StringBuffer();
            StringBuffer t_sbInsertParametersSpecification =
                new StringBuffer();
            StringBuffer t_sbUpdateParametersJavadoc       =
                new StringBuffer();
            StringBuffer t_sbUpdateParametersDeclaration   =
                new StringBuffer();
            StringBuffer t_sbUpdateParametersSpecification =
                new StringBuffer();

            for  (int t_iColumnIndex = 0;
                      t_iColumnIndex < t_astrColumnNames.length;
                      t_iColumnIndex++)
            {
                if  (!metaDataManager.isManagedExternally(
                         tableTemplate.getTableName(),
                         t_astrColumnNames[t_iColumnIndex]))
                {
                    if  (!metaDataManager.isPrimaryKey(
                             tableTemplate.getTableName(),
                             t_astrColumnNames[t_iColumnIndex]))
                    {
                        t_sbInsertParametersJavadoc.append(
                            t_InsertParametersJavadocFormatter.format(
                                new Object[]
                                {
                                    t_astrColumnNames[t_iColumnIndex]
                                        .toLowerCase(),
                                    t_astrColumnNames[t_iColumnIndex]
                                }));

                        t_sbUpdateParametersJavadoc.append(
                            t_UpdateParametersJavadocFormatter.format(
                                new Object[]
                                {
                                    t_astrColumnNames[t_iColumnIndex].toLowerCase(),
                                    t_astrColumnNames[t_iColumnIndex]
                                }));

                        t_sbInsertParametersDeclaration.append(
                            t_InsertParametersDeclarationFormatter.format(
                                new Object[]
                                {
                                    metaDataUtils.getNativeType(
                                        metaDataManager.getColumnType(
                                            tableTemplate.getTableName(),
                                            t_astrColumnNames[
                                                t_iColumnIndex])),
                                    t_astrColumnNames[t_iColumnIndex]
                                        .toLowerCase()
                                }));

                        t_sbUpdateParametersDeclaration.append(
                            t_UpdateParametersDeclarationFormatter.format(
                                new Object[]
                                {
                                    metaDataUtils.getNativeType(
                                        metaDataManager.getColumnType(
                                            tableTemplate.getTableName(),
                                            t_astrColumnNames[
                                                t_iColumnIndex])),
                                    t_astrColumnNames[t_iColumnIndex]
                                        .toLowerCase()
                                }));

                        if  (t_iColumnIndex < t_astrColumnNames.length - 1)
                        {
                            t_sbInsertParametersDeclaration.append(",");
                        }
                    }
                    else
                    {
                        t_sbInsertParametersDeclaration.append(",");
                    }
                }
            }

            t_sbResult.append(
                t_InsertMethodFormatter.format(
                    new Object[]
                    {
                        stringUtils.capitalize(
                            englishGrammarUtils.getSingular(
                                tableTemplate.getTableName()
                                    .toLowerCase()),
                            '_'),
                        t_sbInsertPkJavadoc.toString(),
                        t_sbInsertParametersJavadoc,
                        t_sbInsertPkDeclaration,
                        t_sbInsertParametersDeclaration
                    }));

            t_sbResult.append(
                t_UpdateMethodFormatter.format(
                    new Object[]
                    {
                        stringUtils.capitalize(
                            englishGrammarUtils.getSingular(
                                tableTemplate.getTableName()
                                    .toLowerCase()),
                            '_'),
                        t_sbPkJavadoc.toString(),
                        t_sbUpdateParametersJavadoc,
                        t_sbPkDeclaration,
                        t_sbUpdateParametersDeclaration
                    }));

        }

        t_sbResult.append(t_sbDeleteMethod);

        t_sbResult.append(classEnd);

        return t_sbResult.toString();
    }
}
