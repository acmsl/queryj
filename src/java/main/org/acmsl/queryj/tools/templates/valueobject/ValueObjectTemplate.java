/*
                        QueryJ

    Copyright (C) 2002  Jose San Leandro Armendariz
                        chous@acm-sl.org

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    General Public License for more details.

    You should have received a copy of the GNU General Public
    License along with this library; if not, write to the Free Software
    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

    Thanks to ACM S.L. for distributing this library under the GPL license.
    Contact info: chous@acm-sl.org
    Postal Address: c/Playa de Lagoa, 1
                    Urb. Valdecabanas
                    Boadilla del monte
                    28660 Madrid
                    Spain

 ******************************************************************************
 *
 * Filename: $RCSfile$
 *
 * Author: Jose San Leandro Armendariz
 *
 * Description: Is able to generate value objects according to database
 *              metadata.
 */
package org.acmsl.queryj.tools.templates.valueobject;

/*
 * Importing project-specific classes.
 */
import org.acmsl.queryj.tools.DatabaseMetaDataManager;
import org.acmsl.queryj.tools.MetaDataUtils;
import org.acmsl.queryj.tools.templates.InvalidTemplateException;
import org.acmsl.queryj.tools.templates.TableTemplate;

/*
 * Importing some ACM-SL classes.
 */
import org.acmsl.commons.utils.EnglishGrammarUtils;
import org.acmsl.commons.utils.StringUtils;

/*
 * Importing some JDK classes.
 */
import java.text.MessageFormat;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

/**
 * Is able to generate value objects according to database metadata.
 * @author <a href="mailto:chous@acm-sl.org"
 *         >Jose San Leandro</a>
 */
public class ValueObjectTemplate
    extends  AbstractValueObjectTemplate
    implements  ValueObjectTemplateDefaults
{
    /**
     * Builds a ValueObjectTemplate using given information.
     * @param packageName the package name.
     * @param tableTemplate the table template.
     * @param metaDataManager the metadata manager.
     */
    public ValueObjectTemplate(
        final String packageName,
        final TableTemplate tableTemplate,
        final DatabaseMetaDataManager metaDataManager)
    {
        super(
            DEFAULT_HEADER,
            PACKAGE_DECLARATION,
            packageName,
            tableTemplate,
            metaDataManager,
            ACMSL_IMPORTS,
            JDK_IMPORTS,
            DEFAULT_JAVADOC,
            CLASS_DEFINITION,
            DEFAULT_CLASS_START,
            DEFAULT_CONSTRUCTOR,
            DEFAULT_CONSTRUCTOR_FIELD_JAVADOC,
            DEFAULT_CONSTRUCTOR_FIELD_DECLARATION,
            DEFAULT_CONSTRUCTOR_FIELD_VALUE_SETTER,
            DEFAULT_CLASS_END);
    }

    /**
     * Retrieves the source code generated by this template.
     * @return such code.
     * @throws InvalidTemplateException if the template is invalid.
     */
    protected String generateOutput()
        throws  InvalidTemplateException
    {
        return
            generateOutput(
                getTableTemplate(),
                getMetaDataManager(),
                getPackageName(),
                getHeader(),
                getPackageDeclaration(),
                getAcmslImports(),
                getJdkImports(),
                getJavadoc(),
                getClassDefinition(),
                getClassStart(),
                getConstructor(),
                getConstructorFieldJavadoc(),
                getConstructorFieldDefinition(),
                getConstructorFieldValueSetter(),
                getClassEnd(),
                MetaDataUtils.getInstance(),
                EnglishGrammarUtils.getInstance(),
                StringUtils.getInstance());
    }

    /**
     * Retrieves the source code generated by this template.
     * @param tableTemplate the table template.
     * @param metaDataManager the <code>DatabaseMetaDataManager</code>
     * instance.
     * @param packageName the package name.
     * @param header the header.
     * @param packageDeclaration the package declaration.
     * @param acmslImports the ACM-SL imports.
     * @param jdkImports the JDK imports.
     * @param javadoc the class javadoc.
     * @param classDefinition the class definition.
     * @param classStart the class start.
     * @param constructor the constructor.
     * @param constructorFieldJavadoc the constructor field javadoc.
     * @param constructorFieldDefinition the constructor field definition.
     * @param constructorFieldValueSetter the constructor field value setter.
     * @param classEnd the class end.
     * @param metaDataUtils the <code>MetaDataUtils</code> instance.
     * @param englishGrammarUtils the <code>EnglishGrammarUtils</code>
     * instance.
     * @param stringUtils the <code>StringUtils</code> instance.
     * @return such code.
     * @throws InvalidTemplateException if the template is invalid.
     * @precondition tableTemplate != null
     * @precondition metaDataManager != null
     * @precondition packageName != null
     * @precondition header != null
     * @precondition packageDeclaration != null
     * @precondition acmslImports != null
     * @precondition jdkImports != null
     * @precondition javadoc != null
     * @precondition classDefinition != null
     * @precondition classStart != null
     * @precondition constructor != null
     * @precondition constructorFieldJavadoc != null
     * @precondition constructorFieldDefinition != null
     * @precondition constructorFieldValueSetter != null
     * @precondition classEnd != null
     * @precondition metaDataUtils != null
     * @precondition englishGrammarUtils != null
     * @precondition stringUtils != null
     */
    protected String generateOutput(
        final TableTemplate tableTemplate,
        final DatabaseMetaDataManager metaDataManager,
        final String packageName,
        final String header,
        final String packageDeclaration,
        final String acmslImports,
        final String jdkImports,
        final String javadoc,
        final String classDefinition,
        final String classStart,
        final String constructor,
        final String constructorFieldJavadoc,
        final String constructorFieldDefinition,
        final String constructorFieldValueSetter,
        final String classEnd,
        final MetaDataUtils metaDataUtils,
        final EnglishGrammarUtils englishGrammarUtils,
        final StringUtils stringUtils)
      throws  InvalidTemplateException
    {
        StringBuffer t_sbResult = new StringBuffer();

        MessageFormat t_Formatter = new MessageFormat(header);
        t_sbResult.append(
            t_Formatter.format(
                new Object[]
                {
                    englishGrammarUtils.getSingular(
                        tableTemplate.getTableName())
                }));

        t_Formatter = new MessageFormat(packageDeclaration);
        t_sbResult.append(
            t_Formatter.format(
                new Object[]
                {
                    packageName
                }));

        //t_sbResult.append(acmslImports);
        t_sbResult.append(jdkImports);

        t_Formatter = new MessageFormat(javadoc);
        t_sbResult.append(
            t_Formatter.format(
                new Object[]
                {
                    englishGrammarUtils.getSingular(
                        tableTemplate.getTableName())
                }));

        t_Formatter = new MessageFormat(classDefinition);
        t_sbResult.append(
            t_Formatter.format(
                new Object[]
                {
                    stringUtils.capitalize(
                        englishGrammarUtils.getSingular(
                            tableTemplate.getTableName().toLowerCase()),
                        '_')
                }));

        t_sbResult.append(classStart);

        List t_lFields = tableTemplate.getFields();

        MessageFormat t_ConstructorFormatter =
            new MessageFormat(constructor);

        if  (t_lFields != null)
        {
            Iterator t_itFields = t_lFields.iterator();

            StringBuffer t_sbConstructorFieldJavadoc = new StringBuffer();

            MessageFormat t_ConstructorFieldJavadocFormatter =
                new MessageFormat(constructorFieldJavadoc);

            StringBuffer t_sbConstructorFieldDefinition = new StringBuffer();

            MessageFormat t_ConstructorFieldDefinitionFormatter =
                new MessageFormat(constructorFieldDefinition);

            StringBuffer t_sbConstructorFieldValueSetter = new StringBuffer();

            MessageFormat t_ConstructorFieldValueSetterFormatter =
                new MessageFormat(constructorFieldValueSetter);

            while  (t_itFields.hasNext()) 
            {
                String t_strField = (String) t_itFields.next();

                int t_iColumnType =
                    metaDataManager.getColumnType(
                        tableTemplate.getTableName(),
                        t_strField);

                boolean t_bAllowsNull = false;

                boolean t_bIsPrimaryKey =
                    metaDataManager.isPrimaryKey(
                        tableTemplate.getTableName(),
                        t_strField);

                if  (!t_bIsPrimaryKey)
                {
                    t_bAllowsNull =
                        metaDataManager.allowsNull(
                            tableTemplate.getTableName(),
                            t_strField);
                }

                String t_strFieldType =
                    metaDataUtils.getNativeType(t_iColumnType, t_bAllowsNull);

                if  (t_bAllowsNull)
                {
                    t_strFieldType =
                        metaDataUtils.getSmartObjectType(t_iColumnType);
                }

                t_sbConstructorFieldJavadoc.append(
                    t_ConstructorFieldJavadocFormatter.format(
                        new Object[]
                        {
                            t_strField.toLowerCase(),
                            t_strField
                        }));

                t_sbConstructorFieldDefinition.append(
                    t_ConstructorFieldDefinitionFormatter.format(
                        new Object[]
                        {
                            t_strFieldType,
                            t_strField.toLowerCase()
                        }));

                if  (t_itFields.hasNext())
                {
                    t_sbConstructorFieldDefinition.append(",");
                }
                    
                t_sbConstructorFieldValueSetter.append(
                    t_ConstructorFieldValueSetterFormatter.format(
                        new Object[]
                        {
                            t_strField.toLowerCase()
                        }));

                if  (t_itFields.hasNext())
                {
                    t_sbConstructorFieldValueSetter.append(",");
                }
                    
            }

            t_sbResult.append(
                t_ConstructorFormatter.format(
                    new Object[]
                    {
                        stringUtils.capitalize(
                            englishGrammarUtils.getSingular(
                                tableTemplate.getTableName().toLowerCase()),
                            '_'),
                        t_sbConstructorFieldJavadoc.toString(),
                        t_sbConstructorFieldDefinition.toString(),
                        t_sbConstructorFieldValueSetter.toString()
                    }));
        }

        t_sbResult.append(classEnd);

        return t_sbResult.toString();
    }
}
