//
//                      QueryJ
//
//  Copyright (C) 2002-today  ACM-SL
//                           chous@acm-sl.org
//
//  This library is free software; you can redistribute it and/or
//  modify it under the terms of the GNU General Public
//  License as published by the Free Software Foundation; either
//  version 2 of the License, or any later version.
//
//  This library is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
//  General Public License for more details.
//
//  You should have received a copy of the GNU General Public
//  License along with this library; if not, write to the Free Software
//  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
//
//  Thanks to ACM S.L. for distributing this library under the GPL license.
//  Contact info: jose.sanleandro@acm-sl.com
//  Postal Address: c/Playa de Lagoa, 1
//                  Urb. Valdecabanas
//                  Boadilla del monte
//                  28660 Madrid
//                  Spain
//
//***************************************************************************
//
// Filename: BaseResultSetExtractor.stg
//
// Author: Jose San Leandro Armendariz
//
// Description: Base class of all ResultSetExtractors.
//
group BaseResultSetExtractor;

source(input) ::= <<
<!
  Generates a BaseResultSetExtractor source.
  @param input.copyright_years the copyright's years.
  @param input.package the package.
  @params class
!>
<if(input.header)>
<input.header>
<else>
<java_header(
  years=input.copyright_years,
  description=
  [
    first_line_description(),
    second_line_description()
  ],
  timestamp=input.timestamp)>
<endif>
// Generated by org/acmsl/queryj/dao/BaseResultSetExtractor.stg

<package_declaration(
  packageNames=
  [
    input.base_package_name,
    typeInitMap.baseDAOSubpackageName,
    typeInitMap.rdbSubpackageName
  ])>

<checkers_import()>
/*
 * Importing some JDK classes.
 */
import java.sql.ResultSet;
import java.sql.SQLException;

/*
 * Importing Spring classes.
 */
import org.springframework.dao.DataAccessException;
import org.springframework.jdbc.core.ResultSetExtractor;

<class(input=input)>
>>

first_line_description() ::= <<
<!
  Generates a description for the generated file.
!>
Common resultset extractor to notify DAOListeners
>>

second_line_description() ::= <<
<!
  Generates a description for the generated file.
!>
of the ResultSet life-cycle events.
>>

class(input) ::= <<
<!
 Generates the class body.
 @param input.timestamp the timestamp.
 @param input.tr_name the table repository name.
!>
/**
 * <[
      first_line_description(),
      second_line_description()
    ]:{line |<line>}; separator="\n * ">
<class_common_javadoc()>
 */
public abstract class <input.tr_name_capitalized>ResultSetExtractor
    implements  ResultSetExtractor
{
    /**
     * The DAOListener instance.
     *
    private <input.tr_name_capitalized>DAOListener m__DAOListener;

    /**
     * Constructs a new {@link <input.tr_name_capitalized>ResultSetExtractor}.
     * @param daoListener the dao listener.
     */
    public <input.tr_name_capitalized>ResultSetExtractor(
        <notnull()>final <input.tr_name_capitalized>DAOListener daoListener)
    {
        immutableSetDAOListener(daoListener);
    }

    /**
     * Specifies the DAO listener.
     * @param daoListener such listener.
     */
    protected final void immutableSetDAOListener(
        <notnull()>final <input.tr_name_capitalized>DAOListener daoListener)
    {
        m__DAOListener = daoListener;
    }

    /**
     * Specifies the DAO listener.
     * @param daoListener such listener.
     */
    @SuppressWarnings("unused")
    protected void setDAOListener(
        <notnull()>final <input.tr_name_capitalized>DAOListener daoListener)
    {
        immutableSetDAOListener(daoListener);
    }

    /**
     * Retrieves the DAO listener.
     * @return such instance.
     */
    <nullable()>
    protected <input.tr_name_capitalized>DAOListener getDAOListener()
    {
        return m__DAOListener;
    }

    /**
     * Extracts information from given result set.
     * @param resultSet the result set.
     * @return the associated value-object, or
     * \{@link null} if the operation returned no data.
     * @throws SQLException intercepted by \<i>Spring\</i\>.
     * @throws DataAccessException with information about any
     * custom exception.
     */
    <notnull()>
    public final Object extractData(<notnull()>final ResultSet resultSet)
        throws  SQLException,
                DataAccessException
    {
        return extractData(resultSet, getDAOListener());
    }


    /**
     * Extracts information from given result set.
     * @param resultSet the result set.
     * @param daoListener the \{@link <input.tr_name_capitalized>DAOListener} instance.
     * @return the associated value-object, or
     * \{@link null} if the operation returned no data.
     * @throws SQLException intercepted by \<i>Spring\</i\>.
     * @throws DataAccessException with information about any
     * custom exception.
     */
    <notnull()>
    protected abstract Object extractData(
        <notnull()>final ResultSet resultSet,
        <nullable()>final <input.tr_name_capitalized>DAOListener daoListener)
      throws  SQLException,
              DataAccessException;
}
>>
