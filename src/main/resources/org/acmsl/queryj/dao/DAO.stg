//;-*- mode: antlr -*-
//
//                      QueryJ
//
//  Copyright (C) 2002-today  ACM-SL
//                           chous@acm-sl.org
//
//  This library is free software; you can redistribute it and/or
//  modify it under the terms of the GNU General Public
//  License as published by the Free Software Foundation; either
//  version 2 of the License, or any later version.
//
//  This library is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
//  General Public License for more details.
//
//  You should have received a copy of the GNU General Public
//  License along with this library; if not, write to the Free Software
//  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
//
//  Thanks to ACM S.L. for distributing this library under the GPL license.
//  Contact info: jose.sanleandro@acm-sl.com
//  Postal Address: c/Playa de Lagoa, 1
//                  Urb. Valdecabanas
//                  Boadilla del monte
//                  28660 Madrid
//                  Spain
//
//***************************************************************************
//
// Filename: DAO.stg
//
// Author: Jose San Leandro Armendariz
//
// Description: Defines the rules to generate DAO database-based
//              implementations.
//
group DAO;

source() ::= <<
<!
  Generates a DAO database implementation source file.
  @param copyright_years the copyright's years.
  @param table the table.
  @param package the package.
  @param dao_class_name the DAO class name.
  @param dao_factory_class_name the DAO factory class name.
  @param dao_implementation_class_name the DAO implementation class name.
  @params project_imports
  @params class
!>
<sourceImpl(table=table)>
>>

sourceImpl(table) ::= <<
<!
  Generates a DAO database implementation source file.
  @param copyright_years the copyright's years.
  @param table_name the table name.
  @param package the package.
  @param dao_class_name the DAO class name.
  @param dao_factory_class_name the DAO factory class name.
  @param dao_implementation_class_name the DAO implementation class name.
  @params project_imports
  @params class
!>
<if(header)>
<header>
<else>
<java_header(
  years=copyright_years,
  description=
  [
    first_line_description(
      tableName=table_name,
      engineName=engine_name,
      engineVersion=engine_version),
    second_line_description(
      tableName=table_name,
      engineName=engine_name,
      engineVersion=engine_version),
    third_line_description(
      tableName=table_name,
      engineName=engine_name,
      engineVersion=engine_version)
  ],
  timestamp=timestamp)>
<endif>
// Generated using org/acmsl/queryj/dao/DAO.stg

<package_declaration(
  packageNames=
  [
    sub_package_name
  ])>

<project_imports(
  basePackageName=project_package,
  subpackageName=sub_package_name,
  tableName=table_name,
  tableNameLowercased=table.nameNormalizedLowercased,
  jdbcOperationsSubpackageName=typeInitMap.jdbcOperationsSubpackageName,
  customResults=table.customResults,
  voSubpackageName=typeInitMap.voSubpackageName,
  voName=table.voName,
  voFactorySubpackageName=typeInitMap.voFactorySubpackageName,
  rdbSubpackageName=typeInitMap.rdbSubpackageName,
  trSubpackageName=typeInitMap.tableRepositorySubpackageName,
  trName=repository.capitalized,
  damSubpackageName=typeInitMap.dataAccessManagerSubpackageName,
  fkssSubpackageName=typeInitMap.foreignKeyStatementSetterSubpackageName,
  fkAttributes=table.foreignKeys,
  baseDAOSubpackageName=typeInitMap.baseDAOSubpackageName,
  table=table,
  parent=table.parentTable)>

/*
 * Importing some ACM-SL classes.
 */
import org.acmsl.queryj.DeleteQuery;
import org.acmsl.queryj.Query;
import org.acmsl.queryj.QueryFactory;

<checkers_import()>
/*
 * Importing Spring classes.
 */
import org.springframework.dao.DataAccessException;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.jdbc.core.ParameterDisposer;
import org.springframework.jdbc.core.PreparedStatementCallback;
import org.springframework.jdbc.core.PreparedStatementCreator;
import org.springframework.jdbc.core.PreparedStatementCreatorFactory;
import org.springframework.jdbc.core.PreparedStatementSetter;
import org.springframework.jdbc.core.ResultSetExtractor;
import org.springframework.jdbc.core.SqlParameter;
import org.springframework.jdbc.datasource.DataSourceTransactionManager;
import org.springframework.jdbc.object.SqlQuery;
import org.springframework.jdbc.support.JdbcUtils;
import org.springframework.transaction.PlatformTransactionManager;
import org.springframework.transaction.support.TransactionCallback;
import org.springframework.transaction.support.TransactionTemplate;
import org.springframework.transaction.TransactionException;
import org.springframework.transaction.TransactionStatus;

/*
 * Importing some JDK classes.
 */
import java.math.BigDecimal;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.PreparedStatement;
import java.sql.Types;
import java.sql.Timestamp;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/*
 * Importing some JDK extension classes
 */
import javax.sql.DataSource;

/*
 * Importing Jakarta Commons Logging classes
 */
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;

<class(foreign_keys=table.foreignKeys, table=table)>
>>

first_line_description(tableName, engineName, engineVersion) ::= <<
<!
  Generates a description for the generated file.
  @param tableName the table name.
  @param engineName the engine name.
  @param engineVersion the engine version.
!>
DAO implementation responsible of managing the access to
>>

second_line_description(tableName, engineName, engineVersion) ::= <<
<!
  Generates a description for the generated file.
  @param tableName the table name.
  @param engineName the engine name.
  @param engineVersion the engine version.
!>
 <tableName> entities from <engineName>
>>

third_line_description(tableName, engineName, engineVersion) ::= <<
<!
  Generates a description for the generated file.
  @param tableName the table name.
  @param engineName the engine name.
  @param engineVersion the engine version.
!>
(<engineVersion>) persistence layers.
>>

project_imports(
  basePackageName,
  subpackageName,
  tableName,
  tableNameLowercased,
  jdbcOperationsSubpackageName,
  customResults,
  voSubpackageName,
  voName,
  voFactorySubpackageName,
  rdbSubpackageName,
  trSubpackageName,
  trName,
  damSubpackageName,
  fkssSubpackageName,
  fkAttributes,
  baseDAOSubpackageName,
  table,
  parent) ::= <<
<!
  Generates the project imports
  @param basePackageName the base package name.
  @param baseDAOSubpackageName the subpackage name.
  @param jdbcOperationsSubpackageName the subpackage for the JDBC operations.
  @param customResults the results of the custom queries.
  @param voSubpackageName the subpackage for the value
  @param voName the class name of the value-object.
  @param voFactorySubpackageName the subpackage of the value object factories.
  @param rdbSubpackageName the subpackage common of all RDBMs implementations.
  @param trSubpackageName the subpackage of the table repository.
  @param trName the name of the table repository.
  @param damSubpackageName the subpackage of the DataAccessManager.
  @param fkssSubpackageName the subpackage of the foreign key attribute
  statement setter.
  @param fkAttributes the foreign key attributes.
  @param baseDAOSubpackageName the subpackage of the base DAO interface.
  @param table the table.
  @param parent the parent table (optional).
!>
/*
 * Importing project-specific classes.
 */
import <subpackageName>.<tableNameLowercased>.<voName>AttributesStatementSetter;
import <subpackageName>.<tableNameLowercased>.<voName>PkStatementSetter;
import <subpackageName>.<tableNameLowercased>.<voName>ResultSetExtractor;
<customResults:resultset_extractor_import(
  basePackageName=basePackageName,
  baseDAOSubpackageName=baseDAOSubpackageName,
  rdbSubpackageName=rdbSubpackageName,
  subpackageName=subpackageName,
  crseIdCapitalized=it.idCapitalized); separator="\n">
import <basePackageName>.<voSubpackageName>.<voName>;
<if(parent)>
import <basePackageName>.<baseDAOSubpackageName>.<parent.voName>DAO;
import <basePackageName>.<voSubpackageName>.<parent.voName>;
<endif>

<if(table.voDecorated)>
import <basePackageName>.<voSubpackageName>.<voName>Decorator;
<endif>

import <basePackageName>.<voFactorySubpackageName>.<voName>ValueObjectFactory;
import <basePackageName>.<baseDAOSubpackageName>.<voName>DAO;
import <basePackageName>.<baseDAOSubpackageName>.<rdbSubpackageName>.<trName>DAOListener;
import <basePackageName>.<baseDAOSubpackageName>.<rdbSubpackageName>.<trName>JdbcTemplate;
import <basePackageName>.<baseDAOSubpackageName>.<rdbSubpackageName>.<trName>PreparedStatementCreator;
import <basePackageName>.<baseDAOSubpackageName>.<rdbSubpackageName>.<trName>ResultSetExtractor;
<!//import <basePackageName>.<trSubpackageName>.<trName>TableRepository;!>
import <basePackageName>.<damSubpackageName>.<trName>DataAccessManager;
<fkAttributes:foreignkey_statementsetter_import(
  basePackageName=basePackageName,
  fkssSubpackageName=fkssSubpackageName,
  foreignKey=it); separator="\n">
<fkAttributes:foreignkey_dao_import(
  basePackageName=basePackageName,
  baseDAOSubpackageName=baseDAOSubpackageName,
  referredVOName=it.sourceVoName); separator="\n">
>>

foreignkey_statementsetter_import(
  basePackageName,
  fkssSubpackageName,
  foreignKey) ::= <<
<!
  Generates the import statement of a foreign key statement setter.
  @param basePackageName the base package.
  @param fkssSubpackageName the subpackage of the foreign key attribute
  statement setter.
  @param foreignKey the foreign key.
!>
<!//import <basePackageName>.<fkssSubpackageName>.<foreignKey.targetVoName>By<foreignKey.sourceVoName>StatementSetter;!>
>>

foreignkey_dao_import(
  basePackageName,
  baseDAOSubpackageName,
  referredVOName) ::= <<
<!
  Generates the import statement of a foreign key DAO.
  @param baseDAOSubpackageName the subpackage of the base DAO interface.
  @param referredVOName the referred value object name.
!>
import <basePackageName>.<baseDAOSubpackageName>.<referredVOName>DAO;
>>

class(foreign_keys, table) ::= <<
<!
 Generates the class body.
 @param engine_name the engine name.
 @param engine_version the engine version.
 @param timestamp the timestamp.
 @param custom_results the results for the custom queries.
 @param repository the table repository name.
 @param table the table.
!>
<classImpl(foreign_keys=table.foreignKeys, table=table, parent=table.parentTable)>
>>

classImpl(foreign_keys, table, parent) ::= <<
<!
 Generates the class body.
 @param engine_name the engine name.
 @param engine_version the engine version.
 @param timestamp the timestamp.
 @param repository the table repository name.
 @param table the table.
 @param parent the parent table.
!>
/**
 * <[
      first_line_description(
        tableName=table_name,
        engineName=engine_name,
        engineVersion=engine_version),
      second_line_description(
        tableName=table_name,
        engineName=engine_name,
        engineVersion=engine_version),
      third_line_description(
        tableName=table_name,
        engineName=engine_name,
        engineVersion=engine_version)
    ]:{line |<line>}; separator="\n * ">
<class_common_javadoc(template="org/acmsl/queryj/dao/DAO.stg")>
 */
public <if(table.dynamicQueries)>abstract <endif>class <engine_name><table.voName>DAO
  extends     <repository.capitalized>JdbcTemplate
  implements  <table.voName>DAO
<!//              <repository.capitalized>TableRepository!>
{
    /**
     * The SQL to find by primary key.
     */
    public static final String _FIND_BY_PK_SQL =
          "SELECT "
<if(parent)>
<table.allParentAndNonParentAttributes:{ attr |
        +   "<attr.tableNameUppercased>.<attr.nameUppercased>}; separator=", \"\n"> "
        + "FROM <table.nameUppercased>, <table.allParentTables:{ table | <table.nameUppercased>}; separator=", "> "
        + "WHERE "
<table.primaryKey:{pk |
        +   "<attr.tableNameUppercased>.<pk.nameUppercased> = ? }; separator=" AND \"\n">"
        <find_by_pk_sql_join(table=table, parent=table.parentTable)>
        <table.allParentTables:{ table | <if(table.parentTable)><find_by_pk_sql_join(table=table, parent=table.parentTable)><endif>}>;
<else>
<table.attributes:{attr |
        +   "<attr.nameUppercased>}; separator=", \"\n"> "
        + "FROM <table.nameUppercased> "
        + "WHERE "
<table.primaryKey:{attr |
        +   "<attr.nameUppercased> = ?}; separator=" AND \"\n">";
<endif>

    /**
     * The SQL to update.
     */
    public static final String _UPDATE_SQL =
          "UPDATE <table.nameUppercased> "
        + "SET "
<if(table.nonPrimaryKeyNonReadOnlyAttributes)>
<table.nonPrimaryKeyNonReadOnlyAttributes:{attr|
        +   "<attr.nameUppercased> = ?}; separator=", \"\n"> "
<else>
<table.primaryKey:{attr|
        +   "<attr.nameUppercased> = ?}; separator=", \"\n"> "
<endif>

        + "WHERE "
<if(table.primaryKey)>
<table.primaryKey:{attr |
        +   "<attr.nameUppercased> = ?}; separator=" AND \"\n">";
<else>
<table.attributes:{attr |
        +   "<attr.nameUppercased> = ?}; separator=" AND \"\n">";
<endif>


     /**
      * The SQL to delete.
      */
     public static final String _DELETE_SQL =
          "DELETE "
        + "FROM <table.nameUppercased> "
        + "WHERE "
<if(table.primaryKey)>
<table.primaryKey:{attr |
        +   "<attr.nameUppercased> = ?}; separator=" AND \"\n">";
<else>
<table.attributes:{attr |
        +   "<attr.nameUppercased> = ?}; separator=" AND \"\n">";
<endif>


      /**
       * The SQL to insert.
       */
      public static final String _INSERT_SQL =
          "INSERT "
        + "INTO <table.nameUppercased> "
        + "( "
<if(table.nonReadOnlyAttributes)>
<table.nonReadOnlyAttributes:{attr|
        +   "<attr.nameUppercased>}; separator=", \"\n"> "
<else>
<table.attributes:{attr|
        +   "<attr.nameUppercased>}; separator=", \"\n"> "
<endif>
        + ") "
        + "VALUES "
        + "( "
<if(table.nonReadOnlyAttributes)>
<table.nonReadOnlyAttributes:{attr|
        +   "?}; separator=", \"\n"> "
<else>
<table.attributes:{attr|
        +   "?}; separator=", \"\n"> "
<endif>

        + ")";

    <table.foreignKeys:delete_by_fk_sql(foreignKey=it); separator="\n\n">

      // custom selects

<table.customSelects:{sql|
<if(!sql.dynamic)>
<if(sql.splittedQuotedValue)>
      /**
       * The <sql.id> SQL.
       */
     public static final String <sql.idAsConstant>_SQL =
         <sql.splittedQuotedValue; separator=" +\n">;
<endif>
<endif>
}; separator="\n\n">

      // custom selects-for-update
<table.customSelectsForUpdate:{sql|
<if(!sql.dynamic)>
      /**
       * The <sql.id> SQL.
       */
     public static final String <sql.idAsConstant>_SQL =
         <sql.splittedQuotedValue; separator=" +\n"><endif>;}; separator="\n\n">
               
      // custom updates or inserts
<table.customUpdatesOrInserts:{sql|
<if(!sql.dynamic)>
<if(sql.splittedQuotedValue)>
      /**
       * The <sql.id> SQL.
       */
     public static final String <sql.idAsConstant>_SQL =
         <sql.splittedQuotedValue; separator=" +\n">;
<endif>
<endif>
}; separator="\n\n">
               
    /**
     * Builds a {@link <engine_name><table.voName>DAO} instance
     * with given data source.
     * @param dataSource the required data source.
     * @param daoListener the {@link <repository.capitalized>DAOListener}
     * instance.
     */
    public <engine_name><table.voName>DAO(
        <notnull()>final DataSource dataSource,
        <nullable()>final <repository.capitalized>DAOListener daoListener)
    {
        super(dataSource, daoListener);
    }

<if(table.static)>
    <find_constant_by(primaryKey=table.primaryKey,voName=table.voName); separator="\n\n">
<endif>


    /**
     * Retrieves {@link <table.voName>} information
     * filtering by its primary key.
     <table.primaryKey:attribute_javadoc(name=it.nameLowercased); separator="\n">
<if(table.voDecorated)>
     * @return the {@link <table.voName>Decorator} matching given
<else>
     * @return the {@link <table.voName>} matching given
<endif>

     * primary key.
     * @throws DataAccessException if the operation fails.
     */
<if(table.voDecorated)>
    public <table.voName>Decorator findByPrimaryKey(
<else>
    public <table.voName> findByPrimaryKey(
<endif>

        <table.primaryKey:attribute_declaration(attr=it); separator=",\n">)
    {
        return
            findByPrimaryKey(
                <table.primaryKey:{<it.nameLowercased>}; separator=",\n">,
                auditSql(_FIND_BY_PK_SQL),
                getDataSource());
    }

    /**
     * Retrieves {@link <table.voName>} information
     * filtering by its primary key.
     <table.primaryKey:attribute_javadoc(name=it.nameLowercased); separator="\n">
     * @param query the query to find by primary key.
     * @param dataSource the {@link DataSource} instance.
<if(table.voDecorated)>
     * @return the {@link <table.voName>Decorator} matching given
<else>
     * @return the {@link <table.voName>} matching given
<endif>

     * primary key.
     * @throws DataAccessException if the operation fails.
     */
<if(table.voDecorated)>
    protected <table.voName>Decorator findByPrimaryKey(
<else>
    protected <table.voName> findByPrimaryKey(
<endif>

        <table.primaryKey:attribute_declaration(attr=it); separator=",\n">,
        <notnull()>final String query,
        <notnull()>final DataSource dataSource)
    {
        return
            findByPrimaryKey(
                <table.primaryKey:{<it.nameLowercased>}; separator=",\n">,
                query,
                new DataSourceTransactionManager(dataSource));
    }

    /**
     * Retrieves {@link <table.voName>} information
     * filtering by its primary key.
     <table.primaryKey:attribute_javadoc(name=it.nameLowercased); separator="\n">
     * @param query the query to find by primary key.
     * @param transactionManager the {@link PlatformTransactionManager}
     * instance.
<if(table.voDecorated)>
     * @return the {@link <table.voName>Decorator} matching given
<else>
     * @return the {@link <table.voName>} matching given
<endif>

     * primary key.
     * @throws DataAccessException if the operation fails.
     */
<if(table.voDecorated)>
    protected <table.voName>Decorator findByPrimaryKey(
<else>
    protected <table.voName> findByPrimaryKey(
<endif>

        <table.primaryKey:attribute_declaration(attr=it); separator=",\n">,
        <notnull()>final String query,
        <notnull()>final PlatformTransactionManager transactionManager)
    {
        return
            findByPrimaryKey(
                <table.primaryKey:{<it.nameLowercased>}; separator=",\n">,
                query,
                new TransactionTemplate(transactionManager),
                getDAOListener());
    }

    /**
     * Retrieves {@link <table.voName>} information
     * filtering by its primary key.
     <table.primaryKey:attribute_javadoc(name=it.nameLowercased); separator="\n">
     * @param query the query to find by primary key.
     * @param transactionTemplate the {@link TransactionTemplate}
     * instance.
     * @param daoListener the {@link <repository.capitalized>DAOListener} instance.
<if(table.voDecorated)>
     * @return the {@link <table.voName>Decorator} matching given
<else>
     * @return the {@link <table.voName>} matching given
<endif>

     * primary key.
     * @throws DataAccessException if the operation fails.
     */
    @SuppressWarnings("unchecked")
<if(table.voDecorated)>
    protected <table.voName>Decorator findByPrimaryKey(
<else>
    protected <table.voName> findByPrimaryKey(
<endif>

        <table.primaryKey:attribute_declaration(attr=it); separator=",\n">,
        <notnull()>final String query,
        <notnull()>final TransactionTemplate transactionTemplate,
        <nullable()>final <repository.capitalized>DAOListener daoListener)
    {
        return
<if(table.voDecorated)>
            (<table.voName>Decorator)
<else>
            (<table.voName>)
<endif>

                transactionTemplate.execute(
                    new QueryTransactionCallback(
                        new <repository.capitalized>PreparedStatementCreator(
                            query, daoListener),
                        new <table.voName>PkStatementSetter(
                            <table.primaryKey:{<it.nameLowercased>}; separator=",\n">),
                        new <table.voName>ResultSetExtractor(query, daoListener),
                        this));
    }

<if(lob_handling_required)>
    <indirect_template(name=lob_handling_required+"Insert")>
<else>
    <defaultInsert(table=table, parent=parent)>
<endif>


    <table.allExternallyManagedAttributes:attribute_resultset_extractor_class(
      table=table,
      trNameCapitalized=repository.capitalized,
      nameCapitalized=it.nameCapitalized,
      getterMethod=it.getterMethod,
      objectType=it.objectType,
      isPrimitive=it.primitive)>

    /**
     * Updates {@link <table.voName>} information.
<if(parent)>
     <table.allParentAndNonParentNonReadOnlyAttributes:attribute_javadoc(name=it.nameLowercased); separator="\n">
<else>
     <table.nonReadOnlyAttributes:attribute_javadoc(name=it.nameLowercased); separator="\n">
<endif>

     * @return the number of entities updated.
     * @throws DataAccessException if the operation fails.
     */
    public int update(
<if(parent)>
        <table.allParentAndNonParentNonReadOnlyAttributes:attribute_declaration_impl(attr=it); separator=",\n">)
<else>
        <table.nonReadOnlyAttributes:attribute_declaration_impl(attr=it); separator=",\n">)
<endif>

    {
        return
            update(
<if(parent)>
                <table.allParentAndNonParentNonReadOnlyAttributes:{<it.nameLowercased>}; separator=",\n">,

                auditSql(_UPDATE_SQL),
                getDataSource(),
                <repository.capitalized>DataAccessManager.getInstance());
<else>
                <table.nonReadOnlyAttributes:{<it.nameLowercased>}; separator=",\n">,
                auditSql(_UPDATE_SQL),
                getDataSource());
<endif>

    }

    /**
     * Updates {@link <table.voName>} information.
<if(parent)>
     <table.allParentAndNonParentNonReadOnlyAttributes:attribute_javadoc(name=it.nameLowercased); separator="\n">
<else>
     <table.nonReadOnlyAttributes:attribute_javadoc(name=it.nameLowercased); separator="\n">
<endif>

     * @param query the query used to perform the update operation.
     * @param dataSource the {@link DataSource} instance.
<if(parent)>
     * @param dataAccessManager the {@link <repository.capitalized>DataAccessManager} instance.
<endif>

     * @return the number of entities updated.
     * @throws DataAccessException if the operation fails.
     */
    protected int update(
<if(parent)>
        <table.allParentAndNonParentNonReadOnlyAttributes:attribute_declaration_impl(attr=it); separator=",\n">,
        <notnull()>final String query,
        <notnull()>final DataSource dataSource,
        <notnull()>final <repository.capitalized>DataAccessManager dataAccessManager)
<else>
        <table.nonReadOnlyAttributes:attribute_declaration_impl(attr=it); separator=",\n">,
        <notnull()>final String query,
        <notnull()>final DataSource dataSource)
<endif>

    {
        return
            update(
<if(parent)>
                <table.allParentAndNonParentNonReadOnlyAttributes:{<it.nameLowercased>}; separator=",\n">,
                query,
                new DataSourceTransactionManager(dataSource),
                dataAccessManager.get<parent.voName>DAO());
<else>
                <table.nonReadOnlyAttributes:{<it.nameLowercased>}; separator=",\n">,
                query,
                new DataSourceTransactionManager(dataSource));
<endif>

    }

    /**
     * Updates {@link <table.voName>} information.
<if(parent)>
     <table.allParentAndNonParentNonReadOnlyAttributes:attribute_javadoc(name=it.nameLowercased); separator="\n">
<else>
     <table.nonReadOnlyAttributes:attribute_javadoc(name=it.nameLowercased); separator="\n">
<endif>

     * @param query the query used to perform the update operation.
     * @param transactionManager the {@link PlatformTransactionManager}
     * instance.
<if(parent)>
     * @param parentDAO the {@link <parent.voName>DAO} instance.
<endif>

     * @return the number of entities updated.
     * @throws DataAccessException if the operation fails.
     */
    protected int update(
<if(parent)>
        <table.allParentAndNonParentNonReadOnlyAttributes:attribute_declaration_impl(attr=it); separator=",\n">,
        <notnull()>final String query,
        <notnull()>final PlatformTransactionManager transactionManager,
        <notnull()>final <parent.voName>DAO parentDAO)
<else>
        <table.nonReadOnlyAttributes:attribute_declaration_impl(attr=it); separator=",\n">,
        <notnull()>final String query,
        <notnull()>final PlatformTransactionManager transactionManager)
<endif>

    {
        int result;

        result =
            update(
<if(parent)>
                <table.allParentAndNonParentNonReadOnlyAttributes:{<it.nameLowercased>}; separator=",\n">,
<else>
                <table.nonReadOnlyAttributes:{<it.nameLowercased>}; separator=",\n">,
<endif>

                query,
                new TransactionTemplate(transactionManager),
<if(parent)>
                parentDAO,
<endif>

                getDAOListener());

        return result;
    }

    /**
     * Updates {@link <table.voName>} information.
<if(parent)>
     <table.allParentAndNonParentNonReadOnlyAttributes:attribute_javadoc(name=it.nameLowercased); separator="\n">
<else>
     <table.nonReadOnlyAttributes:attribute_javadoc(name=it.nameLowercased); separator="\n">
<endif>

     * @param query the query used to perform the update operation.
     * @param transactionManager the {@link PlatformTransactionManager}
     * instance.
<if(parent)>
     * @param parentDAO the {@link <parent.voName>DAO} instance.
<endif>

     * @param daoListener the {@link <repository.capitalized>DAOListener} instance.
     * @return the number of entities updated.
     * @throws DataAccessException if the operation fails.
     */
    protected int update(
<if(parent)>
        <table.allParentAndNonParentNonReadOnlyAttributes:attribute_declaration_impl(attr=it); separator=",\n">,
<else>
        <table.nonReadOnlyAttributes:attribute_declaration_impl(attr=it); separator=",\n">,
<endif>

        <notnull()>final String query,
        <notnull()>final TransactionTemplate transactionTemplate,
<if(parent)>
        <notnull()>final <parent.voName>DAO parentDAO,
<endif>

        <notnull()>final <repository.capitalized>DAOListener daoListener)
    {
        int result = -10;

<if(parent)>
        parentDAO.update(
            <parent.allParentAndNonParentNonExternallyManagedNonReadOnlyPlusPkAttributes:{<it.nameLowercased>}; separator=",\n">);
<endif>


        Object t_Result =
            transactionTemplate.execute(
                new UpdateTransactionCallback(
                    new <repository.capitalized>PreparedStatementCreator(
                        query, daoListener),
                    new <table.voName>AttributesStatementSetter(
<if(parent)>
                        <table.allParentAndNonParentNonReadOnlyAttributes:{<it.nameLowercased>}; separator=",\n">,
<else>
                        <table.nonReadOnlyAttributes:{<it.nameLowercased>}; separator=",\n">,
<endif>

<if(lob_handling_required)>
                        true,
                        false,
                        false),
<else>
                        true,
                        false),
<endif>

                    this));

        if  (t_Result instanceof Integer)
        {
            result = ((Integer) t_Result).intValue();
        }

        return result;
    }

    /**
     * Deletes {@link <table.voName>} information.
     <table.primaryKey:attribute_javadoc(name=it.nameLowercased); separator="\n">
     */
    protected void deleteNoFk(
        <table.primaryKey:attribute_declaration(attr=it); separator=",\n">)
    {
        deleteNoFk(
            <table.primaryKey:{<it.nameLowercased>}; separator=",\n">,
            auditSql(_DELETE_SQL),
<if(parent)>
            getDataSource(),
            <repository.capitalized>DataAccessManager.getInstance());
<else>
            getDataSource());
<endif>

    }

    /**
     * Deletes {@link <table.voName>} information.
     <table.primaryKey:attribute_javadoc(name=it.nameLowercased); separator="\n">
     * @param query the query used to perform the delete operation.
     * @param dataSource the {@link DataSource} instance.
<if(parent)>
     * @param dataAccessManager the {@link <repository.capitalized>DataAccessManager} instance.
<endif>
     */
    protected void deleteNoFk(
        <table.primaryKey:attribute_declaration(attr=it); separator=",\n">,
        <notnull()>final String query,
<if(parent)>
        <notnull()>final DataSource dataSource,
        <notnull()>final <repository.capitalized>DataAccessManager dataAccessManager)
<else>
        <notnull()>final DataSource dataSource)
<endif>

    {
        deleteNoFk(
            <table.primaryKey:{<it.nameLowercased>}; separator=",\n">,
            query,
<if(parent)>
            new DataSourceTransactionManager(dataSource),
            dataAccessManager.get<parent.voName>DAO());
<else>
            new DataSourceTransactionManager(dataSource));
<endif>

    }

    /**
     * Deletes {@link <table.voName>} information.
     <table.primaryKey:attribute_javadoc(name=it.nameLowercased); separator="\n">
     * @param query the query used to perform the delete operation.
     * @param transactionManager the {@link PlatformTransactionManager}
     * instance.
<if(parent)>
     * @param parentDAO the {@link <parent.voName>DAO} instance.
<endif>
     */
    protected void deleteNoFk(
        <table.primaryKey:attribute_declaration(attr=it); separator=",\n">,
        <notnull()>final String query,
<if(parent)>
        <notnull()>final PlatformTransactionManager transactionManager,
        <notnull()>final <parent.voName>DAO parentDAO)
<else>
        <notnull()>final PlatformTransactionManager transactionManager)
<endif>

    {
        deleteNoFk(
            <table.primaryKey:{<it.nameLowercased>}; separator=",\n">,
            query,
            new TransactionTemplate(transactionManager),
<if(parent)>
            parentDAO,
<endif>

            getDAOListener());
    }

    /**
     * Deletes {@link <table.voName>} information.
     <table.primaryKey:attribute_javadoc(name=it.nameLowercased); separator="\n">
     * @param query the query used to perform the delete operation.
     * @param transactionTemplate the {@link TransactionTemplate}
     * instance.
<if(parent)>
     * @param parentDAO the {@link <parent.voName>DAO} instance.
<endif>

     * @param daoListener the {@link <repository.capitalized>DAOListener} instance.
     */
    protected void deleteNoFk(
        <table.primaryKey:attribute_declaration(attr=it); separator=",\n">,
        <notnull()>final String query,
        <notnull()>final TransactionTemplate transactionTemplate,
<if(parent)>
        <notnull()>final <parent.voName>DAO parentDAO,
<endif>

        <nullable()>final <repository.capitalized>DAOListener daoListener)
    {
        transactionTemplate.execute(
            new UpdateTransactionCallback(
                new <repository.capitalized>PreparedStatementCreator(
                    query, daoListener),
                new <table.voName>PkStatementSetter(
                    <table.primaryKey:{<it.nameLowercased>}; separator=",\n">),
                this));
<if(parent)>
        parentDAO.delete(
            <table.primaryKey:{<it.nameLowercased>}; separator=",\n">);
<endif>

    }

    /**
     * Deletes {@link <table.voName>} information.
     <table.primaryKey:attribute_javadoc(name=it.nameLowercased); separator="\n">
     */
    public void delete(
        <table.primaryKey:attribute_declaration(attr=it); separator=",\n">)
    {
<if(table.foreignKeys)>
        <table.foreignKeys:fk_dao_delete_call(
          foreignKey=it, pkAttributes=table.primaryKey);
          separator="\n\n">
<endif>

        deleteNoFk(
            <table.primaryKey:{<it.nameLowercased>}; separator=",\n">);
    }
    <table.foreignKeys:fk_delete_method(
      foreignKey=it); separator="\n">

    <table.customSelects:custom_select(
      cs=it, table=table); separator="\n">

    <table.customUpdatesOrInserts:custom_update_or_insert(
      cs=it); separator="\n">

    /**
     * Extracts \<i><table.voName>\</i> value objects from result sets.
     * @author \<a href="http://www.acm-sl.org/queryj">QueryJ\</a>
     */
    public static class <table.voName>PkResultSetExtractor
        extends  <repository.capitalized>ResultSetExtractor
    {
        /**
         * Constructs a new {@link <table.voName>ResultSetExtractor}.
         * @param sql the original sql used.
         * @param daoListener the dao listener.
         */
        public <table.voName>PkResultSetExtractor(
            <notnull()>final String sql,
            <notnull()>final <repository.capitalized>DAOListener daoListener)
        {
            super(sql, daoListener);
        }

        // \<extract data>
        /**
         * Extracts \<i><table.voName>\</i> information from given result set.
         * @param resultSet the result set.
         * @param sql the original SQL.
         * @param daoListener the {@link <repository.capitalized>DAOListener} instance.
         * @return the {@link <table.voName>} or \<code>null\<code>
         * if the operation returned no data.
         * @throws SQLException intercepted by \<i>Spring\</i>.
         * @throws DataAccessException with information about any
         * custom exception.
         */
        @Override
        @SuppressWarnings("unchecked")
        <notnull()>
        protected Object extractData(
            <notnull()>final ResultSet resultSet,
            <notnull()>final String sql,
            <notnull()>final <repository.capitalized>DAOListener daoListener)
        throws  SQLException,
                DataAccessException
        {
            final Map result = new HashMap();

            int t_iRowCount = 0;

            if  (resultSet.next())
            {
                t_iRowCount++;

                daoListener.resultSetMovedForward(sql, t_iRowCount);

                int index = 1;

                <table.primaryKey:pk_resultset_extractor_parameter_retrieval(
                  name=it.nameLowercased,
                  getterMethod=it.getterMethod,
                  objectType=it.objectType,
                  isPrimitive=it.primitive)>
            }

            daoListener.resultSetClosed(sql, t_iRowCount);

            return result;
        }
        // \</extract data>
    }

    /**
     * Executes the update method on JdbcTemplate class.
     * @param creator the {@link PreparedStatementCreator} instance.
     * @param setter the {@link PreparedStatementSetter} instance.
     */
    public int update(
        final PreparedStatementCreator creator,
        final PreparedStatementSetter setter)
    {
        return super.update(creator, setter);
    }

    /**
     * Executes the query method on JdbcTemplate class.
     * @param creator the {@link PreparedStatementCreator} instance.
     * @param setter the {@link PreparedStatementSetter} instance.
     * @param extractor the {@link ResultSetExtractor} instance.
     */
    public Object query(
        final PreparedStatementCreator creator,
        final PreparedStatementSetter setter,
        final ResultSetExtractor extractor)
    {
        return super.query(creator, setter, extractor);
    }

    <inner_transaction_callbacks(
      daoName=engine_name+table.voName,
      voName=table.voName,
      lobHandlingRequired=lob_handling_required)>
}
>>

pk_resultset_extractor_parameter_retrieval(
  name, getterMethod, objectType, isPrimitive) ::= <<
<!
  Generates the piece of code to build a concrete value-object attribute.
  @param name the attribute name.
  @param getterMethod the getter method associated to such attribute.
  @param objectType the attribute type (Java version).
  @param isPrimitive whether the attribute is modelled as an instance or as
  a primitive type.
!>
index = index + 1;
result.put(
    "<name>",
<if(isPrimitive)>
    new <objectType>(resultSet.<getterMethod>(index)));
<else>
    resultSet.<getterMethod>(index));
<endif>
>>

resultset_extractor_parameter_retrieval(
  name, getterMethod, objectType, isPrimitive) ::= <<
<!
  Generates the piece of code to build a concrete value-object attribute.
  @param name the attribute name.
  @param getterMethod the getter method associated to such attribute.
  @param objectType the attribute type (Java version).
  @param isPrimitive whether the attribute is modelled as an instance or as
  a primitive type.
!>
index = index + 1;
result.put(
    fieldName,
<if(isPrimitive)>
    new <objectType>(resultSet.<getterMethod>(index)));
<else>
    resultSet.<getterMethod>(index));
<endif>
>>

find_constant_by(primaryKey, voName) ::= <<
/**
 * Loads \<i\><voName>\</i\> information from the constant pool,
 * filtering by <primaryKey:{attribute|<attribute.nameLowercased>}; separaror=", ">.
 <primaryKey:{attribute|<attribute_javadoc(name=attribute.nameLowercased)>}; separator="\n">
 * @return the {@link <voName>} instance.
 */
<nullable()>
public <voName> findConstantBy<primaryKey:{attribute|<attribute.nameCapitalized>}>(
    <primaryKey:{attribute|final <attribute.javaType> <attribute.nameLowercased>}; separator=",\n">)
{
    <nullable()><voName> result = null;

    for  (<nullable()><voName> item : FIXED_CONSTANTS)
    {
        if  (   (item != null)
             <primaryKey:{attribute|&& (item.get<attribute.nameCapitalized>().equals(
                    <attribute.nameLowercased>))}; separator="\n">)
        {
            result = item;
            break;
        }
    }

    return result;
}
>>

find_constant_by_pk(primaryKey, voName) ::= <<
/**
 * Loads \<i><voName>\</i> information from the constant pool,
 * filtering by the primary key.
 <primaryKey:{attribute|<attribute_javadoc(name=attribute.nameLowercased)>}; separator="\n">
 * @return the {@link <voName>} instance.
 */
<nullable()>
public <voName> findConstantByPk(
  <primaryKey:attribute_declaration(attr=it); separator=",\n">)
{
    <nullable()><voName> result = null;

    boolean found = false;

    for (<nullable()><voName> item : FIXED_CONSTANTS)
    {
        if  (item != null)
        {
            found = true;

            <primaryKey:static_attribute_check(attr=it);
              separator="\n">

            if  (found)
            {
                result = item;
                break;
            }
        }
    }

    return result;
}

>>

static_attribute_check(attr) ::= <<
<!
 Generates the code to perform the static check on given attribute.
 @param attr the attribute
!>
<if(attr.primitive)>
<static_primitive_attribute_check(attr=attr)>
<else>
<static_object_attribute_check(attr=attr)>
<endif>

>>

static_primitive_attribute_check(attr) ::= <<
<!
 Generates the code to perform the static check on given primitive attribute.
 @param attr the attribute
!>
found =
    (   (found)
     && (item.get<attr.nameCapitalized>() == <attr.nameLowercased>));
>>

static_object_attribute_check(attr) ::= <<
<!
 Generates the code to perform the static check on given primitive attribute.
 @param attr the attribute
!>
if  (found)
{
    Object t_<attr.nameCapitalized> =
        t_CurrentItem.get<attr.nameCapitalized>();

    if  (t_<attr.nameCapitalized> == null)
    {
        found = (<attr.name> == null);
    }
    else
    {
        found = t_<attr.nameCapitalized>.equals(<attr.name>);
    }
}
>>

em_attribute_value_retrieval(
  query,
  nativeType,
  nameLowercased,
  nameCapitalized,
  type,
  table) ::= <<
<!
  Writes the sentence to retrieve an externally-managed value.
  @param query the query to retrieve the externally-managed value.
  @param nativeType the native type of the attribute (Java-specific).
  @param nameLowercased the attribute name, in lower-case.
  @param nameCapitalized the name, capitalized.
  @param type the type.
  @param table the table.
!>
map =
   (Map)
       transactionTemplate.execute(
           new QueryTransactionCallback(
               "<query>",
               new <nameCapitalized><table.voName>ResultSetExtractor(
               "<nameLowercased>",
               getSql(),
               getDAOListener()),
               this));

<nativeType> <nameLowercased> =
    ((<type>) map.get("<nameLowercased>")).<nativeType>Value();
>>

fk_dao_delete_call(foreignKey, pkAttributes) ::= <<
<!
  Writes the code needed to use the DAO associated to a
  concrete foreign key to perform a delete operation.
  @param foreignKey the foreign key.
  @param pkAttributes the pk attributes.
!>
<if(foreignKey.nullable)>
//<foreignKey.targetVoName>DAO.discardRelationTo<foreignKey.sourceVoName>(
<else>
//<foreignKey.targetVoName>DAO.deleteBy<foreignKey.sourceVoName>(
<endif>
<!    <pkAttributes:{<it.nameLowercased>}; separator=",\n">); !>
>>

dao_javadoc(name,uncapitalizedName) ::= <<
<!
  Writes the Javadoc for a DAO parameter.
  @param name the name of the DAO.
  @param uncapitalizedName the name of the DAO, uncapitalized.
!>
* @param <uncapitalizedName>DAO the \<i\><name>DAO\</i\> instance.
>>

dao_declaration(name,uncapitalizedName) ::= <<
<!
  Writes the Javadoc for a DAO parameter.
  @param name the name of the DAO.
  @param uncapitalizedName the name of the DAO, uncapitalized.
!>
final <name>DAO <uncapitalizedName>DAO
>>

fk_delete_query(foreignKey) ::= <<
<!
 Defines the SQL to delete referred entities.
 @param foreignKey the foreign key.
!>
/**
 * The SQL to delete <foreignKey.fkName>-associated entities.
 */
public static final String _DELETE_BY_<foreignKey.nameUppercased>_SQL =
      "DELETE "
    + "FROM <table.nameUppercased> "
    + "WHERE "
<foreignKey:{attr|
    +   "<attr.nameUppercased> = ?}; separator=" AND \"\n">";

>>

fk_delete_method(foreignKey) ::= <<
<!
  Writes the deleteByXX method for a concrete foreign key.
  @param table_name the table name.
  @param foreignKey the foreign key.
!>
/**
 * Deletes <table_name> information from the persistence layer filtering
 * by given foreign keys.
 * \<br/>\<b>This method is not implemented yet\</b>.
 <foreignKey:attribute_javadoc(name=it.nameLowercased); separator="\n">
 */
public void deleteBy<foreignKey.attributes:{attr |<attr.nameCapitalized>}>(
    <foreignKey.attributes:attribute_declaration(attr=it); separator=",\n">)
{
    // TODO: not refactored yet. Removed till then.
    throw new IllegalArgumentException("Not implemented yet");
}
>>

defaultInsert(table, parent) ::= <<
<!
 Generates the default insert logic.
 @param table the table.
 @param parent the parent.
!>
<jdbcInsert(table=table, parent=parent)>
>>

jdbcInsert(table, parent) ::= <<
<!
 Generates the JDBC insert logic.
 !>
/**
 * Persists {@link <table.voName>} information.
<if(parent)>
 <table.allParentAndNonParentNonExternallyManagedNonReadOnlyAttributes:{ attr | <attribute_javadoc(name=attr.nameLowercased)>}; separator="\n">
<else>
 <table.allNonExternallyManagedAttributes:attribute_javadoc(
   name=it.nameLowercased); separator="\n">
<endif>

 * @throws DataAccessException if the operation fails.
 */
public void insert(
<if(parent)>
    <table.allParentAndNonParentNonExternallyManagedNonReadOnlyAttributes:{ attr | <attribute_declaration_impl(attr=attr)>}; separator=",\n">)
<else>
    <table.allNonReadOnlyButExternallyManagedAttributes:attribute_declaration(
      attr=it); separator=",\n">)
<endif>

{
    insert(
<if(parent)>
        <table.allParentAndNonParentNonExternallyManagedNonReadOnlyAttributes:{ attr | <attr.nameLowercased>}; separator=",\n">,
<else>
        <table.allNonReadOnlyButExternallyManagedAttributes:{<it.nameLowercased>}; separator=",\n">,
<endif>

        _INSERT_SQL,
        getDataSource());
}

<jdbcInsert2(table=table, parent=parent)>
>>

jdbcInsert2(table, parent) ::= <<
<!
 Generates the JDBC insert logic overloaded 2.
 !>
/**
 * Persists {@link <table.voName>} information.
<if(parent)>
 <table.allParentAndNonParentNonExternallyManagedNonReadOnlyAttributes:{ attr | <attribute_javadoc(name=attr.nameLowercased)>}; separator="\n">
<else>
 <table.allNonExternallyManagedAttributes:attribute_javadoc(
   name=it.nameLowercased); separator="\n">
<endif>

 * @param query the query to insert the values.
 * @param dataSource the {@link DataSource} instance.
 * @throws DataAccessException if the operation fails.
 */
protected void insert(
<if(parent)>
    <table.allParentAndNonParentNonExternallyManagedNonReadOnlyAttributes:{ attr | <attribute_declaration_impl(attr=attr)>}; separator=",\n">,
<else>
    <table.allNonReadOnlyButExternallyManagedAttributes:attribute_declaration(
      attr=it); separator=",\n">,
<endif>

    <notnull()>final String query,
    <notnull()>final DataSource dataSource)
{
    insert(
<if(parent)>
        <table.allParentAndNonParentNonExternallyManagedNonReadOnlyAttributes:{ attr | <attr.nameLowercased>}; separator=",\n">,
<else>
        <table.allNonReadOnlyButExternallyManagedAttributes:{<it.nameLowercased>}; separator=",\n">,
<endif>

        query,
<if(parent)>
        <repository.capitalized>DataAccessManager.getInstance(),
<endif>
        new DataSourceTransactionManager(dataSource));
}

<jdbcInsert3(table=table, parent=parent)>
>>

jdbcInsert3(table, parent) ::= <<
<!
 Generates the JDBC insert logic overloaded 3.
 !>
/**
 * Persists {@link <table.voName>} information.
<if(parent)>
 <table.allParentAndNonParentNonExternallyManagedNonReadOnlyAttributes:{ attr | <attribute_javadoc(name=attr.nameLowercased)>}; separator="\n">
<else>
 <table.allNonReadOnlyButExternallyManagedAttributes:attribute_javadoc(
   name=it.nameLowercased); separator="\n">
<endif>

 * @param query the query to insert the values.
<if(parent)>
 * @param dataAccessManager the {@link <repository.capitalized>DataAccessManager} instance.
<endif>

 * @param transactionManager the {@link PlatformTransactionManager}
 * instance.
 * @throws DataAccessException if the operation fails.
 */
protected void insert(
<if(parent)>
    <table.allParentAndNonParentNonExternallyManagedNonReadOnlyAttributes:{ attr | <attribute_declaration_impl(attr=attr)>}; separator=",\n">,
<else>
    <table.allNonReadOnlyButExternallyManagedAttributes:attribute_declaration(
      attr=it); separator=",\n">,
<endif>

    <notnull()>final String query,
<if(parent)>
    <notnull()>final <repository.capitalized>DataAccessManager dataAccessManager,
<endif>

    <notnull()>final PlatformTransactionManager transactionManager)
{
    insert(
<if(parent)>
        <table.allParentAndNonParentNonExternallyManagedNonReadOnlyAttributes:{ attr | <attr.nameLowercased>}; separator=",\n">,
<else>
        <table.allNonReadOnlyButExternallyManagedAttributes:{<it.nameLowercased>}; separator=",\n">,
<endif>

        query,
        new TransactionTemplate(transactionManager),
<if(parent)>
        dataAccessManager.get<parent.voName>DAO(),
<endif>

        getDAOListener());
}

<jdbcInsert4(table=table, parent=parent)>
>>

jdbcInsert4(table, parent) ::= <<
<!
 Generates the JDBC insert logic overloaded 4.
 !>

/**
 * Persists {@link <table.voName>} information.
<if(parent)>
 <table.allParentAndNonParentNonExternallyManagedNonReadOnlyAttributes:{ attr | <attribute_javadoc(name=attr.nameLowercased)>}; separator="\n">
<else>
 <table.allNonReadOnlyButExternallyManagedAttributes:attribute_javadoc(
   name=it.nameLowercased); separator="\n">
<endif>

 * @param query the query to insert the values.
 * @param transactionTemplate the {@link TransactionTemplate}
 * instance.
<if(parent)>
 * @param <parent.nameLowercased>DAO the {@link <parent.voName>DAO} instance.
<endif>

 * @param daoListener the {@link <repository.capitalized>DAOListener} instance.
 * @throws DataAccessException if the operation fails.
 */
@SuppressWarnings("unchecked")
protected void insert(
<if(parent)>
    <table.allParentAndNonParentNonExternallyManagedNonReadOnlyAttributes:{ attr | <attribute_declaration_impl(attr=attr)>}; separator=",\n">,
<else>
    <table.allNonReadOnlyButExternallyManagedAttributes:attribute_declaration(
      attr=it); separator=",\n">,
<endif>

    <notnull()>final String query,
    <notnull()>final TransactionTemplate transactionTemplate,
<if(parent)>
    <notnull()>final <parent.voName>DAO <parent.nameLowercased>DAO,
<endif>

    <notnull()>final <repository.capitalized>DAOListener daoListener)
{
<if(parent)>
    <parent.voName> <parent.nameLowercased> =
        <parent.nameLowercased>DAO.create(
            <parent.allParentAndNonParentNonExternallyManagedNonReadOnlyAttributes:{<it.nameLowercased>}; separator=",\n">);

<table.primaryKey:{attr |
    <attr.fieldType> <attr.nameLowercased> = <parent.nameLowercased>.get<attr.nameCapitalized>();}; separator="\n">

<else>
<if(table.allExternallyManagedAttributes)>
    Map map = null;

    <table.allExternallyManagedAttributes:em_attribute_value_retrieval(
      query=it.query,
      nativeType=it.nativeType,
      nameLowercased=it.nameLowercased,
      nameCapitalized=it.nameCapitalized,
      type=it.objectType,
      table=table); separator="\n">
<endif>
<endif>
    transactionTemplate.execute(
        new UpdateTransactionCallback(
            new <repository.capitalized>PreparedStatementCreator(
                query, daoListener),
            new <table.voName>AttributesStatementSetter(
<if(parent)>
                <table.allParentAndNonParentNonReadOnlyAttributes:{ attr | <attr.nameLowercased>}; separator=",\n">,
<else>
                <table.nonReadOnlyAttributes:{<it.nameLowercased>}; separator=",\n">,
<endif>

                false,
                true),
            this));
}

<create(table=table, parent=parent)>
>>

create(table, parent) ::= <<
<!
 Generates the JDBC create logic.
 !>
/**
 * Inserts and retrieves the newly-inserted
 * {@link <table.voName>} instance.
<if(parent)>
 <table.allParentAndNonParentNonExternallyManagedNonReadOnlyAttributes:{ attr | <attribute_javadoc(name=attr.nameLowercased)>}; separator="\n">
<else>
 <table.allNonReadOnlyButExternallyManagedAttributes:attribute_javadoc(
   name=it.nameLowercased); separator="\n">
<endif>

 * @throws DataAccessException if the operation fails.
 */
<if(table.voDecorated)>
public <table.voName>Decorator create(
<else>
public <table.voName> create(
<endif>

<if(parent)>
    <table.allParentAndNonParentNonExternallyManagedNonReadOnlyAttributes:{ attr | <attribute_declaration_impl(attr=attr)>}; separator=",\n">)
<else>
    <table.allNonReadOnlyButExternallyManagedAttributes:attribute_declaration(
      attr=it); separator=",\n">)
<endif>

{
    return
        create(
<if(parent)>
            <table.allParentAndNonParentNonExternallyManagedNonReadOnlyAttributes:{ attr | <attr.nameLowercased>}; separator=",\n">,
<else>
            <table.allNonReadOnlyButExternallyManagedAttributes:{<it.nameLowercased>}; separator=",\n">,
<endif>

            _INSERT_SQL,
            getDataSource(),
            <table.voName>ValueObjectFactory.getInstance());
}
<create2(table=table, parent=parent)>
>>

create2(table, parent) ::= <<
<!
 Generates the JDBC create logic, overloaded 2.
 !>

/**
 * Inserts and retrieves the newly-inserted
 * {@link <table.voName>} instance.
<if(parent)>
 <table.allParentAndNonParentNonExternallyManagedNonReadOnlyAttributes:{ attr | <attribute_javadoc(name=attr.nameLowercased)>}; separator="\n">
<else>
 <table.allNonReadOnlyButExternallyManagedAttributes:attribute_javadoc(
   name=it.nameLowercased); separator="\n">
<endif>

 * @param query the query required to insert given information.
 * @param dataSource the data source.
 * @param factory the {@link <table.voName>ValueObjectFactory}
 * instance.
 * @throws DataAccessException if the operation fails.
 */
<if(table.voDecorated)>
protected <table.voName>Decorator create(
<else>
protected <table.voName> create(
<endif>

<if(parent)>
    <table.allParentAndNonParentNonExternallyManagedNonReadOnlyAttributes:{ attr | <attribute_declaration_impl(attr=attr)>}; separator=",\n">,
<else>
    <table.allNonReadOnlyButExternallyManagedAttributes:attribute_declaration(
      attr=it); separator=",\n">,
<endif>

    <notnull()>final String query,
    <notnull()>final DataSource dataSource,
    <notnull()>final <table.voName>ValueObjectFactory factory)
{
    return
        create(
<if(parent)>
            <table.allParentAndNonParentNonExternallyManagedNonReadOnlyAttributes:{ attr | <attr.nameLowercased>}; separator=",\n">,
<else>
            <table.allNonReadOnlyButExternallyManagedAttributes:{<it.nameLowercased>}; separator=",\n">,
<endif>

            query,
            new DataSourceTransactionManager(dataSource),
<if(parent)>
            <repository.capitalized>DataAccessManager.getInstance(),
<endif>

            factory);
}
<create3(table=table, parent=parent)>
>>

create3(table, parent) ::= <<
<!
 Generates the JDBC create logic, overloaded 3.
 !>

/**
 * Inserts and retrieves the newly-inserted
 * {@link <table.voName>} instance.
<if(parent)>
 <table.allParentAndNonParentNonExternallyManagedNonReadOnlyAttributes:{ attr | <attribute_javadoc(name=attr.nameLowercased)>}; separator="\n">
<else>
 <table.allNonReadOnlyButExternallyManagedAttributes:attribute_javadoc(
   name=it.nameLowercased); separator="\n">
<endif>

 * @param query the query required to insert given information.
 * @param transactionManager the {@link PlatformTransactionManager}
 * instance.
<if(parent)>
 * @param dataAccessManager the {@link <repository.capitalized>DataAccessManager} instance.
<endif>

 * @param factory the {@link <table.voName>ValueObjectFactory}
 * instance.
 * @throws DataAccessException if the operation fails.
 */
<if(table.voDecorated)>
protected <table.voName>Decorator create(
<else>
protected <table.voName> create(
<endif>

<if(parent)>
    <table.allParentAndNonParentNonExternallyManagedNonReadOnlyAttributes:{ attr | <attribute_declaration_impl(attr=attr)>}; separator=",\n">,
<else>
    <table.allNonReadOnlyButExternallyManagedAttributes:attribute_declaration(
      attr=it); separator=",\n">,
<endif>

    <notnull()>final String query,
    <notnull()>final PlatformTransactionManager transactionManager,
<if(parent)>
    <notnull()>final <repository.capitalized>DataAccessManager dataAccessManager,
    <notnull()>final <table.voName>ValueObjectFactory factory)
<else>
    <notnull()>final <table.voName>ValueObjectFactory factory)
<endif>

{
    return
        create(
<if(parent)>
            <table.allParentAndNonParentNonExternallyManagedNonReadOnlyAttributes:{ attr | <attr.nameLowercased>}; separator=",\n">,
<else>
            <table.allNonReadOnlyButExternallyManagedAttributes:{<it.nameLowercased>}; separator=",\n">,
<endif>

            query,
            new TransactionTemplate(transactionManager),
            factory,
<if(parent)>
            dataAccessManager.get<parent.voName>DAO(),
<endif>

            getDAOListener());
}

<create4(table=table, parent=parent)>
>>

create4(table, parent) ::= <<
<!
 Generates the JDBC create logic, overloaded 4.
 !>
/**
 * Inserts and retrieves the newly-inserted
 * {@link <table.voName>} instance.
<if(parent)>
 <table.allParentAndNonParentNonExternallyManagedNonReadOnlyAttributes:{ attr | <attribute_javadoc(name=attr.nameLowercased)>}; separator="\n">
<else>
 <table.allNonReadOnlyButExternallyManagedAttributes:attribute_javadoc(
   name=it.nameLowercased); separator="\n">
<endif>

 * @param query the query required to insert given information.
 * @param transactionTemplate the {@link TransactionTemplate}
 * instance.
 * @param factory the {@link <table.voName>ValueObjectFactory}
 * instance.
<if(parent)>
 * @param <parent.nameLowercased>DAO the {@link <parent.voName>DAO} instance.
<endif>

 * @param daoListener the {@link <repository.capitalized>DAOListener} instance.
 * @throws DataAccessException if the operation fails.
 */
@SuppressWarnings("unchecked")
<if(table.voDecorated)>
protected <table.voName>Decorator create(
<else>
protected <table.voName> create(
<endif>

<if(parent)>
    <table.allParentAndNonParentNonExternallyManagedNonReadOnlyAttributes:{ attr | <attribute_declaration_impl(attr=attr)>}; separator=",\n">,
<else>
    <table.allNonReadOnlyButExternallyManagedAttributes:attribute_declaration(attr=it); separator=",\n">,
<endif>

    <notnull()>final String query,
    <notnull()>final TransactionTemplate transactionTemplate,
    <notnull()>final <table.voName>ValueObjectFactory factory,
<if(parent)>
    <notnull()>final <parent.voName>DAO <parent.nameLowercased>DAO,
<endif>

    <notnull()>final <repository.capitalized>DAOListener daoListener)
{
<if(table.voDecorated)>
    <table.voName>Decorator result = null;
<else>
    <table.voName> result = null;
<endif>


<if(parent)>
    <parent.voName> <parent.nameLowercased> =
        <parent.nameLowercased>DAO.create(
            <parent.allParentAndNonParentNonExternallyManagedNonReadOnlyAttributes:{<it.nameLowercased>}; separator=",\n">);

<table.primaryKey:{attr |
    <attr.fieldType> <attr.nameLowercased> = <parent.nameLowercased>.get<attr.nameCapitalized>();}; separator="\n">

<else>
<if(table.allExternallyManagedAttributes)>
    Map map = null;

    <table.allExternallyManagedAttributes:em_attribute_value_retrieval(
      query=it.query,
      nativeType=it.nativeType,
      nameLowercased=it.nameLowercased,
      nameCapitalized=it.nameCapitalized,
      type=it.objectType,
      table=table); separator="\n">
<endif>
<endif>


    transactionTemplate.execute(
        new UpdateTransactionCallback(
            new <repository.capitalized>PreparedStatementCreator(
                query, daoListener),
            new <table.voName>AttributesStatementSetter(
<if(parent)>
                <table.allParentAndNonParentNonReadOnlyAttributes:{<it.nameLowercased>}; separator=",\n">,
<else>
                <table.nonReadOnlyAttributes:{<it.nameLowercased>}; separator=",\n">,
<endif>

                false,
                true),
            this));

    result =
<if(table.allParentAndNonParentReadOnlyAttributes)>
        findByPrimaryKey(
            <table.primaryKey:{<it.nameLowercased>}; separator=",\n">);
<else>
        factory.create(
            <table.allParentAndNonParentAttributes:{<it.nameLowercased>}; separator=",\n">);
<endif>


    return result;
}
>>

oracleInsert() ::= <<
<!
  Generates the insert logic for Oracle.
!>
<oracle8Insert()>
>>

oracle8Insert() ::= <<
<!
  Generates the insert logic for Oracle8.
!>
/**
 * Persists {@link <table.voName>} information.
<if(parent)>
 <table.allParentAndNonParentNonExternallyManagedNonReadOnlyAttributes:{ attr | <attribute_javadoc(name=attr.nameLowercased)>}; separator="\n">
<else>
 <table.allNonReadOnlyButExternallyManagedAttributes:attribute_javadoc(
   name=it.nameLowercased); separator="\n">
<endif>
 * @throws DataAccessException if the operation fails.
 */
public void insert(
<if(parent)>
    <table.allParentAndNonParentNonExternallyManagedNonReadOnlyAttributes:{ attr | <attribute_declaration_impl(attr=attr)>}; separator=",\n">)
<else>
    <table.allNonReadOnlyButExternallyManagedAttributes:attribute_declaration(
      attr=it); separator=",\n">)
<endif>

{
    create(
<if(parent)>
        <table.allParentAndNonParentNonExternallyManagedNonReadOnlyAttributes:{ attr | <attr.nameLowercased>}; separator=",\n">);
<else>
        <table.attributes:{ attr | <if(!attr.managedExternally)><attr.nameLowercased><endif>}; separator=",\n">);
<endif>

}

/**
 * Persists {@link <table.voName>} information.
<if(parent)>
 <table.allParentAndNonParentNonExternallyManagedNonReadOnlyAttributes:{ attr | <attribute_javadoc(name=attr.nameLowercased)>}; separator="\n">
<else>
 <table.allNonReadOnlyButExternallyManagedAttributes:attribute_javadoc(
   name=it.nameLowercased); separator="\n">
<endif>

 * @return the newly-inserted entity.
 * @throws DataAccessException if the operation fails.
 */
<if(table.voDecorated)>
public <table.voName>Decorator create(
<else>
public <table.voName> create(
<endif>

<if(parent)>
    <table.allParentAndNonParentNonExternallyManagedNonReadOnlyAttributes:{ attr | <attribute_declaration_impl(attr=attr)>}; separator=",\n">)
<else>
    <table.allNonReadOnlyButExternallyManagedAttributes:attribute_declaration(
      attr=it); separator=",\n">)
<endif>

{
    return
        create(
<if(parent)>
            <table.allParentAndNonParentNonExternallyManagedNonReadOnlyAttributes:{ attr | <attr.nameLowercased>}; separator=",\n">,
<else>
            <table.nonReadOnlyAttributes:{ attr | <if(!attr.managedExternally)><attr.nameLowercased><endif>}; separator=",\n">,
<endif>

            getDataSource());
}

/**
 * Persists {@link <table.voName>} information.
<if(parent)>
 <table.allParentAndNonParentNonExternallyManagedNonReadOnlyAttributes:{ attr | <attribute_javadoc(name=attr.nameLowercased)>}; separator="\n">
<else>
 <table.allNonReadOnlyButExternallyManagedAttributes:attribute_javadoc(
   name=it.nameLowercased); separator="\n">
<endif>

 * @param dataSource the {@link DataSource data source}.
 * @return the newly-inserted entity.
 * @throws DataAccessException if the operation fails.
 */
<if(table.voDecorated)>
protected <table.voName>Decorator create(
<else>
protected <table.voName> create(
<endif>

<if(parent)>
    <table.allParentAndNonParentNonExternallyManagedNonReadOnlyAttributes:{ attr | <attribute_declaration_impl(attr=attr)>}; separator=",\n">,
<else>
    <table.allNonReadOnlyButExternallyManagedAttributes:attribute_declaration(
      attr=it); separator=",\n">,
<endif>

    <notnull()>final DataSource dataSource)
{
    return
        create(
<if(parent)>
            <table.allParentAndNonParentNonExternallyManagedNonReadOnlyAttributes:{ attr | <attr.nameLowercased>}; separator=",\n">,
<else>
            <table.nonReadOnlyAttributes:{ attr | <if(!attr.managedExternally)><attr.nameLowercased><endif>}; separator=",\n">,
<endif>

            new DataSourceTransactionManager(dataSource));
}

/**
 * Persists {@link <table.voName>} information.
<if(parent)>
 <table.allParentAndNonParentNonExternallyManagedNonReadOnlyAttributes:{ attr | <attribute_javadoc(name=attr.nameLowercased)>}; separator="\n">
<else>
 <table.allNonReadOnlyButExternallyManagedAttributes:attribute_javadoc(
   name=it.nameLowercased); separator="\n">
<endif>

 * @param transactionManager the {@link PlatformTransactionManager}
 * instance.
 * @return the newly-inserted entity.
 * @throws DataAccessException if the operation fails.
 */
<if(table.voDecorated)>
protected <table.voName>Decorator create(
<else>
protected <table.voName> create(
<endif>

<if(parent)>
    <table.allParentAndNonParentNonExternallyManagedNonReadOnlyAttributes:{ attr | <attribute_declaration_impl(attr=attr)>}; separator=",\n">,
<else>
    <table.allNonReadOnlyButExternallyManagedAttributes:attribute_declaration(
      attr=it); separator=",\n">,
<endif>

    <notnull()>final PlatformTransactionManager transactionManager)
{
<if(table.voDecorated)>
    <table.voName>Decorator result =
<else>
    <table.voName> result =
<endif>

        create(
<if(parent)>
            <table.allParentAndNonParentNonExternallyManagedNonReadOnlyAttributes:{ attr | <attr.nameLowercased>}; separator=",\n">,
<else>
            <table.nonReadOnlyAttributes:{ attr | <if(!attr.managedExternally)><attr.nameLowercased><endif>}; separator=",\n">,
<endif>

            new TransactionTemplate(transactionManager),
            getDAOListener());

    return result;
}

/**
 * Persists {@link <table.voName>} information.
<if(parent)>
 <table.allParentAndNonParentNonExternallyManagedNonReadOnlyAttributes:{ attr | <attribute_javadoc(name=attr.nameLowercased)>}; separator="\n">
<else>
 <table.allNonReadOnlyButExternallyManagedAttributes:attribute_javadoc(
   name=it.nameLowercased); separator="\n">
<endif>

 * @param transactionTemplate the {@link TransactionTemplate} instance.
 * @param daoListener the {@link <repository.capitalized>DAOListener} instance.
 * @return the newly-inserted entity.
 * @throws DataAccessException if the operation fails.
 */
<if(table.voDecorated)>
protected <table.voName>Decorator create(
<else>
protected <table.voName> create(
<endif>

<if(parent)>
    <table.allParentAndNonParentNonExternallyManagedNonReadOnlyAttributes:{ attr | <attribute_declaration_impl(attr=attr)>}; separator=",\n">,
<else>
    <table.allNonReadOnlyButExternallyManagedAttributes:attribute_declaration(
      attr=it); separator=",\n">,
<endif>

    final TransactionTemplate transactionTemplate,
    final <repository.capitalized>DAOListener daoListener)
{
<if(table.voDecorated)>
    <table.voName>Decorator result = null;
<else>
    <table.voName> result = null;
<endif>

<if(table.allExternallyManagedAttributes)>
    Map map = null;

    <table.allExternallyManagedAttributes:em_attribute_value_retrieval(
      query=it.query,
      nativeType=it.nativeType,
      nameLowercased=it.nameLowercased,
      nameCapitalized=it.nameCapitalized,
      type=it.objectType,
      table=table); separator="\n">

<endif>
    transactionTemplate.execute(
        new UpdateTransactionCallback(
            new <repository.capitalized>PreparedStatementCreator(
                "insert into <table.nameUppercased>" +
                " (" +
<if(parent)>
                <table.allParentAndNonParentNonExternallyManagedNonReadOnlyAttributes:{"<it.nameUppercased>};
                  separator=", \" +\n"> " +
<else>
                <table.nonReadOnlyAttributes:{"<it.nameUppercased>};
                  separator=", \" +\n">" +
<endif>

                ") VALUES (" +
<if(parent)>
                <table.allParentAndNonParentNonReadOnlyAttributes:insert_attribute(attr=it);
                  separator=", \" +\n">",
<else>
                <table.nonReadOnlyAttributes:insert_attribute(attr=it);
                  separator=",\" +\n">)",
<endif>

                daoListener),
            new <table.voName>AttributesStatementSetter(
<if(parent)>
                <table.allParentAndNonParentNonReadOnlyAttributes:{<it.nameLowercased>};
                  separator=",\n">,
<else>
                <table.nonReadOnlyAttributes:{<it.nameLowercased>};
                  separator=",\n">,
<endif>
                false,
                true,
                true),
            this));

    String sql =
        "SELECT " +
<if(parent)>
        <table.allParentAndNonParentAttributes:{"<it.nameUppercased>};
          separator=", \" +\n">" +
<else>
        <table.nonReadOnlyAttributes:{"<it.nameUppercased>};
          separator=", \" +\n">" +
<endif>

        " FROM <table.nameUppercased>" +
        " WHERE " +
        <table.primaryKey:{"<it.nameUppercased> = ?};
          separator=" AND \" +\n">" +
        " FOR UPDATE";

    SelectForUpdateTransactionCallback t_Callback =
        new SelectForUpdateTransactionCallback(
            sql,
            new <repository.capitalized>PreparedStatementCreator(
                daoListener),
            new <table.voName>PkStatementSetter(
                <table.primaryKey:{<it.nameLowercased>};
                  separator=",\n">),
            new <table.voName>ResultSetExtractor(
                <table.lobAttributes:{<it.nameLowercased>};
                  separator=",\n">,
                true,
                sql,
                daoListener),
            this);

<if(table.voDecorated)>
    result = (<table.voName>Decorator) transactionTemplate.execute(t_Callback);
<else>
    result = (<table.voName>) transactionTemplate.execute(t_Callback);
<endif>

    //result = t_Callback.getResult();

    return result;
}
>>

insert_attribute(attr) ::= <<
<!
 Generates the insert part corresponding to given attribute.
 @param attr the attribute.
!>
<if(attr.clob)>
"EMPTY_CLOB()
<else>
"?
<endif>
>>

delete_by_fk_sql(foreignKey) ::= <<
<!
 Generates the constant with the SQL to delete by given fk.
 @param foreignKey the foreign key.
!>
 /**
  * The SQL to delete by <foreignKey.fkName>.
  */
public static final String DELETE_BY_<foreignKey.nameUppercased>_SQL =
    "DELETE FROM <table.nameUppercased> "
    + "WHERE "
<foreignKey.attributes:{attr|
    + "<attr.nameUppercased> = ? "}; separator="\n    + \" AND \"">;
>>

find_by_pk_sql_join(table, parent) ::= <<
<!
 Generates the part of the where clause in find-by-pk-sql.
 @param table the ForeignKey of the child, pointing to its parent.
 @param parentPrimaryKey the parent's primary key.
!>
<find_by_pk_sql_join_fk(parentForeignKey=table.parentForeignKey, parentPrimaryKey=parent.primaryKey)>
>>

find_by_pk_sql_join_fk(parentForeignKey, parentPrimaryKey) ::= <<
<!
 Generates the part of the where clause in find-by-pk-sql.
 @param parentForeignKey the ForeignKey of the child, pointing to its parent.
 @param parentPrimaryKey the parent's primary key.
!>
<parentForeignKey.attributes,parentPrimaryKey:{ pk, parentPk |
+   " AND <pk.tableNameUppercased>.<pk.nameUppercased> = <parentPk.tableNameUppercased>.<parentPk.nameUppercased> "}; separator="\n">
>>

attribute_resultset_extractor_class(
  table,
  trNameCapitalized,
  nameCapitalized,
  getterMethod,
  objectType,
  isPrimitive) ::= <<
<!
 Generates an inner resultset-extractor class for given attribute.
 @param table the table.
 @param trNameCapitalized the table repository name, capitalized.
 @param nameCapitalized the attribute name, capitalized.
 @param getterMethod the getter method for given attribute.
 @param objectType its object type.
 @param isPrimitive whether it's primitive.
!>
/**
 * <[
      first_line_description(
        className=dao_implementation_class_name,
        engineName=engine_name),
      second_line_description(
        className=dao_implementation_class_name,
        engineName=engine_name)
    ]:{ line |<line>}; separator="\n * ">
<class_common_javadoc()>
 * Extracts \<i><table.voName>\</i> value objects from result sets.
 */
public static class <nameCapitalized><table.voName>ResultSetExtractor
    extends  <trNameCapitalized>ResultSetExtractor
{
    private String fieldName;

    /**
     * Constructs a new {@link <nameCapitalized><table.voName>ResultSetExtractor}.
     * @param fieldName the field name.
     * @param sql the original SQL.
     * @param daoListener the dao listener.
     */
    public <nameCapitalized><table.voName>ResultSetExtractor(
        <notnull()>final String fieldName,
        <notnull()>final String sql,
        <notnull()>final <trNameCapitalized>DAOListener daoListener)
    {
        super(sql, daoListener);
        immutableSetFieldName(fieldName);
    }

    /**
     * Specifies the field name.
     * @param fieldName the field name.
     */
    protected final void immutableSetFieldName(<notnull()>final String fieldName)
    {
        this.fieldName = fieldName;
    }

    /**
     * Specifies the field name.
     * @param fieldName the field name.
     */
    @SuppressWarnings("unused")
    protected void setFieldName(<notnull()>final String fieldName)
    {
        immutableSetFieldName(fieldName);
    }

    /**
     * Retrieves the field name.
     * @return such information.
     */
    <notnull()>
    public String getFieldName()
    {
        return m__strFieldName;
    }

    // \<extract data>
    /**
     * Extracts \<i><table.voName>\</i> information from given result set.
     * @param resultSet the result set.
     * @param sql the SQL used.
     * @param daoListener the {@link <repository.capitalized>DAOListener} instance.
     * @return the {@link <table.voName>} or \<code>null\</code>
     * if the operation returned no data.
     * @throws SQLException intercepted by \<i>Spring\</i>.
     * @throws DataAccessException with information about any
     * custom exception.
     */
    @Override
    <notnull()>
    protected Object extractData(
        <notnull()>final ResultSet resultSet,
        <notnull()>final String sql,
        <notnull()>final <trNameCapitalized>DAOListener daoListener)
    throws  SQLException,
            DataAccessException
    {
        return
            extractData(
                resultSet,
                getFieldName(),
                getSql(),
                daoListener);
    }

    /**
     * Extracts \<i><table.voName>\</i> information from given result set.
     * @param resultSet the result set.
     * @param fieldName the field name.
     * @param sql the SQL used.
     * @param daoListener the {@link <trNameCapitalized>DAOListener} instance.
     * @return the {@link <table.voName>} or \<code>null\</code>
     * if the operation returned no data.
     * @throws SQLException intercepted by \<i>Spring\</i>.
     * @throws DataAccessException with information about any
     * custom exception.
     */
    @SuppressWarnings("unchecked")
    <notnull()>
    protected Object extractData(
        <notnull()>final ResultSet resultSet,
        <notnull()>final String fieldName,
        <notnull()>final String sql,
        <notnull()>final <trNameCapitalized>DAOListener daoListener)
    throws  SQLException,
            DataAccessException
    {
        <notnull()>final Map result = new HashMap();

        int t_iRowCount = 0;

        if  (resultSet.next())
        {
            t_iRowCount++;

            daoListener.resultSetMovedForward(sql, t_iRowCount);

            int index = 1;

            <resultset_extractor_parameter_retrieval(
              getterMethod=getterMethod,
              objectType=objectType,
              isPrimitive=isPrimitive)>
        }

        daoListener.resultSetClosed(sql, t_iRowCount);

        return result;
    }
    // \</extract data>
}
>>
