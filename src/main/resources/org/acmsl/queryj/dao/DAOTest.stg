//;-*- mode: antlr -*-
//
//                      QueryJ
//
//  Copyright (C) 2002-2007  ACM-SL
//                           chous@acm-sl.org
//
//  This library is free software; you can redistribute it and/or
//  modify it under the terms of the GNU General Public
//  License as published by the Free Software Foundation; either
//  version 2 of the License, or any later version.
//
//  This library is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
//  General Public License for more details.
//
//  You should have received a copy of the GNU General Public
//  License along with this library; if not, write to the Free Software
//  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
//
//  Thanks to ACM S.L. for distributing this library under the GPL license.
//  Contact info: jose.sanleandro@acm-sl.com
//  Postal Address: c/Playa de Lagoa, 1
//                  Urb. Valdecabanas
//                  Boadilla del monte
//                  28660 Madrid
//                  Spain
//
//***************************************************************************
//
// Filename: DAOTest.stg
//
// Author: Jose San Leandro Armendariz
//
// Description: Defines the rules to generate DAO tests.
//
// Version: $Revision: 1905 $ ($Author: chous $ at $Date: 2007-08-02 11:20:27 +0200 (Thu, 02 Aug 2007) $)
//
// $Id: DAOListener.stg 1905 2007-08-02 09:20:27Z chous $
//
group DAOTest;

source(input) ::= <<
<!
  Generates a DAO test source file.
  @param input.copyright_years the copyright's years.
  @param input.package the package.
  @param input.dao_class_name the DAO class name.
  @param input.dao_factory_class_name the DAO factory class name.
  @param input.dao_implementation_class_name the DAO implementation class name.
  @params project_imports
  @params class
!>
<if(input.header)>
<input.header>
<else>
<java_header(
  years=input.copyright_years,
  description=
  [
    first_line_description(tableName=input.table_name),
    second_line_description(tableName=input.table_name)
  ],
  timestamp=input.timestamp)>
<endif>
// Generated by $Id: DAOListener.stg 1905 2007-08-02 09:20:27Z chous $

<package_declaration(
  packageNames=
  [
    input.base_package_name,
    typeInitMap.baseDAOSubpackageName
  ])>

<project_imports(
  basePackageName=input.base_package_name,
  baseDAOSubpackageName=typeInitMap.baseDAOSubpackageName,
  rdbSubpackageName=typeInitMap.rdbSubpackageName,
  subpackageName=input.subpackage_name,
  engineName=input.engine_name,
  voName=input.vo_name,
  trName=input.tr_name_capitalized,
  voSubpackageName=typeInitMap.voSubpackageName)>

/*
 * Importing some ACM-SL classes.
 */
import org.acmsl.queryj.dao.MockDataSource;

/*
 * Importing some JDK classes.
 */
import java.math.BigDecimal;
import java.util.Calendar;
import java.util.Date;
import java.util.Iterator;
import javax.sql.DataSource;

/*
 * Importing some JUnit classes.
 */
import junit.framework.Test;
import junit.framework.TestCase;
import junit.framework.TestSuite;

<class(input=input)>
>>

first_line_description(table) ::= <<
<!
  Generates the first line of the generated file description.
  @param table the table name.
!>
Executes JUnit tests to ensure <table>DAO works as
>>

second_line_description(table) ::= <<
<!
  Generates the second line of the generated file description.
  @param table the table name.
!>
expected and connections are correctly managed.
>>

project_imports(
  basePackageName,
  baseDAOSubpackageName,
  rdbSubpackageName,
  subpackageName,
  engineName,
  voName,
  trName,
  voSubpackageName) ::= <<
<!
  Generates the project imports
  @param basePackageName the base package name.
  @param baseDAOSubpackageName the subpackage name.
  @param rdbSubpackageName the subpackage for the relational-specific DAO stuff.
  @param subpackageName the subpackage name.
  @param engineName the engine name.
  @param voName the class name of the value-object.
  @param trName the name of the table repository.
  @param voSubpackageName the value-object subpackage name.
!>
/*
 * Importing project-specific classes.
 */
import <basePackageName>.<baseDAOSubpackageName>.<voName>DAO;
import <basePackageName>.<baseDAOSubpackageName>.<voName>DAOFactory;
import <basePackageName>.<baseDAOSubpackageName>.<rdbSubpackageName>.<subpackageName>.<engineName><voName>DAO;
<if(table.voDecorated)>
import <basePackageName>.<voSubpackageName>.<voName>Decorator;
<else>
import <basePackageName>.<voSubpackageName>.<voName>;
<endif>

>>

class(input) ::= <<
<!
 Generates the class body.
 @param input the input.
!>
<classImpl(input=input, table=input.table)>
>>

classImpl(input, table) ::= <<
<!
 Generates the class body.
 @param input the input.
 @param table the table.
!>
/**
 * <[
      first_line_description(repository=input.tr_name)
    ]:{line |<line>}; separator="\n * ">
 * @author \<a href="http://www.acm-sl.org/queryj"\>QueryJ\</a\>
 * @version <"$">Revision: $ (<"$">Author: $ at <"$">Date: $)
 * @since <input.timestamp>
 */
public class <input.tr_name_capitalized>DAOTest
    extends  TestSuite
{
    /**
     * Driver class name.
     */
    public static final String DRIVER_CLASS_NAME =
        "<input.jdbc_driver>";

    /**
     * The database connection's URL.
     */
    public static final String URL_CONNECTION =
        "<input.jdbc_url";

    /**
     * The database connection's username.
     */
    public static final String USER_NAME =
        "<input.jdbc_user>";

    /**
     * The database connection's password.
     */
    public static final String PASSWORD =
        "<input.jdbc_password>";

    /**
     * The mock data source.
     */
    private static MockDataSource m__DataSource;

    /**
<if(table.voDecorated)>
     * <table.voName>Decorator information used just for testing.
<else>
     * <table.voName> information used just for testing.
<endif>

     */
<if(table.voDecorated)>
    private static <table.voName>Decorator m__ValueObject;
<else>
    private static <table.voName> m__ValueObject;
<endif>


    /**
     * The tested instance.
     */
    private static <input.engine_name><table.voName>DAO m__TestedInstance;

    /**
     * A test calendar.
     */
    public static final Calendar CALENDAR_VALUE =
        Calendar.getInstance();

    /**
     * A test date.
     */
    public static final Date DATE_VALUE =
        CALENDAR_VALUE.getTime();

    /**
     * A test integer.
     */
    public static final int INT_VALUE =
        (int) Math.round(Math.random() * 1000000.0);

    /**
     * A test long.
     */
    public static final long LONG_VALUE =
        Math.round(Math.random() * (double) INT_VALUE);

    /**
     * A test double.
     */
    public static final double DOUBLE_VALUE =
        Math.random() * (double) LONG_VALUE;

    /**
     * A test big decimal.
     */
    public static final BigDecimal BIGDECIMAL_VALUE =
        new BigDecimal(Math.random() * DOUBLE_VALUE);

    /**
     * A test object.
     */
    public static final Object OBJECT_VALUE =
        "Test object-" + DOUBLE_VALUE;

    /**
     * A test text.
     */
    public static final String STRING_VALUE =
        "testing-" + DOUBLE_VALUE;

    /**
     * A test text for updates.
     */
    public static final String UPDATED_STRING_VALUE = "updated " + STRING_VALUE;

    /**
     * A test calendar for updates.
     */
    public static final Calendar UPDATED_CALENDAR_VALUE =
        Calendar.getInstance();

    /**
     * A test date for updates.
     */
    public static final Date UPDATED_DATE_VALUE =
        UPDATED_CALENDAR_VALUE.getTime();

    /**
     * A test integer for updates.
     */
    public static final int UPDATED_INT_VALUE = INT_VALUE + 1;

    /**
     * A test long for updates.
     */
    public static final long UPDATED_LONG_VALUE = LONG_VALUE + 1;

    /**
     * A test double for updates.
     */
    public static final double UPDATED_DOUBLE_VALUE = DOUBLE_VALUE + 1;

    /**
     * A test big decimal for updates.
     */
    public static final BigDecimal UPDATED_BIGDECIMAL_VALUE =
        BIGDECIMAL_VALUE.add(new BigDecimal(Math.random() * DOUBLE_VALUE));

    /**
     * A test object for updates.
     */
    public static final Object UPDATED_OBJECT_VALUE =
        "Updated test object";

    /**
     * Constructs a <input.engine_name><table.voName>DAOTest with given name.
     * @param name the test name.
     */
     public <input.engine_name><table.voName>DAOTest(final String name)
     {
         super(name);
     }

     /**
      * Specifies the data source.
      * @param dataSource the data source to use.
      */
     private static void setDataSource(final MockDataSource dataSource)
     {
         m__DataSource = dataSource;
     }

     /**
      * Retrieves the data source.
      * @return such data source.
      */
     public static MockDataSource getDataSource()
     {
         return m__DataSource;
     }

     /**
      * Specifies the DAO to test.
      * @param dao the DAO to test.
      */
     private static void setTestedInstance(final <input.engine_name><table.voName>DAO dao)
     {
         m__TestedInstance = dao;
     }

     /**
      * Retrieves the DAO under test.
      * @return such DAO.
      */
     public static <input.engine_name><table.voName>DAO getTestedInstance()
     {
         return m__TestedInstance;
     }

     /**
      * Specifies the <table.voName> information used for testing.
      * @param vo such information.
      */
<if(table.voDecorated)>
     private static void set<table.voName>(final <table.voName>Decorator vo)
<else>
     private static void set<table.voName>(final <table.voName> vo)
<endif>

     {
         m__ValueObject = vo;
     }

     /**
<if(table.voDecorated)>
      * Retrieves the <table.voName>Decorator information used for testing.
<else>
      * Retrieves the <table.voName> information used for testing.
<endif>

      * @return such information.
      */
<if(table.voDecorated)>
     public static <table.voName>Decorator get<table.voName>()
<else>
     public static <table.voName> get<table.voName>()
<endif>
     {
         return m__ValueObject;
     }

     /**
      * Sets up the mock objects.
      */
     protected static void init()
     {
         setDataSource(
             new MockDataSource(
                 DRIVER_CLASS_NAME,
                 URL_CONNECTION,
                 USER_NAME,
                 PASSWORD));

         setTestedInstance(
             new <input.engine_name><table.voName>DAO(getDataSource()) {} );
     }

     /**
      * Executes the tests.
      * @return the ordered global test.
      */
     public static Test suite()
     {
         TestSuite result = new TestSuite("<input.engine_name><table.voName>DAOTest - test suite");

         init();

         result.addTest(new ConstructorTest("testConstructor"));

         result.addTestSuite(ConnectionTest.class);

         result.addTest(new Insert<table.voName>Test("testInsert"));

         result.addTestSuite(ConnectionTest.class);

         result.addTest(new FindByPrimaryKey<table.voName>Test("testFindByPrimaryKey"));

         result.addTestSuite(ConnectionTest.class);

         result.addTest(new Update<table.voName>Test("testUpdate"));

         result.addTestSuite(ConnectionTest.class);

         result.addTest(new Delete<table.voName>Test("testDelete"));

         result.addTestSuite(ConnectionTest.class);

         return result;
     }

     /**
      * Tests <input.engine_name><table.voName>DAO constructor.
      * @author <a href=\"http://www.acm-sl.org/queryj\">QueryJ</a>
      */
     public static class ConstructorTest
         extends  TestCase
     {
         /**
          * Constructs a ConstructorTest with given name.
          * @param name the test name.
          */
         public ConstructorTest(final String name)
         {
             super(name);
         }

         /**
          * Tests the constructor.
          */
         public void testConstructor()
         {
             <input.engine_name><table.voName>DAO t_TestedInstance =
                 getTestedInstance();

             assertTrue(t_TestedInstance != null);

             DataSource t_DataSource = t_TestedInstance.getDataSource();
             assertNotNull(t_DataSource);

             assertTrue(t_DataSource == getDataSource());
             assertTrue(t_DataSource.equals(getDataSource()));
         }
     }

     /**
      * Tests whether the connection is managed correctly.
      * @author <a href=\"http://www.acm-sl.org/queryj\">QueryJ</a>
      */
     public static class ConnectionTest
         extends  TestCase
     {
         /**
          * Constructs a ConnectionTest with given name.
          * @param name the test name.
          */
         public ConnectionTest(final String name)
         {
             super(name);
         }

         /**
          * Tests if the <code>close()</code> method is invoked for each opened
          * connection.
          */
         public void testConnectionClosed()
         {
             assertTrue(
                    getDataSource().getOpenedConnections()
                 == getDataSource().getCloseMethodCalls());
         }

         /**
          * Tests if there's been any rollback.
          */
         public void testNoRollbacks()
         {
             assertTrue(
                getDataSource().getRollbackMethodCalls() == 0);
         }

         /**
          * Tests if there's been any exception.
          */
         public void testNoExceptions()
         {
             Iterator t_ExceptionIterator = getDataSource().exceptionIterator();

             assertTrue(
                 (   (t_ExceptionIterator == null)
                  || (!t_ExceptionIterator.hasNext())));
         }
     }

     /**
      * Tests <input.engine_name><table.voName>DAO.insert() method.
      * @author <a href=\"http://www.acm-sl.org/queryj\">QueryJ</a>
      */
     public static class Insert<table.voName>Test
         extends  TestCase
     {
         /**
          * Constructs a Insert<table.voName>Test with given name.
          * @param name the test name.
          */
         public Insert<table.voName>Test(final String name)
         {
             super(name);
         }

         /**
          * Tests the insert method.
          */
         public void testInsert()
         {
             <input.engine_name><table.voName>DAO t_TestedInstance =
                 getTestedInstance();

             assertNotNull(t_TestedInstance);

<if(table.voDecorated)>
             <table.voName>Decorator t_ValueObject =
<else>
             <table.voName> t_ValueObject =
<endif>

                 t_TestedInstance
                     .create(
<if(parent)>
                         <table.allParentAndNonParentNonManagedExternallyNonReadOnlyAttributes:{ attr | <if(attr.nullable)>new <attr.type>(<attr.typeUppercased>_VALUE)<else><attr.typeUppercased>_VALUE<endif>}; separator=",\n">);
<else>
                         <input.all_non_readonly_but_externally_managed_attributes:{<if(attr.nullable)>new <attr.type>(<attr.typeUppercased>_VALUE)<else><attr.typeUppercased>_VALUE<endif>}; separator=",\n">);
<endif>


             assertNotNull(t_ValueObject);
             set<table.voName>(t_ValueObject);
         }
     }

     /**
      * Tests <input.engine_name><table.voName>DAO.findByPrimaryKey()} method.
      * @author <a href=\"http://www.acm-sl.org/queryj\">QueryJ</a>
      */
     public static class FindByPrimaryKey<table.voName>Test
         extends  TestCase
     {
         /**
          * Constructs a FindByPrimaryKey<table.voName>Test with given name.
          * @param name the test name.
          */
         public FindByPrimaryKey<table.voName>Test(String name)
         {
             super(name);
         }

         /**
          * Tests the findByPrimaryKey() method.
          */
         public void testFindByPrimaryKey()
         {
             <input.engine_name><table.voName>DAO t_TestedInstance =
                 getTestedInstance();

             assertNotNull(t_TestedInstance);

<if(table.voDecorated)>
             <table.voName>Decorator t_PreviousValueObject = get<table.voName>();

             <table.voName>Decorator t_ValueObject =
<else>
             <table.voName> t_PreviousValueObject = get<table.voName>();

             <table.voName> t_ValueObject =
<endif>

                 t_TestedInstance
                     .findByPrimaryKey(
                         <table.primaryKey:{ attr | t_PreviousValueObject.get<attr.nameCapitalized()> }; separator=",\n");

             assertNotNull(t_ValueObject);

             assertEquals(t_ValueObject, t_PreviousValueObject);
         }
     };
     
     /**
      * Tests <input.engine_name>a<table.voName>DAO.update() method.
      * @author <a href=\"http://www.acm-sl.org/queryj\">QueryJ</a>
      */
     public static class Update<table.voName>Test
         extends  TestCase
     {
         /**
          * Constructs a Update<table.voName>Test with given name.
          * @param name the test name.
          */
         public Update<table.voName>Test(final String name)
         {
             super(name);
         }

         /**
          * Tests the update method.
          */
         public void testUpdate()
         {
             <input.engine_name><table.voName>DAO t_TestedInstance =
                 getTestedInstance();

             assertNotNull(t_TestedInstance);

<if(table.voDecorated)>
             <table.voName>Decorator t_ValueObject = get<table.voName>();
<else>
             <table.voName> t_ValueObject = get<table.voName>();
<endif>

             assertNotNull(t_ValueObject);

             t_TestedInstance.update(
                 <table.primaryKey:{ attr | t_ValueObject.get<attr.nameCapitalized>); separator=",\n">,
                 <table.nonPrimaryKeyAttributes:{ attr | UPDATED_<attr.typeUppercased>_VALUE); separator=",\n">);
         }
     }

     /**
      * Tests <input.engine_name><table.voName>DAO.delete() method.
      * @author <a href=\"http://www.acm-sl.org/queryj\">QueryJ</a>
      */
     public static class Delete<table.voName>Test
         extends  TestCase
     {
         /**
          * Constructs a Delete<table.voName>Test with given name.
          * @param name the test name.
          */
         public Delete<table.voName>Test(final String name)
         {
             super(name);
         }

         /**
          * Tests the delete method.
          */
         public void testDelete()
         {
             try
             {
                 <input.engine_name><table.voName>DAO t_TestedInstance =
                     getTestedInstance();

                 assertNotNull(t_TestedInstance);

<if(table.voDecorated)>
                 <table.voName>Decorator t_ValueObject = get<table.voName>();
<else>
                 <table.voName> t_ValueObject = get<table.voName>();
<endif>


                 assertNotNull(t_ValueObject);

                 t_TestedInstance.delete(
                     <table.primaryKey:{ attr | t_ValueObject.<attr.getNameCapitalized>() }; separator="\n">);
             }
             catch  (final Throwable throwable)
             {
                 fail(throwable.getMessage());
             }
         }
     }
}
>>
