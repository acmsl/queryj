//;-*- mode: antlr -*-
//
//                      QueryJ
//
//  Copyright (C) 2002-2007  ACM-SL
//                           chous@acm-sl.org
//
//  This library is free software; you can redistribute it and/or
//  modify it under the terms of the GNU General Public
//  License as published by the Free Software Foundation; either
//  version 2 of the License, or any later version.
//
//  This library is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
//  General Public License for more details.
//
//  You should have received a copy of the GNU General Public
//  License along with this library; if not, write to the Free Software
//  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
//
//  Thanks to ACM S.L. for distributing this library under the GPL license.
//  Contact info: jose.sanleandro@acm-sl.com
//  Postal Address: c/Playa de Lagoa, 1
//                  Urb. Valdecabanas
//                  Boadilla del monte
//                  28660 Madrid
//                  Spain
//
//***************************************************************************
//
// Filename: DAOListenerImpl.stg
//
// Author: Jose San Leandro Armendariz
//
// Description: Defines the rules to generate DAO listener implementations.
//
// Version: $Revision: 1762 $ ($Author: chous $ at $Date: 2007-04-10 10:34:49 +0200 (Tue, 10 Apr 2007) $)
//
// $Id: RepositoryDAO.stg 1762 2007-04-10 08:34:49Z chous $
//
group DAOListenerImpl;

source(input) ::= <<
<!
  Generates a DAO Listener implementation source file.
  @param input.copyright_years the copyright's years.
  @param input.package the package.
  @param input.dao_class_name the DAO class name.
  @param input.dao_factory_class_name the DAO factory class name.
  @param input.dao_implementation_class_name the DAO implementation class name.
  @params project_imports
  @params class
!>
<if(input.header)>
<input.header>
<else>
<java_header(
  years=input.copyright_years,
  description=
  [
    first_line_description(repository=input.tr_name)
  ],
  timestamp=input.timestamp)>
<endif>
// Generated by $Id: DAOListenerImpl.stg 1762 2007-04-10 08:34:49Z chous $

<package_declaration(
  packageNames=
  [
    input.base_package_name,
    typeInitMap.baseDAOSubpackageName,
    typeInitMap.rdbSubpackageName
  ])>

/*
 * Importing Spring classes.
 */
import org.springframework.jdbc.core.ConnectionCallback;
import org.springframework.jdbc.core.PreparedStatementCallback;
import org.springframework.jdbc.core.PreparedStatementCreator;
import org.springframework.jdbc.core.StatementCallback;

<class(input=input)>
>>

first_line_description(repository) ::= <<
<!
  Generates the first line of the generated file description.
  @param repository the repository.
!>
Default implementation to monitor SQL operations.
>>

class(input) ::= <<
<!
 Generates the class body.
 @param input the input.
!>
/**
 * <[
      first_line_description(repository=input.tr_name)
    ]:{line |<line>}; separator="\n * ">
 * @author \<a href="http://www.acm-sl.org/queryj"\>QueryJ\</a\>
 * @version <"$">Revision: $ (<"$">Author: $ at <"$">Date: $)
 * @since <input.timestamp>
 */
public class <input.tr_name_capitalized>DAOListenerImpl
    implements  <input.tr_name_capitalized>DAOListener
{
    /**
     * Receives notifications whenever a operation on the persistence
     * layer takes place.
     * @param sql the sql sentence.
     * @param parameters the sql parameters.
     * @precondition sql != null
     */
    public void preparedStatementExecuted(
        final String sql, final Object[] parameters)
    {
        annotatePreparedStatementExecuted(
            sql,
            parameters,
            <input.tr_name_capitalized>StatisticsProvider.getInstance());
    }

    /**
     * Annotates whenever a prepared statement is executed.
     * @param sql the sql sentence.
     * @param parameters the sql parameters.
     * @param statisticsProvider the \<code><input.tr_name_capitalized>StatisticsProvider\</code>
     * instance.
     * @precondition sql != null
     * @precondition daoStatisticsProvider != null
     */
    protected void annotatePreparedStatementExecuted(
        final String sql,
        final Object[] parameters,
        final <input.tr_name_capitalized>StatisticsProvider statisticsProvider)
    {
        statisticsProvider.annotatePreparedStatementExecuted(
            sql, parameters);
    }

    /**
     * Receives notifications whenever a connection is retrieved.
     * @param jdbcTemplate the actual \<code><input.tr_name_capitalized>JdbcTemplate\</code>.
     * @param connectionCallback the connection callback.
     */
    public void connectionRetrieved(
        final <input.tr_name_capitalized>JdbcTemplate jdbcTemplate,
        final ConnectionCallback connectionCallback)
    {
        annotateConnectionRetrieved(
            jdbcTemplate,
            connectionCallback, 
            <input.tr_name_capitalized>StatisticsProvider.getInstance());
    }

    /**
     * Annotates when a connection is retrieved.
     * @param jdbcTemplate the actual \<code><input.tr_name_capitalized>JdbcTemplate\</code>.
     * @param connectionCallback the connection callback.
     * @param statisticsProvider the \<code><input.tr_name_capitalized>StatisticsProvider\</code>
     * instance.
     */
    protected void annotateConnectionRetrieved(
        final <input.tr_name_capitalized>JdbcTemplate jdbcTemplate,
        final ConnectionCallback connectionCallback,
        final <input.tr_name_capitalized>StatisticsProvider statisticsProvider)
    {
        statisticsProvider.annotateConnectionRetrieved(
            jdbcTemplate, connectionCallback);
    }

    /**
     * Receives notifications whenever a connection is retrieved.
     * @param jdbcTemplate the actual \<code><input.tr_name_capitalized>JdbcTemplate\</code>.
     * @param preparedStatementCallback the prepared-statement callback.
     */
    public void connectionRetrieved(
        final <input.tr_name_capitalized>JdbcTemplate jdbcTemplate,
        final PreparedStatementCallback preparedStatementCallback)
    {
        annotateConnectionRetrieved(
            jdbcTemplate,
            preparedStatementCallback, 
            <input.tr_name_capitalized>StatisticsProvider.getInstance());
    }

    /**
     * Annotates when a connection is retrieved.
     * @param jdbcTemplate the actual \<code><input.tr_name_capitalized>JdbcTemplate\</code>.
     * @param preparedStatementCallback the prepared-statement callback.
     * @param statisticsProvider the \<code><input.tr_name_capitalized>StatisticsProvider\</code>
     * instance.
     */
    protected void annotateConnectionRetrieved(
        final <input.tr_name_capitalized>JdbcTemplate jdbcTemplate,
        final PreparedStatementCallback preparedStatementCallback,
        final <input.tr_name_capitalized>StatisticsProvider statisticsProvider)
    {
        statisticsProvider.annotateConnectionRetrieved(
            jdbcTemplate, preparedStatementCallback);
    }

    /**
     * Receives notifications whenever a connection is released.
     * @param jdbcTemplate the actual \<code><input.tr_name_capitalized>JdbcTemplate\</code>.
     * @param connectionCallback the connection callback.
     */
    public void connectionReleased(
        final <input.tr_name_capitalized>JdbcTemplate jdbcTemplate,
        final PreparedStatementCallback preparedStatementCallback)
    {
        annotateConnectionReleased(
            jdbcTemplate,
            connectionCallback,
            <input.tr_name_capitalized>StatisticsProvider.getInstance());
    }

    /**
     * Annotates a connection is released.
     * @param jdbcTemplate the actual \<code><input.tr_name_capitalized>JdbcTemplate\</code>.
     * @param connectionCallback the connection callback.
     * @param statisticsProvider the \<code><input.tr_name_capitalized>StatisticsProvider\</code>
     * instance.
     */
    public void annotateConnectionReleased(
        final <input.tr_name_capitalized>JdbcTemplate jdbcTemplate,
        final ConnectionCallback connectionCallback,
        final <input.tr_name_capitalized>StatisticsProvider statisticsProvider)
    {
        statisticsProvider.annotateConnectionReleased(
            jdbcTemplate, connectionCallback);
    }

    /**
     * Receives notifications whenever a connection is released.
     * @param jdbcTemplate the actual \<code><input.tr_name_capitalized>JdbcTemplate\</code>.
     * @param preparedStatementCallback the prepared-statement callback.
     */
    public void connectionReleased(
        final <input.tr_name_capitalized>JdbcTemplate jdbcTemplate,
        final PreparedStatementCallback preparedStatementCallback)
    {
        annotateConnectionReleased(
            jdbcTemplate,
            preparedStatementCallback,
            <input.tr_name_capitalized>StatisticsProvider.getInstance());
    }

    /**
     * Annotates a connection is released.
     * @param jdbcTemplate the actual \<code><input.tr_name_capitalized>JdbcTemplate\</code>.
     * @param preparedStatementCallback the prepared-statement callback.
     * @param statisticsProvider the \<code><input.tr_name_capitalized>StatisticsProvider\</code>
     * instance.
     */
    public void annotateConnectionReleased(
        final <input.tr_name_capitalized>JdbcTemplate jdbcTemplate,
        final PreparedStatementCallback preparedStatementCallback,
        final <input.tr_name_capitalized>StatisticsProvider statisticsProvider)
    {
        statisticsProvider.annotateConnectionReleased(
            jdbcTemplate, preparedStatementCallback);
    }

    /**
     * Receives notifications whenever a connection is retrieved.
     * @param jdbcTemplate the actual \<code><input.tr_name_capitalized>JdbcTemplate\</code>.
     * @param statementCallback the statement callback.
     */
    public void connectionRetrieved(
        final <input.tr_name_capitalized>JdbcTemplate jdbcTemplate,
        final StatementCallback statementCallback)
    {
        annotateConnectionRetrieved(
            jdbcTemplate,
            statementCallback,
            <input.tr_name_capitalized>StatisticsProvider.getInstance());
    }

    /**
     * Annotates a connection is retrieved.
     * @param jdbcTemplate the actual \<code><input.tr_name_capitalized>JdbcTemplate\</code>.
     * @param statementCallback the statement callback.
     * @param statisticsProvider the \<code><input.tr_name_capitalized>StatisticsProvider\</code>
     * instance.
     */
    protected void annotateConnectionRetrieved(
        final <input.tr_name_capitalized>JdbcTemplate jdbcTemplate,
        final StatementCallback statementCallback,
        final <input.tr_name_capitalized>StatisticsProvider statisticsProvider)
    {
        statisticsProvider.annotateConnectionRetrieved(
            jdbcTemplate, statementCallback);
    }

    /**
     * Receives notifications whenever a connection is released.
     * @param jdbcTemplate the actual \<code><input.tr_name_capitalized>JdbcTemplate\</code>.
     * @param statementCallback the statement callback.
     */
    public void connectionReleased(
        final <input.tr_name_capitalized>JdbcTemplate jdbcTemplate,
        final StatementCallback statementCallback)
    {
        annotateConnectionReleased(
            jdbcTemplate,
            statementCallback,
            <input.tr_name_capitalized>StatisticsProvider.getInstance());
    }

    /**
     * Annotates a connection is released.
     * @param jdbcTemplate the actual \<code><input.tr_name_capitalized>JdbcTemplate\</code>.
     * @param statementCallback the statement callback.
     * @param statisticsProvider the \<code><input.tr_name_capitalized>StatisticsProvider\</code>
     * instance.
     */
    protected void annotateConnectionReleased(
        final <input.tr_name_capitalized>JdbcTemplate jdbcTemplate,
        final StatementCallback statementCallback,
        final <input.tr_name_capitalized>StatisticsProvider statisticsProvider)
    {
        statisticsProvider.annotateConnectionReleased(
            jdbcTemplate, statementCallback);
    }

    /**
     * Receives notifications whenever a statement is created.
     * @param jdbcTemplate the actual \<code><input.tr_name_capitalized>JdbcTemplate\</code>.
     * @param preparedStatementCreator the statement creator.
     */
    public void statementCreated(
        final <input.tr_name_capitalized>JdbcTemplate jdbcTemplate,
        final PreparedStatementCreator preparedStatementCreator)
    {
        annotateStatementCreated(
            jdbcTemplate,
            preparedStatementCreator,
            <input.tr_name_capitalized>StatisticsProvider.getInstance());
    }

    /**
     * Annotates a statement is created.
     * @param jdbcTemplate the actual \<code><input.tr_name_capitalized>JdbcTemplate\</code>.
     * @param preparedStatementCreator the statement creator.
     * @param statisticsProvider the \<code><input.tr_name_capitalized>StatisticsProvider\</code>
     * instance.
     */
    protected void annotateStatementCreated(
        final <input.tr_name_capitalized>JdbcTemplate jdbcTemplate,
        final PreparedStatementCreator preparedStatementCreator,
        final <input.tr_name_capitalized>StatisticsProvider statisticsProvider)
    {
        statisticsProvider.annotateStatementCreated(
            jdbcTemplate, preparedStatementCreator);
    }

    /**
     * Receives notifications whenever a statement is prepared.
     * @param sql the sql.
     */
    public void statementPrepared(final String sql)
    {
        annotateStatementPrepared(
            sql, <input.tr_name_capitalized>StatisticsProvider.getInstance());
    }

    /**
     * Annotates a statement is prepared.
     * @param sql the sql.
     * @param statisticsProvider the \<code><input.tr_name_capitalized>StatisticsProvider\</code>
     * instance.
     */
    protected void annotateStatementPrepared(
        final String sql,
        final <input.tr_name_capitalized>StatisticsProvider statisticsProvider)
    {
        statisticsProvider.annotateStatementPrepared(sql);
    }

    /**
     * Receives notifications whenever a statement is released.
     * @param jdbcTemplate the actual \<code><input.tr_name_capitalized>JdbcTemplate\</code>.
     * @param preparedStatementCreator the statement creator.
     */
    public void statementReleased(
        final <input.tr_name_capitalized>JdbcTemplate jdbcTemplate,
        final PreparedStatementCreator preparedStatementCreator)
    {
        annotateStatementReleased(
            jdbcTemplate,
            preparedStatementCreator,
            <input.tr_name_capitalized>StatisticsProvider.getInstance());
    }

    /**
     * Annotates a statement is released.
     * @param jdbcTemplate the actual \<code><input.tr_name_capitalized>JdbcTemplate\</code>.
     * @param preparedStatementCreator the statement creator.
     * @param statisticsProvider the \<code><input.tr_name_capitalized>StatisticsProvider\</code>
     * instance.
     */
    protected void annotateStatementReleased(
        final <input.tr_name_capitalized>JdbcTemplate jdbcTemplate,
        final PreparedStatementCreator preparedStatementCreator,
        final <input.tr_name_capitalized>StatisticsProvider statisticsProvider)
    {
        statisticsProvider.annotateStatementReleased(
            jdbcTemplate, preparedStatementCreator);
    }

    /**
     * Receives notifications whenever a result-set moves forward one row.
     * @param resultSetExtractor the ResultSet extractor.
     */
    public void resultSetMovedForward(
        final <input.tr_name_capitalized>ResultSetExtractor resultSetExtractor)
    {
        annotateResultSetMovedForward(
            resultSetExtractor,
            <input.tr_name_capitalized>StatisticsProvider.getInstance());
    }

    /**
     * Annotates whenever a result-set moves forward one row.
     * @param resultSetExtractor the ResultSet extractor.
     * @param statisticsProvider the \<code><input.tr_name_capitalized>StatisticsProvider\</code>
     * instance.
     */
    protected void annotateResultSetMovedForward(
        final <input.tr_name_capitalized>ResultSetExtractor resultSetExtractor,
        final <input.tr_name_capitalized>StatisticsProvider statisticsProvider)
    {
        statisticsProvider.annotateResultSetMovedForward(
            resultSetExtractor);
    }

    /**
     * Receives notifications whenever a result-set is closed.
     * @param resultSetExtractor the ResultSet extractor.
     */
    public void resultSetClosed(
        final <input.tr_name_capitalized>ResultSetExtractor resultSetExtractor)
    {
        annotateResultSetClosed(
            resultSetExtractor,
            <input.tr_name_capitalized>StatisticsProvider.getInstance());
    }

    /**
     * Annotates whenever a result-set is closed.
     * @param resultSetExtractor the ResultSet extractor.
     * @param statisticsProvider the \<code><input.tr_name_capitalized>StatisticsProvider\</code>
     * instance.
     */
    public void annotateResultSetClosed(
        final <input.tr_name_capitalized>ResultSetExtractor resultSetExtractor,
        final <input.tr_name_capitalized>StatisticsProvider statisticsProvider)
    {
        statisticsProvider.annotateResultSetClosed(
            resultSetExtractor);
    }
}
>>
