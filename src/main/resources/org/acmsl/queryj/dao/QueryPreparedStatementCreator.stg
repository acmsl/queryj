//;-*- mode: antlr -*-
//
//                      QueryJ
//
//  Copyright (C) 2002-2007  ACM-SL
//                           chous@acm-sl.org
//
//  This library is free software; you can redistribute it and/or
//  modify it under the terms of the GNU General Public
//  License as published by the Free Software Foundation; either
//  version 2 of the License, or any later version.
//
//  This library is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
//  General Public License for more details.
//
//  You should have received a copy of the GNU General Public
//  License along with this library; if not, write to the Free Software
//  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
//
//  Thanks to ACM S.L. for distributing this library under the GPL license.
//  Contact info: jose.sanleandro@acm-sl.com
//  Postal Address: c/Playa de Lagoa, 1
//                  Urb. Valdecabanas
//                  Boadilla del monte
//                  28660 Madrid
//                  Spain
//
//***************************************************************************
//
// Filename: DAO.stg
//
// Author: Jose San Leandro Armendariz
//
// Description: Defines the rules to generate DAO database-based
//              implementations.
//
// Version: $Revision: 1769 $ ($Author: chous $ at $Date: 2007-04-23 10:14:02 +0200 (Mon, 23 Apr 2007) $)
//
// $Id: DAO.stg 1769 2007-04-23 08:14:02Z chous $
//
group DAO;

source(input) ::= <<
<!
  Generates a DAO database implementation source file.
  @param input.copyright_years the copyright's years.
  @param input.table_name the table name.
  @param input.package the package.
  @param input.dao_class_name the DAO class name.
  @param input.dao_factory_class_name the DAO factory class name.
  @param input.dao_implementation_class_name the DAO implementation class name.
  @params project_imports
  @params class
!>
<if(input.header)>
<input.header>
<else>
<java_header(
  years=input.copyright_years,
  description=
  [
    first_line_description(
      tableName=input.table_name,
      engineName=input.engine_name,
      engineVersion=input.engine_version),
    second_line_description(
      tableName=input.table_name,
      engineName=input.engine_name,
      engineVersion=input.engine_version)
  ],
  timestamp=input.timestamp)>
<endif>
// Generated by $Id: DAO.stg 1769 2007-04-23 08:14:02Z chous $

<package_declaration(
  packageNames=
  [
    input.base_package_name,
    typeInitMap.baseDAOSubpackageName
  ])>

/*
 * Importing temporarily QueryJ classes.
 */
import org.acmsl.queryj.Query;

/*
 * Importing Spring classes.
 */
import org.springframework.jdbc.core.PreparedStatementCreator;
    
/*
 * Importing some JDK classes.
 */
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.SQLException;

<class(input=input)>
>>

first_line_description(tableName, engineName, engineVersion) ::= <<
<!
  Generates a description for the generated file.
  @param tableName the table name.
  @param engineName the engine name.
  @param engineVersion the engine version.
!>
Creates the \<code>PreparedStatement\</code>
>>

second_line_description(tableName, engineName, engineVersion) ::= <<
<!
  Generates a description for the generated file.
  @param tableName the table name.
  @param engineName the engine name.
  @param engineVersion the engine version.
!>
required to perform any \<i>JDBC\</i> operation.
>>

class(input) ::= <<
<!
 Generates the class body.
 @param input.vo_name the value object name.
 @param input.engine_name the engine name.
 @param input.engine_version the engine version.
 @param input.timestamp the timestamp.
 @param input.custom_results the results for the custom queries.
 @param input.tr_name the table repository name.
!>
/**
 * <[
      first_line_description(
        tableName=input.table_name,
        engineName=input.engine_name,
        engineVersion=input.engine_version),
      second_line_description(
        tableName=input.table_name,
        engineName=input.engine_name,
        engineVersion=input.engine_version)
    ]:{line |<line>}; separator="\n * ">
 * @author \<a href="http://www.acm-sl.org/queryj"\>QueryJ\</a\>
 * @version <"$">Revision: $ (<"$">Author: $ at <"$">Date: $)
 * @since <input.timestamp>
 */
public class <input.tr_name_capitalized>QueryPreparedStatementCreator
    implements  PreparedStatementCreator
{
    /**
     * The configured query.
     */
    private Query m__Query;

    /**
     * The SQL query.
     */
    private String m__strSql;

    /**
     * Builds a \<code>QueryPreparedStatementCreator\</code>
     * for given query.
     * @param query the query.
     * @deprecated QueryJ should not be a runtime dependency. Use <input.tr_name_capitalized>QueryPreparedStatementCreator(String) instead.
     * @precondition query != null
     */
    public <input.tr_name_capitalized>QueryPreparedStatementCreator(final Query query)
    {
        immutableSetQuery(query);
    }

    /**
     * Builds a \<code>QueryPreparedStatementCreator\</code>
     * for given query.
     * @param query the query.
     * @precondition query != null
     */
    public QueryPreparedStatementCreator(final String query)
    {
        immutableSetSql(query);
    }

    /**
     * Specifies the query.
     * @param query such query.
     */\n"
    protected final void immutableSetQuery(final Query query)
    {
        m__Query = query;
    }

    /**
     * Specifies the query.
     * @param query such query.
     */
    protected void setQuery(final Query query)
    {
        immutableSetQuery(query);
    }

    /**
     * Retrieves the query.
     * @return such information.
     * @deprecated QueryJ should not be a runtime dependency.
     */
    public Query getQuery()
    {
        return m__Query;
    }

    /**
     * Specifies the SQL query.
     * @param query such query.
     */
    protected final void immutableSetSql(final String query)
    {
        m__strSql = query;
    }

    /**
     * Specifies the query.
     * @param query such query.
     */
    protected void setSql(final String query)
    {
        immutableSetSql(query);
    }

    /**
     * Retrieves the query.
     * @return such information.
     */
    public String getSql()
    {
        return m__strSql;
    }

    // <create prepared statement>\n\n"
    /**
     * Creates the prepared statement required to accomplish the
     * \<i>SQL\</i> operation.
     * @param connection the connection.
     * @return the \<code>PreparedStatement\</code> instance.
     * @throws SQLException if something wrong occurs. \<b>Spring\</b> takes
     * care of this.
     * @precondition connection != null
     */
    public PreparedStatement createPreparedStatement(
        final Connection connection)
      throws SQLException
    {
        return
            createPreparedStatement(
                connection, getQuery(), getSql());
    }

    /**
     * Creates the prepared statement required to accomplish the
     * <i>SQL</i> operation.
     * @param connection the connection.
     * @param query the query.
     * @param sql the sql query.
     * @return the <code>PreparedStatement</code> instance.
     * @throws SQLException if something wrong occurs. <b>Spring</b> takes
     * care of this.
     * @precondition connection != null
     * @precondition (query != null) || (sql != null)
     */
    protected PreparedStatement createPreparedStatement(
        final Connection connection,
        final Query query,
        final String sql)
      throws SQLException
    {
        PreparedStatement result = null;

        if  (query != null)
        {
            result = query.prepareStatement(connection);
        }
        else if  (sql != null)
        {
            result = connection.prepareStatement(sql);
        }

        return result;
    }
}
>>
