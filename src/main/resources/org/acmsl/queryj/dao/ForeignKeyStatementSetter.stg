//;-*- mode: antlr -*-
//
//                      QueryJ
//
//  Copyright (C) 2002-today  ACM-SL
//                           chous@acm-sl.org
//
//  This library is free software; you can redistribute it and/or
//  modify it under the terms of the GNU General Public
//  License as published by the Free Software Foundation; either
//  version 2 of the License, or any later version.
//
//  This library is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
//  General Public License for more details.
//
//  You should have received a copy of the GNU General Public
//  License along with this library; if not, write to the Free Software
//  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
//
//  Thanks to ACM S.L. for distributing this library under the GPL license.
//  Contact info: jose.sanleandro@acm-sl.com
//  Postal Address: c/Playa de Lagoa, 1
//                  Urb. Valdecabanas
//                  Boadilla del monte
//                  28660 Madrid
//                  Spain
//
//***************************************************************************
//
// Filename: ForeignKeyStatementSetter.stg
//
// Author: Jose San Leandro Armendariz
//
// Description: Defines the rules to generate AttributeStatementSetter for
//              a foreign key.
//
//
group ForeignKeyStatementSetter;

source(input) ::= <<
<!
  Generates a AttributeStatementSetter source file for a concrete foreign key.
  @param input.copyright_years the copyright's years.
  @param input.table_name the table name.
  @param input.package the package.
  @param foreign_key the foreign key.
  @params project_imports
  @params class
!>
<if(input.header)>
<input.header>
<else>
<java_header(
  years=input.copyright_years,
  description=
  [
    first_line_description(tableName=input.table_name),
    second_line_description(tableName=input.table_name),
    third_line_description(foreignKey=input.foreign_key)
  ],
  timestamp=input.timestamp)>
<endif>
// Generated using org/acmsl/queryj/dao/ForeignKeyStatementSetter.stg

<package_declaration(
  packageNames=
  [
    input.base_package_name,
    typeInitMap.baseDAOSubpackageName,
    typeInitMap.rdbSubpackageName,
    input.subpackage_name,
    input.table_name_normalized_lowercased
  ])>

<project_imports(
  basePackageName=input.base_package_name,
  voSubpackageName=typeInitMap.voSubpackageName,
  voName=input.vo_name,
  trSubpackageName=typeInitMap.tableRepositorySubpackageName,
  trName=input.tr_name_capitalized)>

<checkers_import()>
/*
 * Importing Spring classes.
 */
import org.springframework.jdbc.core.PreparedStatementSetter;

/*
 * Importing some JDK extension classes
 */
import javax.sql.DataSource;

<checkers_import_preamble()>
import checkers.nullness.quals.NonNull;
import checkers.nullness.quals.Nullable;

/*
 * Importing some JDK classes.
 */
import java.math.BigDecimal;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.util.Calendar;
import java.util.Date;

/*
 * Importing Jakarta Commons Logging classes
 */
import org.apache.commons.logging.LogFactory;

<class(input=input, foreignKey=input.foreign_key)>
>>

first_line_description(tableName) ::= <<
<!
  Generates the first line of the generated file description.
  @param tableName the table name.
!>
Specifies the PreparedStatement values required
>>

second_line_description(tableName) ::= <<
<!
  Generates the second line of the generated file description.
  @param tableName the table name.
!>
to perform any <tableName> operation expecting
>>

third_line_description(foreignKey) ::= <<
<!
  Generates the third line of the generated file description.
  @param foreignKey the foreign key.
!>
the foreign key (<foreignKey.attributes:{<it>}; separator=", ">)
>>

project_imports(
  basePackageName, voSubpackageName, voName, trSubpackageName, trName) ::= <<
<!
 Generates the project imports.
 @param basePackageName the base package name.
 @param voSubpackageName the value-object subpackage name.
 @param voName the value-object name.
 @param trSubpackageName the table repository subpackage name.
 @param trName the table repository name.
!>
/*
 * Importing project classes.
 */
//import <basePackageName>.<trSubpackageName>.<trName>TableRepository;
>>

class(input, foreignKey) ::= <<
<!
 Generates the class body.
 @param input the input.
 @param foreignKey the foreign key.
!>
/**
 * <[
      first_line_description(tableName=input.table_name),
      second_line_description(tableName=input.table_name),
      third_line_description(foreignKey=foreignKey)
    ]:{line |<line>}; separator="\n * ">
<class_common_javadoc()>
 */
public class <foreignKey.sourceVoName>By<foreignKey.targetVoName>StatementSetter
    implements  PreparedStatementSetter
{
    <foreignKey.attributes:attribute_member_declaration(attr=it); separator="\n">

    /**
     * The update operation.
     */
    private boolean m__bUpdateOperation;

    /**
     * Creates a {@link <foreignKey.sourceVoName>By<foreignKey.targetVoName>StatementSetter}
     * instance.
     <foreignKey.attributes:attribute_javadoc(name=it.nameLowercased);
        separator="\n">
     */
    public <foreignKey.sourceVoName>By<foreignKey.targetVoName>StatementSetter(
        <foreignKey.attributes:attribute_declaration(attr=it);
          separator=",\n">)
    {
        <foreignKey.attributes:
          { attr | immutableSet<attr.nameCapitalized>(<attr.nameLowercased>);};
          separator="\n">
    }

    <foreignKey.attributes:attribute_accessor(attr=it); separator="\n">

    /**
     * Specifies the values on given {@link PreparedStatement}
     * @param preparedStatement the prepared statement.
     * @throws SQLException intercepted by \<i>Spring\</i>.
     */
    public void setValues(@NonNull final PreparedStatement preparedStatement)
        throws  SQLException
    {
        setValues(
            preparedStatement,
            <foreignKey.attributes:{attr | get<attr.nameCapitalized>()}; separator=",\n">);
    }

    /**
     * Specifies the values on given {@link PreparedStatement}
     * @param preparedStatement the prepared statement.
     <foreignKey.attributes:attribute_javadoc(name=it.nameLowercased);
        separator="\n">
     * @throws SQLException intercepted by \<i>Spring\</i>.
     */
    protected void setValues(
        <notnull()>final PreparedStatement preparedStatement,
        <foreignKey.attributes:attribute_declaration(attr=it);
          separator=",\n">)
      throws  SQLException
    {
        <foreignKey.attributes:attribute_query_specification(attr=it);
          separator="\n">
    }
}
>>

attribute_member_declaration(attr) ::= <<
<!
 Generates the member declaration for a concrete attribute.
 @param attr the attribute.
!>
/**
 * The \<i><attr.name>\</i> information.
 */
private <if(attr.clob)>String<else><attr.javaType><endif> <attr.nameLowercased>;
>>

attribute_accessor(attr) ::= <<
<!
 Generates the accessor for a concrete attribute.
 @param attr the attribute.
!>
/**
 * Specifies the \<i><attr.name>\</i> value.
<attribute_javadoc(name=attr.nameLowercased)>
 */
protected final void immutableSet<attr.nameCapitalized>(
    <attribute_declaration(attr=attr)>)
{
    this.<attr.nameLowercased> = <attr.nameLowercased>;
}

/**
 * Specifies the \<i><attr.name>\</i> value.
<attribute_javadoc(name=attr.nameLowercased)>
 */
@SuppressWarnings("unused")
protected void set<attr.nameCapitalized>(
    <attribute_declaration(attr=attr)>)
{
    immutableSet<attr.nameCapitalized>(<attr.nameLowercased>);
}

/**
 * Retrieves the \<i><attr.name>\</i> value.
<attribute_javadoc(name=attr.nameLowercased)>
 * @return such value.
 */
<type_checker(attribute=attr)>
protected <if(attr.clob)>String<else><attr.javaType><endif> get<attr.nameCapitalized>()
{
    return <attr.nameLowercased>;
}
>>

attribute_query_specification(attr) ::= <<
<!
 Generates the code to specify the attribute into the query.
 @param attr the attribute.
!>
<if(attr.allowsNull)>
if  (<attr.nameLowercased> == null)
{
    preparedStatement.setNull(<attr.ordinalPosition>, <attr.type>);
}
else
{
    preparedStatement.set<attr.objectType>(
        <attr.ordinalPosition>, <indirect_template(name=attr.objectType + "_to_primitive", input=attr)>);
}
<else>
preparedStatement.set<attr.objectType>(
<if(attr.timestamp)>
    <attr.ordinalPosition>, new Timestamp(<attr.nameLowercased>.getTime()));
<else>
    <attr.ordinalPosition>, <attr.nameLowercased>);
<endif>
<endif>
>>
