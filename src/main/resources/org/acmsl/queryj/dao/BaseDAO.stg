//;-*- mode: antlr -*-
//
//                      QueryJ
//
//  Copyright (C) 2002-today  ACM-SL
//                           chous@acm-sl.org
//
//  This library is free software; you can redistribute it and/or
//  modify it under the terms of the GNU General Public
//  License as published by the Free Software Foundation; either
//  version 2 of the License, or any later version.
//
//  This library is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
//  General Public License for more details.
//
//  You should have received a copy of the GNU General Public
//  License along with this library; if not, write to the Free Software
//  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
//
//  Thanks to ACM S.L. for distributing this library under the GPL license.
//  Contact info: jose.sanleandro@acm-sl.com
//  Postal Address: c/Playa de Lagoa, 1
//                  Urb. Valdecabanas
//                  Boadilla del monte
//                  28660 Madrid
//                  Spain
//
//***************************************************************************
//
// Filename: BaseDAO.stg
//
// Author: Jose San Leandro Armendariz
//
// Description: Defines the rules to generate base DAO
//              implementations.
//
group BaseDAO;

source() ::= <<
<!
  Generates a DAO database implementation source file.
  @param copyright_years the copyright's years.
  @param table_name the table name.
  @param package the package.
  @param dao_class_name the DAO class name.
  @param dao_factory_class_name the DAO factory class name.
  @param dao_implementation_class_name the DAO implementation class name.
  @params project_imports
  @params class
!>
<if(header)>
<header>
<else>
<java_header(
  years=copyright_years,
  description=
  [
    first_line_description(tableName=table.name),
    second_line_description(tableName=table.name)
  ],
  timestamp=timestamp)>
<endif>
// Generated using org/acmsl/queryj/dao/BaseDAO.stg at <timestamp>

<package_declaration(
  packageNames=
  [
    project_package,
    typeInitMap.baseDAOSubpackageName
  ])>

<project_imports(
  basePackageName=project_package,
  voSubpackageName=typeInitMap.voSubpackageName,
  voName=table.voName,
  table=table)>

<checkers_import()>
<if(column_type_imports)>
<column_type_imports:import(type=it)>
<endif>

<class(table=table)>
>>

first_line_description(tableName) ::= <<
<!
  Generates the first line of the generated file description.
  @param tableName the table name.
!>
DAO abstract layer responsible of retrieving
>>

second_line_description(tableName) ::= <<
<!
  Generates the second line of the generated file description.
  @param tableName the table name.
!>
<tableName> structures from persistence layers.
>>

project_imports(basePackageName, voSubpackageName, voName, table) ::= <<
<!
 Generates the project imports.
 @param basePackageName the base package name.
 @param voSubpackageName the value-object subpackage name.
 @param voName the value-object name.
 @param table the table.
!>
/*
 * Importing project classes.
 */
import <basePackageName>.<voSubpackageName>.<voName>;
<if(table.voDecorated)>
import <basePackageName>.<voSubpackageName>.<voName>Decorator;
import <basePackageName>.<voSubpackageName>.<voName>DecoratorImpl;
<endif>

import <basePackageName>.<voSubpackageName>.<voName>ValueObject;
>>

class(table) ::= <<
<!
 Generates the class body.
 @param table the table.
!>
<classImpl(table=table, parent=table.parentTable)>
>>

classImpl(table, parent) ::= <<
<!
 Generates the class body.
 @param table the table.
 @param parent the parent table.
!>
/**
 * <[
      first_line_description(tableName=table.name),
      second_line_description(tableName=table.name)
    ]:{line |<line>}; separator="\n * ">
<class_common_javadoc()>
 */
public interface <table.voName>DAO
{
<if(table.static)>
    <table.staticContent:cached_constants(
      row=it, voName=table.voName); separator="\n\n">

    /**
     * The static constants.
     */
<if(table.voDecorated)>
    static final <table.voName>Decorator[] FIXED_CONSTANTS =
<else>
    static final <table.voName>[] FIXED_CONSTANTS =
<endif>

<if(table.voDecorated)>
        new <table.voName>Decorator[]
<else>
        new <table.voName>[]
<endif>

        {
            <table.staticContent:{<it.nameNormalizedUppercased>};
              separator=",\n">
        };

    /**
     * The static constants.
     * @deprecated Use <table.voName>DAO.FIXED_CONSTANTS instead.
     */
<if(table.voDecorated)>
    static final <table.voName>Decorator[] _ALL_QUERYJ_CONSTANTS_ =
<else>
    static final <table.voName>[] _ALL_QUERYJ_CONSTANTS_ =
<endif>

        FIXED_CONSTANTS;

    <table.nonPrimaryKeyAttributes:find_constant_methods(
      attribute=it,
      table=table)>

    /**
     * Loads \<i><table.name>\</i> information from the constant pool,
     * filtering by the primary key.
     <table.primaryKey:attribute_javadoc(name=it.nameLowercased); separator="\n">
     * @return the \{@link <table.voName>} instance.
     */
    <nullable()>
    <table.voName> findConstantByPk(
        <table.primaryKey:attribute_declaration(attr=it); separator=",\n">);

<endif>

    /**
     * Retrieves {@link <table.voName>} information
     * filtering by its primary key.
     <table.primaryKey:attribute_javadoc(name=it.nameLowercased); separator="\n">
     * @return the {@link <table.voName>} matching given
     * primary key.
     * @throws DataAccessException if the operation fails.
     */
<if(table.voDecorated)>
    <table.voName>Decorator findByPrimaryKey(
<else>
    <table.voName> findByPrimaryKey(
<endif>

        <table.primaryKey:attribute_declaration(attr=it); separator=",\n">);

    /**
     * Persists {@link <table.voName>} information.
<if(parent)>
     <table.allParentAndNonParentNonManagedExternallyAttributes:{ attr | <attribute_javadoc(name=it.nameLowercased)>}; separator=",\n">
<else>
     <table.allNonReadOnlyButExternallyManagedAttributes:attribute_javadoc(
       name=it.nameLowercased); separator="\n">
<endif>

     * @throws DataAccessException if the operation fails.
     */
    void insert(
        <table.allNonReadOnlyButExternallyManagedAttributes:attribute_declaration(attr=it); separator=",\n">);


    /**
     * Inserts and retrieves the newly-inserted
     * {@link <table.voName>} instance.
     <table.allNonReadOnlyButExternallyManagedAttributes:attribute_javadoc(
       name=it.nameLowercased); separator="\n">
     * @throws DataAccessException if the operation fails.
     */
<if(table.voDecorated)>
    <table.voName>Decorator create(
<else>
    <table.voName> create(
<endif>

        <table.allNonReadOnlyButExternallyManagedAttributes:attribute_declaration(attr=it); separator=",\n">);


    /**
     * Updates {@link <table.voName>} information.
     <table.allNonReadOnlyAttributes:attribute_javadoc(name=it.nameLowercased); separator="\n">
     * @return the number of entities updated.
     * @throws DataAccessException if the operation fails.
     */
    int update(
        <table.nonReadOnlyAttributes:attribute_declaration_impl(attr=it); separator=",\n">);


    /**
     * Deletes {@link <table.voName>} information.
     <table.primaryKey:attribute_javadoc(name=it.nameLowercased); separator="\n">
     */
    void delete(
        <table.primaryKey:attribute_declaration(attr=it); separator=",\n">);

    <table.foreignKeys:fk_delete_method(
      foreignKey=it, table=table); separator="\n">

    <table.customSelects:custom_select(
      cs=it, table=table); separator="\n\n">

    <table.customUpdatesOrInserts:custom_update_or_insert(
      cs=it, table=table); separator="\n\n">

    <table.customSelectsForUpdate:custom_select_for_update(
      cs=it, table=table); separator="\n\n">
}
>>

cached_constants(row, voName) ::= <<
<!
 Generates the constant for the cached row.
 @param row the row
 @param voName the value-object name.
!>
/**
 * The <row.name> constant.
 */
<if(table.voDecorated)>
static final <voName>Decorator <row.nameNormalizedUppercased> =
<else>
static final <voName> <row.nameNormalizedUppercased> =
<endif>

<if(table.voDecorated)>
    new <voName>DecoratorImpl(
        new <voName>ValueObject(
            <row.attributes:attribute_specification(attr=it); separator=",\n">));
<else>
    new <voName>ValueObject(
        <row.attributes:attribute_specification(attr=it); separator=",\n">);
<endif>
>>

attribute_specification(attr) ::= <<
<!
 Prints the value of the attribute, optionally escaping it.
 @param attr the attribute.
!>
<if(attr.allowsNull)>
<primitive_to(templateName="primitive_to_", attr=attr)>
<else>
<if(attr.numeric)>
<attr.value>
<else>
"<attr.value>"
<endif>
<endif>
>>

primitive_to(templateName, attr) ::= <<
<!
 Prints the name of the correct template.
 @param templateName the template name.
 @param attr the attribute.
 !>
<primitive_to2(templateName=templateName + attr.objectType, attr=attr)>
>>

primitive_to2(templateName, attr) ::= <<
<!
 Prints the name of the correct template.
 @param templateName the template name.
 @param attr the attribute.
 !>
<indirect_template(name=templateName + "_value", extra1=attr)>
>>

find_constant_methods(attribute, table) ::= <<
<!
  Declares the methods to operate directly on defined constants.
  @param attribute the attribute.
  @param table the table.
!>
/**
 * Loads \<i><table.name>\</i> information from the constant pool,
 * filtering by <attribute.name>.
 * @param <attribute.nameLowercased> the <attribute.name>
 * to filter.
 * @return the {@link <table.voName>} instance.
 */
<nullable()>
<table.voName> findConstantBy<attribute.nameCapitalized>(
    <type_checker(attr=attribute)>final <attribute.javaType> <attribute.nameLowercased>);

>>

fk_delete_method(foreignKey, table) ::= <<
<!
  Writes the deleteByXX method for a concrete foreign key.
  @param foreignKey the foreign key.
!>
/**
 * Deletes <table.name> information from the persistence layer filtering
 * by given foreign keys.
 <foreignKey.attributes:attribute_javadoc(name=it.nameLowercased); separator="\n">
 */
void deleteBy<foreignKey:{attr |<attr.nameCapitalized>}>(
    <foreignKey.attributes:attribute_declaration(attr=it); separator=",\n">);
>>

custom_select(cs, table) ::= <<
<!
 Writes the code for a custom select query.
 @param cs the custom select.
 @param table the table.
!>
/**
 * Custom select \<i><cs.id>\</i>:\<br/>
 * \<b><cs.description>\</b>.
<if(cs.parameters)>
 <cs.parameters:attribute_javadoc(name=it.name); separator="\n">
<else>
<if(cs.dynamic)>
 * @param params the query parameters.
<endif>
<endif>

 * @return the \<i><cs.resultClass>\</i> information retrieved.
 * @throws DataAccessException if the operation fails.
 */
<cs.result:{rs|<if(table.voDecorated)><if(rs.implicitProperties)>
<cs.resultClass> <cs.nameUncapitalized>(
<else>
<if(rs.multiple)>
<cs.resultClass> <cs.nameUncapitalized>(
<else>
<cs.resultClass>Decorator <cs.nameUncapitalized>(
<endif>
<endif>
<else>
<cs.resultClass> <cs.nameUncapitalized>(
<endif>}>

<if(cs.parameters)>
    <cs.parameters:attribute_declaration_impl(attr=it); separator=",\n">
<else>
<if(cs.dynamic)>
    final Object[] parameters
<endif>
<endif>);
>>

custom_update_or_insert(cs, table) ::= <<
<!
 Writes the subtemplate for custom updates or inserts.
  @param cs the custom sql.
!>
/**
 * Custom sql \<i><cs.id>\</i>:\<br/>
 * \<b><cs.description>\</b>.
<if(cs.parameters)>
 <cs.parameters:attribute_javadoc(name=it.nameLowercased); separator="\n">
<else>
<if(cs.dynamic)> * @param params the query parameters.
<endif>
<endif>

 * @return the number of entities affected.
 * @throws DataAccessException if the operation fails.
 */
int <cs.nameUncapitalized>(
<if(cs.parameters)>
    <cs.parameters:attribute_declaration(attr=it); separator=",\n">
<else>
<if(cs.dynamic)>
    final Object[] parameters
<endif>
<endif>);

>>

custom_select_for_update(cs, table) ::= <<
<!
 Writes the code for a custom select for update.
 @param cs the custom sql.
 @param table the table.
!>
/**
 * Custom select for update \<i><cs.id>\</i>:\<br/>
 * \<b><cs.description>\</b>.
<if(cs.parameters)>
 <cs.parameters:attribute_javadoc(name=it.nameLowercased); separator="\n">
<else>
<if(cs.dynamic)> * @param params the query parameters.
<endif>
<endif>

 * @return the \<i><cs.resultClass>\</i> information retrieved.
 * @throws DataAccessException if the operation fails.
 */
<cs.result:{rs|<if(table.voDecorated)><if(rs.implicitProperties)>
<cs.resultClass> <cs.nameUncapitalized>(
<else>
<if(rs.multiple)>
<cs.resultClass> <cs.nameUncapitalized>(
<else>
<cs.resultClass>Decorator <cs.nameUncapitalized>(
<endif>
<endif>
<else>
<cs.resultClass> <cs.nameUncapitalized>(
<endif>}>
<if(cs.parameters)>
    <cs.parameters:attribute_declaration(attr=it); separator=",\n">
<else>
<if(cs.dynamic)>
    final Object[] parameters
<endif>
<endif>);

>>
