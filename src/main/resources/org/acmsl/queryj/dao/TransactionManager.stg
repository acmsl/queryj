//;-*- mode: antlr -*-
//
//                      QueryJ
//
//  Copyright (C) 2002-2007  ACM-SL
//                           chous@acm-sl.org
//
//  This library is free software; you can redistribute it and/or
//  modify it under the terms of the GNU General Public
//  License as published by the Free Software Foundation; either
//  version 2 of the License, or any later version.
//
//  This library is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
//  General Public License for more details.
//
//  You should have received a copy of the GNU General Public
//  License along with this library; if not, write to the Free Software
//  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
//
//  Thanks to ACM S.L. for distributing this library under the GPL license.
//  Contact info: jose.sanleandro@acm-sl.com
//  Postal Address: c/Playa de Lagoa, 1
//                  Urb. Valdecabanas
//                  Boadilla del monte
//                  28660 Madrid
//                  Spain
//
//***************************************************************************
//
// Filename: JdbcTemplate.stg
//
// Author: Jose San Leandro Armendariz
//
// Description: Generates TransactionManager sources.
//
// Version: $Revision$ ($Author$ at $Date$)
//
// $Id$
//
group JdbcTemplate;

source(input) ::= <<
<!
  Generates a TransactionManager source.
  @param input.copyright_years the copyright's years.
  @param input.package the package.
  @params class
!>
<if(input.header)>
<input.header>
<else>
<java_header(
  years=input.copyright_years,
  description=
  [
    first_line_description(),
    second_line_description()
  ],
  timestamp=input.timestamp)>
<endif>
// Generated by $Id$

<package_declaration(
  packageNames=
  [
    input.base_package_name,
    typeInitMap.baseDAOSubpackageName,
    typeInitMap.rdbSubpackageName
  ])>

/*
 * Importing Spring classes.
 */
import org.springframework.jdbc.datasource.DataSourceUtils;
import org.springframework.jdbc.datasource.DataSourceTransactionManager;
import org.springframework.jdbc.datasource.SingleConnectionDataSource;
import org.springframework.jdbc.datasource.TransactionAwareDataSourceProxy;
import org.springframework.transaction.PlatformTransactionManager;
import org.springframework.transaction.support.DefaultTransactionDefinition;
import org.springframework.transaction.support.DefaultTransactionStatus;
import org.springframework.transaction.TransactionDefinition;
import org.springframework.transaction.TransactionException;
import org.springframework.transaction.TransactionStatus;

/*
 * Importing some JDK classes.
 */
import java.sql.Connection;
import javax.sql.DataSource;

<class(input=input)>
>>

first_line_description() ::= <<
<!
  Generates a description for the generated file.
!>
Represents a transaction runtime environment. The one that
>>

second_line_description() ::= <<
<!
  Generates a description for the generated file.
!>
created it manages the transaction.
>>

class(input) ::= <<
<!
 Generates the class body.
 @param input.timestamp the timestamp.
 @param input.tr_name the table repository name.
!>
/**
 * <[
      first_line_description(),
      second_line_description()
    ]:{line |<line>}; separator="\n * ">
 * @author \<a href="http://www.acm-sl.org/queryj"\>QueryJ\</a\>
 * @version <"$">Revision: $ (<"$">Author: $ at <"$">Date: $)
 * @since <input.timestamp>
 */
public class <input.tr_name_capitalized>TransactionManager
{
    /**
     * Singleton implemented to avoid the double-checked locking.
     */
    private static class <input.tr_name_capitalized>TransactionManagerSingletonContainer
    {
        /**
         * The actual singleton.
         */
        public static final <input.tr_name_capitalized>TransactionManager SINGLETON =
            new <input.tr_name_capitalized>TransactionManager();
    }

    /**
     * Protected constructor to avoid accidental instantiation.
     * @param alias the table alias.
     */
    protected <input.tr_name_capitalized>TransactionManager() {};

    /**
     * Retrieves a \<code><input.tr_name_capitalized>TransactionManager\</code> instance.
     * @return such instance.
     */
    public static <input.tr_name_capitalized>TransactionManager getInstance()
    {
        return <input.tr_name_capitalized>TransactionManagerSingletonContainer.SINGLETON;
    }

    /**
     * Starts a transaction for given connection.
     * @param connection the connection.
     * @throws TransactionException if the transaction cannot be started for
     * some reason.
     * @precondition connection != null
     */
    public TransactionStatus begin(final Connection connection)
        throws  TransactionException
    {
        return
            begin(
                new SingleConnectionDataSource(connection, true));
    }

    /**
     * Starts a transaction for given data source.
     * @param dataSource the data source.
     * @param transactionDefinition the transaction definition.
     * @throws TransactionException if the transaction cannot be started for
     * some reason.
     * @precondition dataSource != null
     * @precondition transactionDefinition != null
     */
    public TransactionStatus begin(
        final Connection connection,
        final TransactionDefinition transactionDefinition)
      throws  TransactionException
    {
        return
            begin(
                new SingleConnectionDataSource(connection, true),
                transactionDefinition);
    }

    /**
     * Starts a transaction for given connection.
     * @param connection the connection.
     * @throws TransactionException if the transaction cannot be started for
     * some reason.
     * @precondition connection != null
     */
    public TransactionStatus begin(final DataSource dataSource)
        throws  TransactionException
    {
        return begin(dataSource, new DefaultTransactionDefinition());
    }

    /**
     * Starts a transaction for given data source.
     * @param dataSource the data source.
     * @param transactionDefinition the transaction definition.
     * @throws TransactionException if the transaction cannot be started for
     * some reason.
     * @precondition dataSource != null
     * @precondition transactionDefinition != null
     */
    public TransactionStatus begin(
        final DataSource dataSource,
        final TransactionDefinition transactionDefinition)
      throws  TransactionException
    {
        TransactionStatus result = null;

        DataSource t_DataSource = dataSource;

        if  (!(t_DataSource instanceof <input.tr_name_capitalized>ThreadAwareDataSourceWrapper))
        {
            t_DataSource =
                new <input.tr_name_capitalized>ThreadAwareDataSourceWrapper(t_DataSource);
        }

        PlatformTransactionManager t_<input.tr_name_capitalized>TransactionManager =
            createTransactionManager(t_DataSource, true);

        if  (t_<input.tr_name_capitalized>TransactionManager != null)
        {
            // Performs an implicit transaction start.
            result =
                t_<input.tr_name_capitalized>TransactionManager.getTransaction(
                    transactionDefinition);

            if  (   (result != null)
                 && (result instanceof DefaultTransactionStatus))
            {
                result =
                    new <input.tr_name_capitalized>DataSourceTransactionToken(
                        (DefaultTransactionStatus) result,
                        t_DataSource);
            }
        }

        return result;
    }

    /**
     * Creates a transaction manager correctly initialized.
     * @param connection the connection.
     * @return a \<code>PlatformTransactionManager\</code> instance.
     * @precondition connection != null
     */
    protected PlatformTransactionManager createTransactionManager(
        final Connection connection)
    {
        return
            createTransactionManager(
                new SingleConnectionDataSource(connection, true),
                true);
    }

    /**
     * Creates a transaction manager correctly initialized.
     * @param dataSource the data source.
     * @return a \<code>PlatformTransactionManager\</code> instance.
     * @precondition dataSource != null
     */
    protected PlatformTransactionManager createTransactionManager(
        final DataSource dataSource)
    {
        return createTransactionManager(dataSource, false);
    }

    /**
     * Creates a transaction manager correctly initialized.
     * @param dataSource the data source.
     * @return a \<code>PlatformTransactionManager\</code> instance.
     * @precondition dataSource != null
     */
    protected PlatformTransactionManager createTransactionManager(
        final DataSource dataSource, final boolean initialize)
    {
        PlatformTransactionManager result = null;

        if  (initialize)
        {
            // Enforcing connection is registered.
            DataSourceUtils.getConnection(dataSource, true);
        }

        result = new DataSourceTransactionManager(dataSource);

        return result;
    }

    /**
     * Commits a transaction identified by given transaction token.
     * @param trasactionToken the transaction token.
     * @param transactionManager the \<code>PlatformTransactionManager\</code>
     * instance.
     * @throws TransactionException if the transaction could not be committed
     * anyway.
     * @precondition transactionManager != null
     */
    public void commit(final TransactionStatus transactionToken)
      throws  TransactionException
    {
        if   (transactionToken instanceof <input.tr_name_capitalized>DataSourceTransactionToken)
        {
            commitTransaction((<input.tr_name_capitalized>DataSourceTransactionToken) transactionToken);
        }
        else
        {
            throw
                new <input.tr_name_capitalized>TransactionManagerException(
                    "Invalid transaction token: " + transactionToken);
        }
    }

    /**
     * Commits a transaction identified by given transaction token.
     * @param trasactionToken the transaction token.
     * @param transactionManager the \<code>PlatformTransactionManager\</code>
     * instance.
     * @throws TransactionException if the transaction could not be committed
     * anyway.
     * @precondition transactionManager != null
     */
    protected void commitTransaction(
        final <input.tr_name_capitalized>DataSourceTransactionToken transactionToken)
      throws  TransactionException
    {
        commitTransaction(
            transactionToken,
            createTransactionManager(
                transactionToken.getDataSource(), false));
    }

    /**
     * Commits a transaction identified by given transaction token.
     * @param trasactionToken the transaction token.
     * @param transactionManager the \<code>PlatformTransactionManager\</code>
     * instance.
     * @throws TransactionException if the transaction could not be committed
     * anyway.
     * @precondition transactionManager != null
     */
    protected void commitTransaction(
        final TransactionStatus transactionToken,
        final PlatformTransactionManager transactionManager)
      throws  TransactionException
    {
        transactionManager.commit(transactionToken);
    }

    /**
     * Rollbacks a transaction identified by given transaction token.
     * @param trasactionToken the transaction token.
     * @param transactionManager the \<code>PlatformTransactionManager\</code>
     * instance.
     * @throws TransactionException if the transaction could not be rollbackted
     * anyway.
     * @precondition transactionManager != null
     */
    public void rollback(final TransactionStatus transactionToken)
      throws  TransactionException
    {
        if   (transactionToken instanceof <input.tr_name_capitalized>DataSourceTransactionToken)
        {
            rollbackTransaction((<input.tr_name_capitalized>DataSourceTransactionToken) transactionToken);
        }
        else
        {
            throw
                new <input.tr_name_capitalized>TransactionManagerException(
                    "Invalid transaction token: " + transactionToken);
        }
    }

    /**
     * Rollbacks a transaction identified by given transaction token.
     * @param trasactionToken the transaction token.
     * @param transactionManager the \<code>PlatformTransactionManager\</code>
     * instance.
     * @throws TransactionException if the transaction could not be rollbackted
     * anyway.
     * @precondition transactionManager != null
     */
    protected void rollbackTransaction(
        final <input.tr_name_capitalized>DataSourceTransactionToken transactionToken)
      throws  TransactionException
    {
        rollbackTransaction(
            transactionToken,
            createTransactionManager(
                transactionToken.getDataSource(), false));
    }

    /**
     * Rollbacks a transaction identified by given transaction token.
     * @param trasactionToken the transaction token.
     * @param transactionManager the \<code>PlatformTransactionManager\</code>
     * instance.
     * @throws TransactionException if the transaction could not be rollbackted
     * anyway.
     * @precondition transactionManager != null
     */
    protected void rollbackTransaction(
        final TransactionStatus transactionToken,
        final PlatformTransactionManager transactionManager)
      throws  TransactionException
    {
        transactionManager.rollback(transactionToken);
    }

    /**
     * Inner transaction exception shortcut.
     * @author \<a href="http://www.acm-sl.org/queryj"\>QueryJ\</a\>
     */
    public static class <input.tr_name_capitalized>TransactionManagerException
        extends  TransactionException
    {
        /**
         * Creates a \<code><input.tr_name_capitalized>TransactionManagerException\</code>
         * with given message.
         * @param message the message.
         */
        public <input.tr_name_capitalized>TransactionManagerException(final String message)
        {
            super(message);
        }
    }
}
>>
