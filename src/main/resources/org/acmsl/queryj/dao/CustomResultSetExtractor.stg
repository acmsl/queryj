//;-*- mode: antlr -*-
//
//                      QueryJ
//
//  Copyright (C) 2002-2007  ACM-SL
//                           chous@acm-sl.org
//
//  This library is free software; you can redistribute it and/or
//  modify it under the terms of the GNU General Public
//  License as published by the Free Software Foundation; either
//  version 2 of the License, or any later version.
//
//  This library is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
//  General Public License for more details.
//
//  You should have received a copy of the GNU General Public
//  License along with this library; if not, write to the Free Software
//  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
//
//  Thanks to ACM S.L. for distributing this library under the GPL license.
//  Contact info: jose.sanleandro@acm-sl.com
//  Postal Address: c/Playa de Lagoa, 1
//                  Urb. Valdecabanas
//                  Boadilla del monte
//                  28660 Madrid
//                  Spain
//
//***************************************************************************
//
// Filename: CustomResultSetExtractor.stg
//
// Author: Jose San Leandro Armendariz
//
// Description: Defines the rules to generate CustomResultSetExtractors.
//
// Version: $Revision$ ($Author$ at $Date$)
//
// $Id$
//
group CustomResultSetExtractor;

source(input) ::= <<
<!
  Generates a CustomResultSetExtractor source file.
  @param input.copyright_years the copyright's years.
  @param input.table_name the table name.
  @param input.package the package.
  @params project_imports
  @params class
!>
<if(input.header)>
<input.header>
<else>
<java_header(
  years=input.copyright_years,
  description=
  [
    first_line_description(result=input.result),
    second_line_description(result=input.result)
  ],
  timestamp=input.timestamp)>
<endif>
// Generated by $Id$

<package_declaration(
  packageNames=
  [
    input.base_package_name,
    typeInitMap.baseDAOSubpackageName,
    typeInitMap.rdbSubpackageName,
    input.subpackage_name
  ])>

<project_imports(
  result=input.result,
  basePackageName=input.base_package_name,
  baseDAOSubpackageName=typeInitMap.baseDAOSubpackageName,
  rdbSubpackageName=typeInitMap.rdbSubpackageName,
  trName=input.tr_name_capitalized)>

/*
 * Importing Spring classes.
 */
import org.springframework.dao.DataAccessException;

/*
 * Importing some JDK classes.
 */
import java.math.BigDecimal;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Timestamp;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Collection;
import java.util.Date;

/*
 * Importing Jakarta Commons Logging classes
 */
import org.apache.commons.logging.LogFactory;

<class(result=input.result, input=input)>
>>

first_line_description(result) ::= <<
<!
  Generates the first line of the generated file description.
  @param result the result.
!>
Extracts <result.id> instances
>>

second_line_description(result) ::= <<
<!
  Generates the second line of the generated file description.
  @param result the result.
!>
 from java.sql.ResultSets.
>>

project_imports(result, basePackageName, baseDAOSubpackageName, rdbSubpackageName, trName) ::= <<
<!
 Generates the project imports.
 @param result the result instance.
 @param basePackageName the base package name.
 @param baseDAOSubpackageName the subpackage for base DAO classes.
 @param rdbSubpackageName the subpackage for rdb classes.
 @param trName the repository name.
!>
/*
 * Importing project classes.
 */
<if(!result.implicitProperty)>
import <result.classValue>;
import <result.classValue>ValueObjectFactory;
<endif>
import <basePackageName>.<baseDAOSubpackageName>.<rdbSubpackageName>.<trName>DAOListener;
import <basePackageName>.<baseDAOSubpackageName>.<rdbSubpackageName>.<trName>ResultSetExtractor;
>>

class(result, input) ::= <<
<!
 Generates the class body.
 @param result the result.
 @param input the input.
!>
/**
 * <[
      first_line_description(result=result),
      second_line_description(result=result)
    ]:{line |<line>}; separator="\n * ")>
 * @author \<a href="http://www.acm-sl.org/queryj"\>QueryJ\</a\>
 * @version <"$">Revision: $ (<"$">Author: $ at <"$">Date: $)
 * @since <input.timestamp>
 */
public class <result.idCapitalized>Extractor
    extends  <input.tr_name_capitalized>ResultSetExtractor
{
    // \<extract data\>
    /**
     * Extracts \<i><result.id>\</i> information from given result set.
     * @param resultSet the result set.
     * @param daoListener the \<code><input.tr_name_capitalized>DAOListener\</code> instance.
<if(result.multiple)>
     * @return the \<i><input.className>\</i> instances or \<code>null\</code>
     * if the operation returned no data.
<else>
     * @return the \<i><input.className>\</i> instance or \<code>null\</code>
     * if the operation returned no data.
<endif>

     * @throws SQLException intercepted by \<i>Spring\</i>.
     * @throws DataAccessException with information about any
     * custom exception.
     <precondition_notnull("resultSet")>
     */
    public Object extractData(
        final ResultSet resultSet,
        final <input.tr_name_capitalized>DAOListener daoListener)
      throws  SQLException,
              DataAccessException
    {
<if(!result.implicitProperty)>
        return
            extractData(
                resultSet,
                daoListener,
                <result.classValue>ValueObjectFactory.getInstance());
    }

    /**
     * Extracts \<i><result.id>\</i> information from given result set.
     * @param resultSet the result set.
     * @param daoListener the \<code><input.tr_name_capitalized>DAOListener\</code> instance.
<if(!result.implicitProperty)>
     * @param factory the value object factory.
<endif>

<if(result.multiple)>
     * @return the \<i><input.className>\</i> instances or \<code>null\</code>
     * if the operation returned no data.
<else>
     * @return the \<i><input.className>\</i> instance or \<code>null\</code>
     * if the operation returned no data.
<endif>
     * if the operation returned no data.
     * @throws SQLException intercepted by \<i>Spring\</i>.
     * @throws DataAccessException with information about any
     * custom exception.
     <precondition_notnull("resultSet")>
     */
    protected Object extractData(
        final ResultSet resultSet,
        final <input.tr_name_capitalized>DAOListener daoListener,
        final <result.classValue>ValueObjectFactory factory)
      throws  SQLException,
              DataAccessException
    {
<endif>


<if(result.multiple)>
        Collection result = new ArrayList();
<else>
<if(result.implicitProperty)>
        <implicit_attribute_declaration(result=result, attr=result.implicitProperty)>
<else>
        <result.classValue> result = null;
<endif>
<endif>



<if(result.multiple)>
        while  (resultSet.next())
<else>
        if  (resultSet.next())
<endif>

        {
            if  (daoListener != null)
            {
                daoListener.resultSetMovedForward(this);
            }

            <result.properties:nullable_attribute_extraction(
              attr=it, input=input)>
            <result.lobProperties:special_attribute_extraction(
              attr=it, input=input)>

<if(result.multiple)>
            result.add(
<else>
            result =
<endif>

<if(result.implicitProperty)>
                <implicit_nullable_attribute_extraction(result=result, attr=result.implicitProperty)>
<else>
                factory.createValueObject(
                    <result.properties:attribute_extraction(
                      attr=it, input=input); separator=",\n">)<if(result.multiple)>)<endif>;
<endif>

        }

        if  (daoListener != null)
        {
            daoListener.resultSetClosed(this);
        }


<if(result.implicitProperty)>
        <implicit_attribute_result(attr=result.implicitProperty)>
<else>
        return result;
<endif>

    }
}
>>

implicit_attribute_result(attr) ::= <<
<!
 Prints the correct return clause for the implicit attribute.
 @param attr the implicit attribute.
 !>
<if(attr.nullable)>
return result;
<else>
return new <attr.actualObjectType>(result);
<endif>

>>

implicit_nullable_attribute_extraction(result, attr) ::= <<
<!
 Generates the code to extract implicit nullable attributes.
 @param result the sql result.
 @param attr the implicit attribute.
 !>
<if(attr.nullable)>
new <result.classValue>(
<endif>
resultSet.get<attr.actualObjectType>(<attr.index>)<if(attr.nullable)>)<endif><if(result.multiple)>)<endif>;
>>

nullable_attribute_extraction(attr, input) ::= <<
<!
 Generates the code to extract nullable attributes.
 @param attr the attribute.
 @param input the input.
!>
<if(input.clobHandling)>
<indirect_template(
  name=input.clobHandling+"_nullable_attribute_extraction", input=attr)>
<else>
<default_nullable_attribute_extraction(attr=attr, input=input)>
<endif>

>>

default_nullable_attribute_extraction(attr, input) ::= <<
<!
 Generates the code to extract nullable attributes.
 @param attr the attribute.
 @param input the input.
!>
<if(attr.boolean)>
<Boolean_nullable_attribute_extraction(attr=attr)>
<else>
<if(attr.allowsNull)>
<if(attr.timestamp)>
Timestamp t_<attr.columnNameNormalizedCapitalized>AsTimestamp =
<else>
<attr.objectType> t_<attr.columnNameNormalizedCapitalized>As<attr.objectType> =
<endif>

<if(attr.primitive)>
<if(input.clobhandling)>
    <object_nullable_clobhandling_attribute_extractor(attr=attr)>
<else>
    <primitive_nullable_attribute_extractor(attr=attr)>
<endif>
<else>
<if(input.clobhandling)>
    <indirect_template(name=attr.objectType+"_nullable_clobhandling_attribute_extractor", input=attr)>
<else>
    <indirect_template(name=attr.objectType+"_nullable_attribute_extractor", input=attr)>
<endif>
<endif>

if  (resultSet.wasNull())
{
<if(attr.timestamp)>
    t_<attr.columnNameNormalizedCapitalized>AsTimestamp = null;
<else>
    t_<attr.columnNameNormalizedCapitalized>As<attr.objectType> = null;
<endif>

}

<endif>
<endif>

>>

Boolean_nullable_attribute_extraction(attr) ::= <<
<!
  Generates the code to extract a primitive nullable attribute.
!>
<if(attr.allowsNull)>
Boolean t_<attr.columnNameNormalizedCapitalized>AsBoolean = null;
<else>
boolean t_<attr.columnNameNormalizedCapitalized>AsBoolean = false;
<endif>

<if(attr.allowsNull)>
<attr.actualObjectType> t_<attr.nameLowercased> =
    new <attr.actualObjectType>(
        resultSet.get<attr.actualObjectType>(
            "<attr.columnName>"));

if  (!resultSet.wasNull())
{
    t_<attr.nameLowercased> = null;
}
<else>
<attr.actualJavaType> t_<attr.nameLowercased> =
    resultSet.get<attr.actualObjectType>(
        "<attr.columnName>");
<endif>


<if(attr.primitive)>
if  (t_<attr.nameLowercased> == <attr.booleanTrue>)
<else>
if  (("" + t_<attr.nameLowercased>).equals("" + <attr.booleanTrue>))
<endif>


{
<if(attr.allowsNull)>
    t_<attr.columnNameNormalizedCapitalized>AsBoolean = Boolean.TRUE;

}
else
{
    t_<attr.columnNameNormalizedCapitalized>AsBoolean = Boolean.FALSE;
<else>
    t_<attr.columnNameNormalizedCapitalized>AsBoolean = true;
<endif>

}


>>

String_nullable_attribute_extractor(input) ::= <<
<!
  Generates the code to extract a String nullable attribute.
!>
<object_nullable_attribute_extractor(attr=input)>
>>

String_nullable_clobhandling_attribute_extractor(input) ::= <<
<!
  Generates the code to extract a String nullable attribute.
!>
<object_nullable_clobhandling_attribute_extractor(attr=input)>
>>

Date_nullable_attribute_extractor(input) ::= <<
<!
  Generates the code to extract a Date nullable attribute.
!>
<object_nullable_clobhandling_attribute_extractor(attr=input)>
>>

Date_nullable_clobhandling_attribute_extractor(input) ::= <<
<!
  Generates the code to extract a Date nullable attribute.
!>
<object_nullable_clobhandling_attribute_extractor(attr=input)>
>>

Timestamp_nullable_attribute_extractor(input) ::= <<
<!
  Generates the code to extract a Timestamp nullable attribute.
!>
<object_nullable_clobhandling_attribute_extractor(attr=input)>
>>

Timestamp_nullable_clobhandling_attribute_extractor(input) ::= <<
<!
  Generates the code to extract a Timestamp nullable attribute.
!>
<object_nullable_clobhandling_attribute_extractor(attr=input)>
>>

BigDecimal_nullable_attribute_extractor(input) ::= <<
<!
  Generates the code to extract a BigDecimal nullable attribute.
!>
<object_nullable_attribute_extractor(attr=input)>
>>

BigDecimal_nullable_clobhandling_attribute_extractor(input) ::= <<
<!
  Generates the code to extract a BigDecimal nullable attribute.
!>
<object_nullable_clobhandling_attribute_extractor(attr=input)>
>>

primitive_nullable_attribute_extractor(attr) ::= <<
<!
  Generates the code to extract a primitive nullable attribute.
!>
new <attr.objectType>(
<if(attr.numberSmallerThanInt)>
    resultSet.getInt(
<else>
    resultSet.get<attr.objectType>(
<endif>

        "<attr.columnName>"));
>>

primitive_nullable_clobhandling_attribute_extractor(attr) ::= <<
<!
  Generates the code to extract a primitive nullable attribute.
!>
new <attr.objectType>(
<if(attr.numberSmallerThanInt)>
    resultSet.getInt("<attr.columnName>"));
<else>
    resultSet.get<attr.objectType>("<attr.columnName>"));
<endif>

>>

object_nullable_attribute_extractor(attr) ::= <<
<!
  Generates the code to extract a non-primitive nullable attribute.
!>
<if(attr.timestamp)>
resultSet.getTimestamp("<attr.nameUppercased>");
<else>
<if(attr.numberSmallerThanInt)>
resultSet.getInt(
<else>
resultSet.get<attr.objectType>(
<endif>
<endif>

    "<attr.columnName>");
>>

object_nullable_clobhandling_attribute_extractor(attr) ::= <<
<!
  Generates the code to extract a non-primitive nullable attribute.
!>
<if(attr.timestamp)>
resultSet.getTimestamp("<attr.columnName>");
<else>
<if(attr.numberSmallerThanInt)>
resultSet.getInt("<attr.columnName>");
<else>
// <attr> : object_nullable_clobhandling_attribute_extractor
resultSet.get<attr.objectType>("<attr.columnName>");
<endif>
<endif>


>>

attribute_extraction(attr, input) ::= <<
<!
 Generates the code to extract attributes.
 @param attr the attribute.
 @param input the input.
!>
<if(input.clobHandling)>
<indirect_template(
  name=input.clobHandling+"_attribute_extraction", input=attr)>
<else>
<default_attribute_extraction(attr)>
<endif>

>>

default_attribute_extraction(attr) ::= <<
<!
 Generates the member declaration for a concrete attribute.
 @param attr the attribute.
!>
//<attr.columnName>
<if(attr.allowsNull)>
<if(attr.timestamp)>
t_<attr.columnNameNormalizedCapitalized>AsTimestamp
<else>
t_<attr.columnNameNormalizedCapitalized>As<attr.objectType>
<endif>
<else>
<if(attr.numberSmallerThanInt)>
resultSet.getInt("<attr.columnName>")
<else>
<if(attr.timestamp)>
resultSet.getTimestamp("<attr.columnName>")
<else>
<if(attr.boolean)>
t_<attr.columnNameNormalizedCapitalized>AsBoolean
<else>
// <attr> : default_attribute_extraction
<if(attr.blob)>
// TODO
null
<else>
resultSet.get<attr.objectType>("<attr.columnName>")
<endif>
<endif>
<endif>
<endif>
<endif>

>>

default_clobhandling_attribute_extraction(attr) ::= <<
<!
 Generates the member declaration for a concrete attribute.
 @param attr the attribute.
!>
<if(attr.timestamp)>
resultSet.getTimestamp("<attr.nameUppercased>")
<else>
<if(attr.allowsNull)>
t_<attr.nameCapitalized>As<attr.objectType>
<else>
<if(attr.numberSmallerThanInt)>
resultSet.getInt("<attr.nameUppercased>")
<else>
// <attr> : default_clobhandling_attribute_extraction
resultSet.get<attr.objectType>("<attr.nameUppercased>")
<endif>
<endif>
<endif>



>>

special_attribute_extraction(attr, input) ::= <<
<!
 Generates the code to extract special attributes.
 @param attr the attribute.
 @param input the input.
!>
<if(input.clobHandling)>
<indirect_template(
  name=input.clobHandling+"_special_attribute_extraction", input=attr)>
<endif>
>>

oracle_nullable_attribute_extraction(input) ::= <<
<!
 Generates the code to extract nullable attributes for Oracle.
 @param input the attribute.
!>
<oracle8_nullable_attribute_extraction(input=input)>
>>

oracle8_nullable_attribute_extraction(input) ::= <<
<!
 Generates the code to extract nullable attributes for Oracle8.
 @param input the attribute.
!>
<if(!input.clob)>
<default_nullable_attribute_extraction(attr=input)>
<endif>
>>

oracle_special_attribute_extraction(input) ::= <<
<!
 Generates the code to extract special attributes for Oracle.
 @param input the attribute.
!>
<oracle8_special_attribute_extraction(input=input)>
>>

oracle8_special_attribute_extraction(input) ::= <<
<!
 Generates the code to extract special attributes for Oracle8.
 @param input the attribute.
!>
<if(input.clob)>
oracle.sql.CLOB t_<input.columnNameNormalizedCapitalized> =
    (oracle.sql.CLOB) resultSet.getClob("<attr.columnName>");

if  (selectForUpdateMode)
{
    t_<input.columnNameNormalizedCapitalized>.putString(1, <input.nameLowercased>);
}
<else>
if  (resultSet.wasNull())
{
    t_<input.columnNameNormalizedCapitalized>As<input.objectType> = null;
}
<endif>
>>

oracle_attribute_extraction(input) ::= <<
<!
 Generates the code to extract the attributes for Oracle.
 @param input the attribute.
!>
<oracle8_attribute_extraction(input=input)>
>>

oracle8_attribute_extraction(input) ::= <<
<!
 Generates the code to extract the attributes for Oracle8.
 @param input the attribute.
!>
<if(input.clob)>
(selectForUpdateMode)
?  <input.nameLowercased>
:  t_<input.columnNameNormalizedCapitalized>.getSubString(1, (int) t_<input.columnNameNormalizedCapitalized>.length())
<else>
<default_clobhandling_attribute_extraction(attr=input)>
<endif>
>>
