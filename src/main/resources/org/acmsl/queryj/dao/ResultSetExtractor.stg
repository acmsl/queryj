//;-*- mode: antlr -*-
//
//                      QueryJ
//
//  Copyright (C) 2002-2007  ACM-SL
//                           chous@acm-sl.org
//
//  This library is free software; you can redistribute it and/or
//  modify it under the terms of the GNU General Public
//  License as published by the Free Software Foundation; either
//  version 2 of the License, or any later version.
//
//  This library is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
//  General Public License for more details.
//
//  You should have received a copy of the GNU General Public
//  License along with this library; if not, write to the Free Software
//  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
//
//  Thanks to ACM S.L. for distributing this library under the GPL license.
//  Contact info: jose.sanleandro@acm-sl.com
//  Postal Address: c/Playa de Lagoa, 1
//                  Urb. Valdecabanas
//                  Boadilla del monte
//                  28660 Madrid
//                  Spain
//
//***************************************************************************
//
// Filename: ResultSetExtractor.stg
//
// Author: Jose San Leandro Armendariz
//
// Description: Defines the rules to generate ResultSetExtractors.
//
// Version: $Revision: 1905 $ ($Author: chous $ at $Date: 2007-08-02 11:20:27 +0200 (Thu, 02 Aug 2007) $)
//
// $Id: ResultSetExtractor.stg 1905 2007-08-02 09:20:27Z chous $
//
group ResultSetExtractor;

source(input) ::= <<
<!
  Generates a ResultSetExtractor source file.
  @param input.copyright_years the copyright's years.
  @param input.table_name the table name.
  @param input.package the package.
  @params project_imports
  @params class
!>
<if(input.header)>
<input.header>
<else>
<java_header(
  years=input.copyright_years,
  description=
  [
    first_line_description(tableName=input.table_name)
  ],
  timestamp=input.timestamp)>
<endif>
// Generated by $Id: ResultSetExtractor.stg 1905 2007-08-02 09:20:27Z chous $

<package_declaration(
  packageNames=
  [
    input.base_package_name,
    typeInitMap.baseDAOSubpackageName,
    typeInitMap.rdbSubpackageName,
    input.subpackage_name,
    input.table_name_normalized_lowercased
  ])>

<project_imports(
  basePackageName=input.base_package_name,
  voSubpackageName=typeInitMap.voSubpackageName,
  voName=input.vo_name,
  baseDAOSubpackageName=typeInitMap.baseDAOSubpackageName,
  rdbSubpackageName=typeInitMap.rdbSubpackageName,
  trName=input.tr_name_capitalized)>

/*
 * Importing Spring classes.
 */
import org.springframework.dao.DataAccessException;

/*
 * Importing some JDK classes.
 */
import java.math.BigDecimal;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Timestamp;
import java.util.Calendar;
import java.util.Date;

/*
 * Importing Jakarta Commons Logging classes
 */
import org.apache.commons.logging.LogFactory;

<class(input=input, table=input.table)>
>>

first_line_description(tableName) ::= <<
<!
  Generates the first line of the generated file description.
  @param tableName the table name.
!>
Extracts <tableName> entities from ResultSets.
>>

project_imports(
  basePackageName,
  voSubpackageName,
  voName,
  baseDAOSubpackageName,
  rdbSubpackageName,
  trName) ::= <<
<!
 Generates the project imports.
 @param basePackageName the base package name.
 @param voSubpackageName the value-object subpackage name.
 @param voName the value-object name.
 @param baseDAOSubpackageName the base DAO subpackage name.
 @param rdbSubpackageName the rdb subpackage name.
 @param trName the table repository name.
!>
/*
 * Importing project classes.
 */
import <basePackageName>.<voSubpackageName>.<voName>;
import <basePackageName>.<voSubpackageName>.<voName>ValueObjectFactory;
import <basePackageName>.<baseDAOSubpackageName>.<rdbSubpackageName>.<trName>DAOListener;
import <basePackageName>.<baseDAOSubpackageName>.<rdbSubpackageName>.<trName>ResultSetExtractor;
>>

class(input, table) ::= <<
<!
 Generates the class body.
 @param input the input.
 @param table the table.
!>
<classImpl(input=input, table=table, parent=table.parentTable)>
>>

classImpl(input, table, parent) ::= <<
<!
 Generates the class body.
 @param input the input.
 @param table the table.
 @param parent the parent table.
!>
/**
 * <[
      first_line_description(tableName=input.table_name)
    ]:{line |<line>}; separator="\n * ">
 * @author \<a href="http://www.acm-sl.org/queryj"\>QueryJ\</a\>
 * @version <"$">Revision: $ (<"$">Author: $ at <"$">Date: $)
 * @since <input.timestamp>
 */
public class <input.vo_name>ResultSetExtractor
    extends     <input.tr_name_capitalized>ResultSetExtractor
    implements  ResultSetExtractor,
<!                <input.tr_name_capitalized>TableRepository !>
{
<if(input.clobHandling)>
    <indirect_template(name=input.clobHandling+"Extractor", input=input, extra1=table, extra2=parent)>
<else>
    <defaultExtractorImpl(input=input, table=table, parent=parent)>
<endif>

}
>>

defaultExtractor(input, extra1, extra2) ::= <<
<!
 Generates the default logic for the extractor.
 @param input the input.
 @param extra1 the table.
 @param extra2 the parent.
!>
<defaultExtractorImpl(input=input, table=extra1, parent=extra2)>
>>

defaultExtractorImpl(input, table, parent) ::= <<
<!
 Generates the default logic for the extractor.
 @param input the input.
 @param table the table.
 @param parent the parent.
!>
/**
 * Constructs a new \<code><input.vo_name>ResultSetExtractor\</code>.
 * @param daoListener the dao listener.
 */
public <input.vo_name>ResultSetExtractor(
    final <input.tr_name_capitalized>DAOListener daoListener)
{
    super(daoListener);
}

/**
 * Extracts \<i><input.vo_name>\</i> information from given result set.
 * @param resultSet the result set.
     * @param daoListener the \<code><input.tr_name_capitalized>DAOListener\</code> instance.
 * @return the \<code><input.vo_name>\</code> or
 * \<code>null\</code> if the operation returned no data.
 * @throws SQLException intercepted by \<i>Spring\</i\>.
 * @throws DataAccessException with information about any
 * custom exception.
 <precondition_notnull("resultSet")>
 */
protected Object extractData(
    final ResultSet resultSet,
    final <input.tr_name_capitalized>DAOListener daoListener)
  throws  SQLException,
          DataAccessException
{
    return
        extractData(
            resultSet,
            daoListener,
            <input.vo_name>ValueObjectFactory.getInstance());
}

/**
 * Extracts \<i><input.vo_name>\</i> information from given result set.
 * @param resultSet the result set.
     * @param daoListener the \<code><input.tr_name_capitalized>DAOListener\</code> instance.
 * @return the \<code><input.vo_name>\</code> or
 * \<code>null\</code> if the operation returned no data.
 * @throws SQLException intercepted by \<i>Spring\</i\>.
 * @throws DataAccessException with information about any
 * custom exception.
 <precondition_notnull("resultSet")>
 */
protected Object extractData(
    final ResultSet resultSet,
    final <input.tr_name_capitalized>DAOListener daoListener,
    final <input.vo_name>ValueObjectFactory factory)
  throws  SQLException,
          DataAccessException
{
    <input.vo_name> result = null;

    if  (resultSet.next())
    {
        if  (daoListener != null)
        {
            daoListener.resultSetMovedForward(this);
        }

<if(parent)>
        <table.allParentAndNonParentAttributes:nullable_attribute_extraction(
          attr=it, input=input)>
<else>
        <table.attributes:nullable_attribute_extraction(
          attr=it, input=input)>
<endif>


        result =
            factory.create<input.vo_name>ValueObject(
<if(parent)>
                <table.allParentAndNonParentAttributes:attribute_extraction(attr=it);
                  separator=",\n">);
<else>
                <table.attributes:attribute_extraction(attr=it);
                  separator=",\n">);
<endif>

    }

    if  (daoListener != null)
    {
        daoListener.resultSetClosed(this);
    }

    return result;
}
>>

oracleExtractor(input, extra1, extra2) ::= <<
<!
 Generates the constructor needed by Oracle8 LOB management.
 @param input the input.
 @param extra1 the table.
 @param extra2 the parent.
!>
<oracleExtractorImpl(input=input, table=extra1, parent=extra2)>
>>

oracleExtractorImpl(input, table, parent) ::= <<
<!
 Generates the constructor needed by Oracle8 LOB management.
 @param input the input.
 @param table the table.
 @param parent the parent.
!>
<oracle8ExtractorImpl(input=input, table=table, parent=parent)>
>>

oracle8Extractor(input, extra1, extra2) ::= <<
<!
 Generates the constructor needed by Oracle8 LOB management.
 @param input the input.
 @param extra1 the table.
 @param extra2 the parent.
!>
<oracle8ExtractorImpl(input=input, table=extra1, parent=extra2)>
>>

oracle8ExtractorImpl(input, table, parent) ::= <<
<!
 Generates the constructor needed by Oracle8 LOB management.
 @param input the input.
 @param table the table.
 @param parent the parent.
!>
<input.lob_attributes:attribute_class_declaration(attr=it);
  separator="\n\n">

/**
 * The \<i>select for update\</i> mode.
 */
private boolean m__bSelectForUpdateMode;

/**
 * Creates a Oracle-based \<code>ResultSetExtractor\</code>
 * to extract <input.vo_name> information, managing LOB stuff.
 * @param selectForUpdateMode whether the result set is the result of
 * the \<i>select for update\</code> (required to perform some operations
 * such as \<b>insert\</b>s), or not.
 * @param daoListener the {@link <input.tr_name_capitalized>DAOListener} instance.
 */
public <input.vo_name>ResultSetExtractor(
    final boolean selectForUpdateMode,
    final <input.tr_name_capitalized>DAOListener daoListener)
{
    super(daoListener);
    immutableSetSelectForUpdateMode(selectForUpdateMode);
}

/**
 * Creates a Oracle-based \<code>ResultSetExtractor\</code>
 * to extract <input.vo_name> information, managing LOB stuff.
 <input.lob_attributes:attribute_javadoc_method_declaration(attr=it);
   separator=",\n">
 * @param selectForUpdateMode whether the result set is the result of
 * the \<i>select for update\</code> (required to perform some operations
 * such as \<b>insert\</b>s), or not.
 * @param daoListener the {@link <input.tr_name_capitalized>DAOListener} instance.
 */
public <input.vo_name>ResultSetExtractor(
    <input.lob_attributes:attribute_method_declaration(attr=it);
      separator=",\n">,
    final boolean selectForUpdateMode,
    final <input.tr_name_capitalized>DAOListener daoListener)
{
    this(selectForUpdateMode, daoListener);
    <input.lob_attributes:attribute_setter_call(attr=it); separator="\n">
}

/**
 * Creates a Oracle-based \<code>ResultSetExtractor\</code>
 * to extract <input.vo_name> information, managing LOB stuff.
 * @param daoListener the \<code><input.tr_name_capitalized>DAOListener\</code> instance.
 */
public <input.vo_name>ResultSetExtractor(
    final <input.tr_name_capitalized>DAOListener daoListener)
{
    this(false, daoListener);
}

<input.lob_attributes:attribute_accessors(attr=it); separator="\n\n">

/**
 * Specifies whether the extractor is retrieving results of a
 * \<i>select for update\</i> or not.
 * @param selectForUpdate such behaviour.
 */
protected final void immutableSetSelectForUpdateMode(
    final boolean selectForUpdateMode)
{
    m__bSelectForUpdateMode = selectForUpdateMode;
}

/**
 * Specifies whether the extractor is retrieving results of a
 * \<i>select for update\</i> or not.
 * @param selectForUpdate such behaviour.
 */
protected void setSelectForUpdateMode(final boolean selectForUpdateMode)
{
    immutableSetSelectForUpdateMode(selectForUpdateMode);
}

/**
 * Retrieves whether the extractor is retrieving results of a
 * \<i>select for update\</i> or not.
 * @return such behaviour.
 */
public boolean getSelectForUpdateMode()
{
    return m__bSelectForUpdateMode;
}

/**
 * Extracts \<i><input.vo_name>\</i> information from given result set.
 * @param resultSet the result set.
 * @param daoListener the \<code><input.tr_name_capitalized>DAOListener\</code> instance.
 * @return the \<code><input.vo_name>\</code> or
 * \<code>null\</code> if the operation returned no data.
 * @throws SQLException intercepted by \<i>Spring\</i\>.
 * @throws DataAccessException with information about any
 * custom exception.
 */
protected Object extractData(
    final ResultSet resultSet,
    final <input.tr_name_capitalized>DAOListener daoListener)
  throws  SQLException,
          DataAccessException
{
    return
        extractData(
            resultSet,
            daoListener,
            <input.lob_attributes:{get<it.nameCapitalized>()};
              separator=",\n">,
            getSelectForUpdateMode(),
            <input.vo_name>ValueObjectFactory.getInstance());
}

/**
 * Extracts \<i><input.vo_name>\</i> information from given result set.
 * @param resultSet the result set.
 * @param daoListener the \<code><input.tr_name_capitalized>DAOListener\</code> instance.
 <input.lob_attributes:attribute_javadoc_method_declaration(attr=it);
   separator="\n">
 * @param selectForUpdate whether the operation is a
 * \<i>select for update\</i>.
 * @param factory the \<code><input.vo_name>ValueObjectFactory\</code>
 * instance.
 * @return the \<code><input.vo_name>\</code> or
 * \<code>null\</code> if the operation returned no data.
 * @throws SQLException intercepted by \<i>Spring\</i\>.
 * @throws DataAccessException with information about any
 * custom exception.
 <precondition_notnull("resultSet")>
 <precondition_notnull("factory")>
 */
protected Object extractData(
    final ResultSet resultSet,
    final <input.tr_name_capitalized>DAOListener daoListener,
    <input.lob_attributes:attribute_method_declaration(attr=it);
      separator=",\n">,
    final boolean selectForUpdateMode,
    final <input.vo_name>ValueObjectFactory factory)
  throws  SQLException,
          DataAccessException
{
    <input.vo_name> result = null;

    if  (resultSet.next())
    {
        if  (daoListener != null)
        {
            daoListener.resultSetMovedForward(this);
        }

<if(parent)>
        <table.allParentAndNonParentAttributes:nullable_attribute_extraction(
          attr=it, input=input)>
<else>
        <table.attributes:nullable_attribute_extraction(
          attr=it, input=input)>
<endif>

        <input.lob_attributes:special_attribute_extraction(
          attr=it, input=input)>

        result =
            factory.create<input.vo_name>ValueObject(
<if(parent)>
                <table.allParentAndNonParentAttributes:attribute_extraction(
                  attr=it, input=input); separator=",\n">);
<else>
                <table.attributes:attribute_extraction(
                  attr=it, input=input); separator=",\n">);
<endif>

    }

    if  (daoListener != null)
    {
        daoListener.resultSetClosed(this);
    }

    return result;
}

>>

attribute_class_declaration(attr) ::= <<
<!
 Generates the attribute class declaration.
 @param attr the attribute.
!>
/**
 * The <attr.name> attribute.
 */
private <attr.objectType> m__<attr.nameCapitalized>;
>>

attribute_javadoc_method_declaration(attr) ::= <<
<!
 Generates the attribute Javadoc method declaration.
 @param attr the attribute.
!>
* @param <attr.nameLowercased> the \<i><attr.name>\</i> information.
>>

attribute_method_declaration(attr) ::= <<
<!
 Generates the attribute method declaration.
 @param attr the attribute.
!>
final <attr.objectType> <attr.nameLowercased>
>>

attribute_setter_call(attr) ::= <<
<!
 Generates the attribute setter call.
 @param attr the attribute.
!>
immutableSet<attr.nameCapitalized>(<attr.nameLowercased>);
>>

attribute_accessors(attr) ::= <<
<!
 Generates the attribute accessors.
 @param attr the attribute.
!>
/**
 * Specifies the \<i><attr.name>\</i> information.
 * @param <attr.nameLowercased> such value.
 */
protected final void immutableSet<attr.nameCapitalized>(
    final <attr.objectType> <attr.nameLowercased>)
{
    m__<attr.nameCapitalized> = <attr.nameLowercased>;
}

/**
 * Specifies the \<i><attr.name>\</i> information.
 * @param <attr.nameLowercased> such value.
 */
protected void set<attr.nameCapitalized>(
    final <attr.objectType> <attr.nameLowercased>)
{
    immutableSet<attr.nameCapitalized>(<attr.nameLowercased>);
}

/**
 * Specifies the \<i><attr.name>\</i> information.
 * @param <attr.nameLowercased> such value.
 */
public <attr.objectType> get<attr.nameCapitalized>()
{
    return m__<attr.nameCapitalized>;
}
>>

nullable_attribute_extraction(attr, input) ::= <<
<!
 Generates the code to extract nullable attributes.
 @param attr the attribute.
 @param input the input.
!>
<if(input.clobHandling)>
<indirect_template(
  name=input.clobHandling+"_nullable_attribute_extraction", input=attr)>
<else>
<default_nullable_attribute_extraction(attr=attr, input=input)>
<endif>
>>

default_nullable_attribute_extraction(attr, input) ::= <<
<!
 Generates the code to extract nullable attributes.
 @param attr the attribute.
 @param input the input.
!>
<if(attr.allowsNull)>
<if(attr.timestamp)>
Timestamp t_<attr.nameCapitalized>AsTimestamp =
<else>
<attr.objectType> t_<attr.nameCapitalized>As<attr.objectType> =
<endif>

<if(attr.primitive)>
<if(input.clobhandling)>
    <object_nullable_clobhandling_attribute_extractor(attr=attr)>
<else>
    <primitive_nullable_attribute_extractor(attr=attr)>
<endif>
<else>
<if(input.clobhandling)>
    <indirect_template(name=attr.objectType+"_nullable_clobhandling_attribute_extractor", input=attr)>
<else>
    <indirect_template(name=attr.objectType+"_nullable_attribute_extractor", input=attr)>
<endif>
<endif>

if  (resultSet.wasNull())
{
<if(attr.timestamp)>
    t_<attr.nameCapitalized>AsTimestamp = null;
<else>
    t_<attr.nameCapitalized>As<attr.objectType> = null;
<endif>

}

<endif>
>>

String_nullable_attribute_extractor(input) ::= <<
<!
  Generates the code to extract a String nullable attribute.
!>
<object_nullable_attribute_extractor(attr=input)>
>>

String_nullable_clobhandling_attribute_extractor(input) ::= <<
<!
  Generates the code to extract a String nullable attribute.
!>
<object_nullable_clobhandling_attribute_extractor(attr=input)>
>>

Date_nullable_attribute_extractor(input) ::= <<
<!
  Generates the code to extract a Date nullable attribute.
!>
<object_nullable_clobhandling_attribute_extractor(attr=input)>
>>

Date_nullable_clobhandling_attribute_extractor(input) ::= <<
<!
  Generates the code to extract a Date nullable attribute.
!>
<object_nullable_clobhandling_attribute_extractor(attr=input)>
>>

Timestamp_nullable_attribute_extractor(input) ::= <<
<!
  Generates the code to extract a Timestamp nullable attribute.
!>
<object_nullable_clobhandling_attribute_extractor(attr=input)>
>>

Timestamp_nullable_clobhandling_attribute_extractor(input) ::= <<
<!
  Generates the code to extract a Timestamp nullable attribute.
!>
<object_nullable_clobhandling_attribute_extractor(attr=input)>
>>

BigDecimal_nullable_attribute_extractor(input) ::= <<
<!
  Generates the code to extract a BigDecimal nullable attribute.
!>
<object_nullable_attribute_extractor(attr=input)>
>>

BigDecimal_nullable_clobhandling_attribute_extractor(input) ::= <<
<!
  Generates the code to extract a BigDecimal nullable attribute.
!>
<object_nullable_clobhandling_attribute_extractor(attr=input)>
>>

primitive_nullable_attribute_extractor(attr) ::= <<
<!
  Generates the code to extract a primitive nullable attribute.
!>
new <attr.objectType>(
<if(attr.numberSmallerThanInt)>
    resultSet.getInt(
<else>
    resultSet.get<attr.objectType>(
<endif>

        "<attr.nameUppercased>"));
>>

primitive_nullable_clobhandling_attribute_extractor(attr) ::= <<
<!
  Generates the code to extract a primitive nullable attribute.
!>
new <attr.objectType>(
<if(attr.timestamp)>
    resultSet.getTimestamp("<attr.nameUppercased>"));
<else>
<if(attr.numberSmallerThanInt)>
    resultSet.getInt("<attr.nameUppercased>"));
<else>
    resultSet.get<attr.objectType>("<attr.nameUppercased>"));
<endif>
<endif>

>>

object_nullable_attribute_extractor(attr) ::= <<
<!
  Generates the code to extract a non-primitive nullable attribute.
!>
<if(attr.timestamp)>
resultSet.getTimestamp(
<else>
<if(attr.numberSmallerThanInt)>
resultSet.getInt(
<else>
resultSet.get<attr.objectType>(
<endif>
<endif>

    "<attr.nameUppercased>");
>>

object_nullable_clobhandling_attribute_extractor(attr) ::= <<
<!
  Generates the code to extract a non-primitive nullable attribute.
!>
<if(attr.timestamp)>
resultSet.getTimestamp("<attr.nameUppercased>");
<else>
<if(attr.numberSmallerThanInt)>
resultSet.getInt("<attr.nameUppercased>");
<else>
resultSet.get<attr.objectType>("<attr.nameUppercased>");
<endif>
<endif>

>>

attribute_extraction(attr, input) ::= <<
<!
 Generates the code to extract attributes.
 @param attr the attribute.
 @param input the input.
!>
<if(input.clobHandling)>
<indirect_template(
  name=input.clobHandling+"_attribute_extraction", input=attr)>
<else>
<default_attribute_extraction(attr)>
<endif>
>>

default_attribute_extraction(attr) ::= <<
<!
 Generates the member declaration for a concrete attribute.
 @param attr the attribute.
!>
<if(attr.allowsNull)>
<if(attr.timestamp)>
t_<attr.nameCapitalized>AsTimestamp
<else>
t_<attr.nameCapitalized>As<attr.objectType>
<endif>
<else>
<if(attr.numberSmallerThanInt)>
resultSet.getInt(<attr.tableNameUppercased>.<attr.nameUppercased>)
<else>
<if(attr.timestamp)>
resultSet.getTimestamp("<attr.nameUppercased>")
<else>
resultSet.get<attr.objectType>("<attr.nameUppercased>")
<endif>
<endif>
<endif>

>>

default_clobhandling_attribute_extraction(attr) ::= <<
<!
 Generates the member declaration for a concrete attribute.
 @param attr the attribute.
!>
<if(attr.timestamp)>
resultSet.getTimestamp("<attr.nameUppercased>")
<else>
<if(attr.allowsNull)>
t_<attr.nameCapitalized>As<attr.objectType>
<else>
<if(attr.numberSmallerThanInt)>
resultSet.getInt("<attr.nameUppercased>")
<else>
resultSet.get<attr.objectType>("<attr.nameUppercased>")
<endif>
<endif>
<endif>

>>

special_attribute_extraction(attr, input) ::= <<
<!
 Generates the code to extract special attributes.
 @param attr the attribute.
 @param input the input.
!>
<if(input.clobHandling)>
<indirect_template(
  name=input.clobHandling+"_special_attribute_extraction", input=attr)>
<endif>
>>

oracle_nullable_attribute_extraction(input) ::= <<
<!
 Generates the code to extract nullable attributes for Oracle.
 @param input the attribute.
!>
<oracle8_nullable_attribute_extraction(input=input)>
>>

oracle8_nullable_attribute_extraction(input) ::= <<
<!
 Generates the code to extract nullable attributes for Oracle8.
 @param input the attribute.
!>
<if(!input.clob)>
<default_nullable_attribute_extraction(attr=input)>
<endif>
>>

oracle_special_attribute_extraction(input) ::= <<
<!
 Generates the code to extract special attributes for Oracle.
 @param input the attribute.
!>
<oracle8_special_attribute_extraction(input=input)>
>>

oracle8_special_attribute_extraction(input) ::= <<
<!
 Generates the code to extract special attributes for Oracle8.
 @param input the attribute.
!>
<if(input.clob)>
oracle.sql.CLOB t_<input.nameCapitalized> =
    (oracle.sql.CLOB) resultSet.getClob("<attr.nameUppercased>");

if  (selectForUpdateMode)
{
    t_<input.nameCapitalized>.putString(1, <input.nameLowercased>);
}
<else>
if  (resultSet.wasNull())
{
    t_<input.nameCapitalized>As<input.objectType> = null;
}
<endif>
>>

oracle_attribute_extraction(input) ::= <<
<!
 Generates the code to extract the attributes for Oracle.
 @param input the attribute.
!>
<oracle8_attribute_extraction(input=input)>
>>

oracle8_attribute_extraction(input) ::= <<
<!
 Generates the code to extract the attributes for Oracle8.
 @param input the attribute.
!>
<if(input.clob)>
(selectForUpdateMode)
?  <input.nameLowercased>
:  t_<input.nameCapitalized>.getSubString(1, (int) t_<input.nameCapitalized>.length())
<else>
<default_clobhandling_attribute_extraction(attr=input)>
<endif>
>>
