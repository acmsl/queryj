//;-*- mode: antlr -*-
//
//                      QueryJ
//
//  Copyright (C) 2002-2007  ACM-SL
//                           chous@acm-sl.org
//
//  This library is free software; you can redistribute it and/or
//  modify it under the terms of the GNU General Public
//  License as published by the Free Software Foundation; either
//  version 2 of the License, or any later version.
//
//  This library is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
//  General Public License for more details.
//
//  You should have received a copy of the GNU General Public
//  License along with this library; if not, write to the Free Software
//  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
//
//  Thanks to ACM S.L. for distributing this library under the GPL license.
//  Contact info: jose.sanleandro@acm-sl.com
//  Postal Address: c/Playa de Lagoa, 1
//                  Urb. Valdecabanas
//                  Boadilla del monte
//                  28660 Madrid
//                  Spain
//
//***************************************************************************
//
// Filename: JndiUtils.stg
//
// Author: Jose San Leandro Armendariz
//
// Description: Generates JndiUtils sources.
//
// Version: $Revision: 1769 $ ($Author: chous $ at $Date: 2007-04-23 10:14:02 +0200 (Mon, 23 Apr 2007) $)
//
// $Id: JndiUtils.stg 1769 2007-04-23 08:14:02Z chous $
//
group JdbcTemplate;

source(input) ::= <<
<!
  Generates a JndiUtils source.
  @param input.copyright_years the copyright's years.
  @param input.package the package.
  @params class
!>
<if(input.header)>
<input.header>
<else>
<java_header(
  years=input.copyright_years,
  description=
  [
    first_line_description()
  ],
  timestamp=input.timestamp)>
<endif>
// Generated by $Id: DAO.stg 1769 2007-04-23 08:14:02Z chous $

<package_declaration(
  packageNames=
  [
    input.base_package_name,
    typeInitMap.baseDAOSubpackageName
  ])>

/*
 * Importing Spring classes.
 */
import org.springframework.jdbc.datasource.DataSourceUtils;

/*
 * Importing Java extension classes.
 */
import javax.sql.DataSource;

<class(input=input)>
>>

first_line_description() ::= <<
<!
  Generates a description for the generated file.
!>
Accesses JNDI-published DataSource instances.
>>

class(input) ::= <<
<!
 Generates the class body.
 @param input.timestamp the timestamp.
 @param input.tr_name the table repository name.
!>
/**
 * <[
      first_line_description()
    ]:{line |<line>}; separator="\n * ">
 * @author \<a href="http://www.acm-sl.org/queryj"\>QueryJ\</a\>
 * @version <"$">Revision: $ (<"$">Author: $ at <"$">Date: $)
 * @since <input.timestamp>
 */
public class <input.tr_name_capitalized>JndiUtils
{
    /**
     * Singleton implemented to avoid the double-checked locking.
     */
    private static class <input.tr_name_capitalized>JndiUtilsSingletonContainer
    {
        /**
         * The actual singleton.
         */
        public static final <input.tr_name_capitalized>JndiUtils SINGLETON =
            new <input.tr_name_capitalized>JndiUtils();
    }

    /**
     * Protected constructor to avoid accidental instantiation.
     * @param alias the table alias.
     */
    protected <input.tr_name_capitalized>JndiUtils() {};

    /**
     * Retrieves a \<code>JndiUtils\</code> instance.
     * @return such instance.
     */
    public static <input.tr_name_capitalized>JndiUtils getInstance()
    {
        return <input.tr_name_capitalized>JndiUtilsSingletonContainer.SINGLETON;
    }

    /**
     * Retrieves the \<code>DataSource\</code> from given
     * JNDI location.
     * @param location the location.
     * @return such datasource, or \<code>null\</code> if it's
     * not found.
     * @throws CannotGetJdbcConnectionException if the data source cannot
     * be retrieved from JNDI.
     */
    public DataSource getDataSourceFromJndi(final String location)
    {
        return DataSourceUtils.getDataSourceFromJndi(location);
    }
>>
