/*
                        QueryJ

    Copyright (C) 2002-today  Jose San Leandro Armendariz
                              chous@acm-sl.org

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    General Public License for more details.

    You should have received a copy of the GNU General Public
    License along with this library; if not, write to the Free Software
    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

    Thanks to ACM S.L. for distributing this library under the GPL license.
    Contact info: jose.sanleandro@acm-sl.com

 *****************************************************************************
 *
 * Filename: BasePerTableTemplate.java
 *
 * Author: Jose San Leandro Armendariz
 *
 * Description: Base logic for all per-table templates.
 *
 */
package org.acmsl.queryj.tools.templates;

/*
 * Importing some project-specific classes.
 */
import org.acmsl.queryj.tools.customsql.CustomSqlProvider;
import org.acmsl.queryj.tools.customsql.Result;
import org.acmsl.queryj.tools.customsql.Sql;
import org.acmsl.queryj.tools.metadata.DecoratorFactory;
import org.acmsl.queryj.tools.metadata.DecorationUtils;
import org.acmsl.queryj.tools.metadata.MetadataManager;
import org.acmsl.queryj.tools.metadata.MetadataTypeManager;
import org.acmsl.queryj.tools.metadata.MetadataUtils;
import org.acmsl.queryj.tools.metadata.TableDecorator;
import org.acmsl.queryj.tools.metadata.vo.Attribute;
import org.acmsl.queryj.tools.metadata.vo.AttributeValueObject;
import org.acmsl.queryj.tools.metadata.vo.ForeignKey;
import org.acmsl.queryj.tools.PackageUtils;
import org.acmsl.queryj.tools.templates.dao.DAOTemplateUtils;

/*
 * Importing some ACM-SL classes.
 */
import org.acmsl.commons.utils.EnglishGrammarUtils;
import org.acmsl.commons.utils.StringUtils;

/*
 * Importing StringTemplate classes.
 */
import org.antlr.stringtemplate.StringTemplate;
import org.antlr.stringtemplate.StringTemplateGroup;

/*
 * Importing some JDK classes.
 */
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

/*
 * Importing some JetBrains annotations.
 */
import org.jetbrains.annotations.NotNull;
import org.jetbrains.annotations.Nullable;

/**
 * Base logic for all per-table templates.
 * @author <a href="mailto:chous@acm-sl.org">Jose San Leandro Armendariz</a>
 */
public abstract class BasePerTableTemplate<C extends BasePerTableTemplateContext>
    extends  AbstractBasePerTableTemplate<C>
{
    /**
     * Builds a {@link BasePerTableTemplate} using given information.
     * @param context the template context.
     */
    public BasePerTableTemplate(@NotNull final C context)
    {
        super(context);
    }

    /**
     * Retrieves the source code generated by this template.
     * @param header the header.
     * @return such code.
     * @throws InvalidTemplateException if the template cannot be processed.
     */
    @Override
    @NotNull
    protected String generateOutput(@NotNull final String header, @NotNull final C context)
        throws InvalidTemplateException
    {
        return generateOutput(header, context, context.getMetadataManager());
    }

    /**
     * Retrieves the source code generated by this template.
     * @param header the header.
     * @param context the {@link BasePerTableTemplateContext} instance.
     * @param metadataManager the metadata manager.
     * @return such code.
     * @throws InvalidTemplateException if the generation process fails.
     */
    @NotNull
    protected String generateOutput(
        @NotNull final String header,
        @NotNull final C context,
        @NotNull final MetadataManager metadataManager)
        throws InvalidTemplateException
    {
        return
            generateOutput(
                context.getTableName(),
                metadataManager,
                metadataManager.getMetadataTypeManager(),
                context.getCustomSqlProvider(),
                metadataManager.getEngineName(),
                metadataManager.getEngineVersion(),
                context.getBasePackageName(),
                context.getRepositoryName(),
                header,
                context.getImplementMarkerInterfaces(),
                context.getDecoratorFactory(),
                StringUtils.getInstance(),
                DefaultThemeUtils.getInstance(),
                PackageUtils.getInstance(),
                EnglishGrammarUtils.getInstance(),
                DAOTemplateUtils.getInstance(),
                TemplateUtils.getInstance(),
                MetadataUtils.getInstance());
    }

    /**
     * Retrieves the source code generated by this template.
     * @param tableName the table name.
     * @param metadataManager the database metadata manager.
     * @param metadataTypeManager the metadata type manager.
     * @param customSqlProvider the CustomSqlProvider instance.
     * @param engineName the engine name.
     * @param engineVersion the engine version.
     * @param basePackageName the base package name.
     * @param repositoryName the repository name.
     * @param header the header.
     * @param implementMarkerInterfaces whether to implement marker
     * interfaces.
     * @param decoratorFactory the {@link DecoratorFactory} instance.
     * @param stringUtils the StringUtils instance.
     * @param defaultThemeUtils the {@link DefaultThemeUtils} instance.
     * @param packageUtils the PackageUtils instance.
     * @param englishGrammarUtils the EnglishGrammarUtils instance.
     * @param daoTemplateUtils the DAOTemplateUtils instance.
     * @param templateUtils the {@link TemplateUtils} instance.
     * @param metadataUtils the {@link MetadataUtils} instance.
     * @return such code.
     * @throws InvalidTemplateException if the generation process fails.
     */
    protected String generateOutput(
        @NotNull final String tableName,
        @NotNull final MetadataManager metadataManager,
        @NotNull final MetadataTypeManager metadataTypeManager,
        @NotNull final CustomSqlProvider customSqlProvider,
        @NotNull final String engineName,
        @Nullable final String engineVersion,
        @Nullable final String basePackageName,
        @NotNull final String repositoryName,
        @NotNull final String header,
        final boolean implementMarkerInterfaces,
        @NotNull final DecoratorFactory decoratorFactory,
        @NotNull final StringUtils stringUtils,
        @NotNull final DefaultThemeUtils defaultThemeUtils,
        @NotNull final PackageUtils packageUtils,
        @NotNull final EnglishGrammarUtils englishGrammarUtils,
        @NotNull final DAOTemplateUtils daoTemplateUtils,
        @NotNull final TemplateUtils templateUtils,
        @NotNull final MetadataUtils metadataUtils)
      throws InvalidTemplateException
    {
        String result;

        String t_strSingularName =
            stringUtils.capitalize(
                englishGrammarUtils.getSingular(
                    tableName.toLowerCase()),
                '_');

        @Nullable StringTemplateGroup t_Group = retrieveGroup();

        @Nullable StringTemplate t_Template = retrieveTemplate(t_Group);

        String t_strCapitalizedEngine =
            stringUtils.capitalize(engineName, '_');

        String t_strRepositoryName =
            stringUtils.capitalize(repositoryName, '_');

        String t_strValueObjectName =
            englishGrammarUtils.getSingular(
                tableName.toLowerCase());

        String t_strCapitalizedValueObjectName =
            stringUtils.capitalize(t_strValueObjectName, '_');

        String[] t_astrPrimaryKeys =
            metadataManager.getPrimaryKey(tableName);

        @Nullable String t_strStaticAttributeName =
            retrieveStaticAttribute(tableName, metadataManager);

        String t_strStaticAttributeType =
            metadataTypeManager.getFieldType(
                metadataManager.getColumnType(
                    tableName, t_strStaticAttributeName));

        @NotNull List<Attribute> t_cPrimaryKeyAttributes =
            metadataUtils.retrievePrimaryKeyAttributes(
                tableName,
                metadataManager,
                metadataTypeManager,
                decoratorFactory);

        @NotNull List<Attribute> t_cNonPrimaryKeyAttributes =
            metadataUtils.retrieveNonPrimaryKeyAttributes(
                tableName,
                metadataManager,
                metadataTypeManager,
                decoratorFactory);

        @NotNull List<ForeignKey> t_cForeignKeyAttributes =
            metadataUtils.retrieveForeignKeyAttributes(
                tableName,
                metadataManager,
                metadataTypeManager,
                decoratorFactory);

        // A map of "fk_"referringTableName -> foreign_keys (list of lists)
        @NotNull Map<String,ForeignKey[]> t_mReferringKeys =
            metadataUtils.retrieveReferringKeys(
                tableName,
                metadataManager,
                metadataTypeManager,
                decoratorFactory);

        @NotNull List<Attribute> t_cAttributes =
            metadataUtils.retrieveAttributes(
                tableName,
                metadataManager,
                metadataTypeManager,
                decoratorFactory);

        @NotNull List<Attribute> t_cExternallyManagedAttributes =
            metadataUtils.retrieveExternallyManagedAttributes(
                tableName,
                metadataManager,
                metadataTypeManager,
                decoratorFactory);

        @NotNull List<Attribute> t_cAllButExternallyManagedAttributes =
            metadataUtils.retrieveAllButExternallyManagedAttributes(
                tableName,
                metadataManager,
                metadataTypeManager,
                decoratorFactory);

        @NotNull List<Attribute> t_cLobAttributes =
            metadataUtils.retrieveLobAttributes(
                tableName,
                metadataManager,
                metadataTypeManager,
                decoratorFactory);

        @NotNull List<Attribute> t_cAllButLobAttributes =
            metadataUtils.retrieveAllButLobAttributes(
                tableName,
                metadataManager,
                metadataTypeManager,
                decoratorFactory);

        ForeignKey[] t_aForeignKeys =
            metadataUtils.retrieveForeignKeys(
                tableName,
                metadataManager,
                decoratorFactory);

        @Nullable List<Sql> t_cCustomSelects =
            retrieveCustomSelects(
                tableName,
                customSqlProvider,
                metadataManager,
                decoratorFactory,
                daoTemplateUtils,
                templateUtils);

        @Nullable List<Sql> t_cCustomUpdatesOrInserts =
            retrieveCustomUpdatesOrInserts(
                tableName,
                customSqlProvider,
                metadataManager,
                decoratorFactory,
                daoTemplateUtils,
                templateUtils);

        @Nullable List<Sql> t_cCustomSelectsForUpdate =
            retrieveCustomSelectsForUpdate(
                tableName,
                customSqlProvider,
                metadataManager,
                decoratorFactory,
                daoTemplateUtils,
                templateUtils);

        @Nullable List<Result> t_cCustomResults =
            retrieveCustomResults(
                tableName,
                customSqlProvider,
                metadataManager,
                decoratorFactory,
                daoTemplateUtils,
                templateUtils);

        fillParameters(
            new HashMap(),
            t_Template,
            new Integer[]
            {
                STARTING_YEAR,
                retrieveCurrentYear()
            },
            tableName,
            t_strCapitalizedValueObjectName,
            engineName,
            engineVersion,
            basePackageName,
            packageUtils.retrieveDAOSubpackage(engineName),
            createTimestamp(),
            defaultThemeUtils.buildDAOImplementationClassName(
                t_strCapitalizedEngine, t_strSingularName),
            defaultThemeUtils.buildDAOClassName(t_strSingularName),
            packageUtils.retrieveBaseDAOPackage(basePackageName),
            t_cPrimaryKeyAttributes,
            t_cNonPrimaryKeyAttributes,
            t_cForeignKeyAttributes,
            t_mReferringKeys,
            t_cAttributes,
            t_cExternallyManagedAttributes,
            t_cAllButExternallyManagedAttributes,
            t_cLobAttributes,
            t_cAllButLobAttributes,
            t_aForeignKeys,
            t_cCustomSelects,
            t_cCustomUpdatesOrInserts,
            t_cCustomSelectsForUpdate,
            t_cCustomResults,
            t_strStaticAttributeName,
            t_strStaticAttributeType,
            t_strRepositoryName,
            metadataManager,
            metadataTypeManager,
            header,
            implementMarkerInterfaces,
            decoratorFactory,
            metadataUtils);

        try
        {
            result = t_Template.toString();
        }
        catch (@NotNull final IllegalArgumentException invalidTemplate)
        {
            throw
                new InvalidTemplateException(
                    "invalid.per.table.template",
                    new Object[]
                    {
                        t_Template.getName(),
                        getTemplateName(),
                        tableName
                    },

                    invalidTemplate);
        }

        return result;
    }

    /**
     * Fills the template parameters.
     * @param input the parameter container.
     * @param template the template.
     * @param copyrightYears the copyright years.
     * @param tableName the table name.
     * @param voName the name of the value object.
     * @param engineName the engine name.
     * @param engineVersion the engine version.
     * @param basePackageName the base package name.
     * @param subpackageName the subpackage.
     * @param timestamp the timestamp.
     * @param className the class name of the DAO.
     * @param baseDAOClassName the class name of the DAO interface.
     * @param baseDAOPackageName the DAO interface package.
     * @param primaryKeyAttributes the primary key attributes.
     * @param nonPrimaryKeyAttributes the ones not part of the primary
     * key.
     * @param foreignKeyAttributes the foreign key attributes.
     * @param referringKeys the foreign keys of other tables pointing
     * to this one. It's expected to be
     * a map of "fk_"referringTableName -> foreign_keys (list of attribute
     * lists).
     * @param attributes the attributes.
     * @param externallyManagedAttributes the attributes which are
     * managed externally.
     * @param allButExternallyManagedAttributes all but the attributes which
     * are managed externally.
     * @param allButLobAttributes all but the attributes whose type is
     * Clob or Blob.
     * @param foreignKeys the entities pointing to this instance's table.
     * @param customSelects the custom selects.
     * @param customUpdatesOrInserts the custom updates or inserts.
     * @param customSelectsForUpdate the custom selects for update.
     * @param customResults the custom results.
     * @param staticAttributeName the name of the static attribute, or
     * <code>null</code> for non-static tables.
     * @param staticAttributeType the type of the static attribute, or
     * <code>null</code> for non-static tables.
     * @param tableRepositoryName the table repository.
     * @param metadataManager the database metadata manager.
     * @param metadataTypeManager the metadata type manager.
     * @param header the header.
     * @param implementMarkerInterfaces whether to implement marker
     * interfaces.
     * @param decoratorFactory the {@link DecoratorFactory} instance.
     * @param metadataUtils the {@link MetadataUtils} instance.
     */
    protected void fillParameters(
        @NotNull final Map input,
        @NotNull final StringTemplate template,
        @NotNull final Integer[] copyrightYears,
        @NotNull final String tableName,
        @NotNull final String voName,
        @NotNull final String engineName,
        @NotNull final String engineVersion,
        @NotNull final String basePackageName,
        @NotNull final String subpackageName,
        @NotNull final String timestamp,
        @NotNull final String className,
        @NotNull final String baseDAOClassName,
        @NotNull final String baseDAOPackageName,
        @NotNull final List<Attribute> primaryKeyAttributes,
        @NotNull final List<Attribute> nonPrimaryKeyAttributes,
        @NotNull final List<ForeignKey> foreignKeyAttributes,
        @NotNull final Map<String,ForeignKey[]> referringKeys,
        @NotNull final List<Attribute> attributes,
        @NotNull final List<Attribute> externallyManagedAttributes,
        @NotNull final List<Attribute> allButExternallyManagedAttributes,
        @NotNull final List<Attribute> lobAttributes,
        @NotNull final List<Attribute> allButLobAttributes,
        @NotNull final ForeignKey[] foreignKeys,
        @NotNull final List<Sql> customSelects,
        @NotNull final List<Sql> customUpdatesOrInserts,
        @NotNull final List<Sql> customSelectsForUpdate,
        @NotNull final List<Result> customResults,
        @Nullable final String staticAttributeName,
        @Nullable final String staticAttributeType,
        @NotNull final String tableRepositoryName,
        @NotNull final MetadataManager metadataManager,
        @NotNull final MetadataTypeManager metadataTypeManager,
        @Nullable final String header,
        final boolean implementMarkerInterfaces,
        @NotNull final DecoratorFactory decoratorFactory,
        @NotNull final MetadataUtils metadataUtils)
    {
        template.setAttribute("input", input);

        fillCommonParameters(
            input,
            tableName,
            engineName,
            engineVersion,
            implementMarkerInterfaces,
            metadataManager,
            decoratorFactory);

        fillJavaHeaderParameters(
            input, header, copyrightYears, timestamp, metadataManager);

        fillPackageDeclarationParameters(
            input, basePackageName, subpackageName, metadataManager);

        fillProjectImportsParameters(
            input,
            basePackageName,
            subpackageName,
            tableName,
            customResults,
            voName,
            foreignKeyAttributes,
            metadataManager);

        fillClassParameters(
            input,
            voName,
            engineName,
            engineVersion,
            timestamp,
            (staticAttributeName != null),
            tableRepositoryName,
            tableName,
            primaryKeyAttributes,
            nonPrimaryKeyAttributes,
            foreignKeyAttributes,
            referringKeys,
            attributes,
            externallyManagedAttributes,
            allButExternallyManagedAttributes,
            lobAttributes,
            allButLobAttributes,
            foreignKeys,
            staticAttributeName,
            staticAttributeType,
            customSelects,
            customUpdatesOrInserts,
            customSelectsForUpdate,
            customResults,
            metadataManager);

        if  (staticAttributeName != null)
        {
            fillStaticTableParameters(
                input,
                staticAttributeName,
                staticAttributeType,
                tableName,
                metadataUtils.contain(
                    externallyManagedAttributes,
                    staticAttributeName,
                    tableName),
                metadataManager.getAllowNull(
                    tableName, staticAttributeName),
                metadataManager,
                metadataTypeManager,
                decoratorFactory);
        }

        input.put("class_name", className);

        input.put("base_dao_class_name", baseDAOClassName);
        input.put("base_dao_package_name",  baseDAOPackageName);

        // Check for CLOB stuff.
        if  (   (metadataManager.requiresCustomClobHandling())
             && (containsLobs(
                     tableName, metadataManager, metadataTypeManager)))
        {
            input.put("lobHandling", metadataManager.getName());
        }
    }

    /**
     * Fills the common parameters.
     * @param input the input.
     * @param tableName the table name.
     * @param engineName the engine name.
     * @param engineVersion the engine version.
     * @param implementMarkerInterfaces whether to implement marker
     * interfaces.
     * @param metadataManager the database metadata manager.
     * @param decoratorFactory the {@link DecoratorFactory} instance.
     */
    protected void fillCommonParameters(
        @NotNull final Map input,
        @NotNull final String tableName,
        @NotNull final String engineName,
        @NotNull final String engineVersion,
        final boolean implementMarkerInterfaces,
        @NotNull final MetadataManager metadataManager,
        @NotNull final DecoratorFactory decoratorFactory)
    {
        input.put("table_name",  tableName);
        input.put(
            "table",
            decorate(tableName, metadataManager, decoratorFactory));
        input.put("engine_name", engineName);
        input.put("engine_version", engineVersion);
        input.put(
            "implement_markers",
            (implementMarkerInterfaces) ? Boolean.TRUE : Boolean.FALSE);
    }

    /**
     * Fills the parameters for <code>java_header</code> rule.
     * @param input the input.
     * @param header the header.
     * @param copyrightYears the copyright years.
     * @param timestamp the timestamp.
     * @param metadataManager the database metadata manager.
     */
    @SuppressWarnings("unused")
    protected void fillJavaHeaderParameters(
        @NotNull final Map input,
        @Nullable final String header,
        @NotNull final Integer[] copyrightYears,
        @NotNull final String timestamp,
        @NotNull final MetadataManager metadataManager)
    {
        input.put("copyright_years", copyrightYears);
        input.put("timestamp", timestamp);

        if  (   (header != null)
             && (!input.containsKey("header")))
        {
            input.put("header", processHeader(input, header));
        }
    }

    /**
     * Fills the parameters for <code>package_declaration</code> rule.
     * @param input the input.
     * @param basePackageName the base package name.
     * @param subpackageName the subpackage.
     * @param metadataManager the database metadata manager.
     */
    @SuppressWarnings("unused")
    protected void fillPackageDeclarationParameters(
        @NotNull final Map input,
        @NotNull final String basePackageName,
        @NotNull final String subpackageName,
        @NotNull final MetadataManager metadataManager)
    {
        input.put("base_package_name", basePackageName);
        input.put("subpackage_name", subpackageName);
    }

    /**
     * Fills the parameters for the <code>project_imports</code> rule.
     * @param input the input.
     * @param basePackageName the base package.
     * @param subpackageName the name of the subpackage.
     * @param tableName the table name.
     * @param customResults the custom results.
     * @param voName the name of the value object.
     * @param fkAttributes the foreign-key attributes.
     * @param metadataManager the database metadata manager.
     */
    @SuppressWarnings("unchecked")
    protected void fillProjectImportsParameters(
        @NotNull final Map input,
        @NotNull final String basePackageName,
        @NotNull final String subpackageName,
        @NotNull final String tableName,
        @NotNull final Collection<Result> customResults,
        @NotNull final String voName,
        @NotNull final Collection<ForeignKey> fkAttributes,
        @NotNull final MetadataManager metadataManager)
    {
        input.put("base_package_name", basePackageName);
        input.put("subpackage_name", subpackageName);
        input.put("table_name", tableName);
        input.put("custom_results", customResults);
        input.put("vo_name", voName);
        input.put("fk_attributes", fkAttributes);
    }

    /**
     * Fills the parameters required by <code>class</code> rule.
     * @param input the input.
     * @param voName the name of the value object.
     * @param engineName the engine name.
     * @param engineVersion the engine version.
     * @param timestamp the timestamp.
     * @param staticTable whether the table is static or not.
     * @param tableRepositoryName the table repository name.
     * @param tableName the table name.
     * @param pkAttributes the primary key attributes.
     * @param nonPkAttributes the ones not part of the primary key.
     * @param fkAttributes the foreign key attributes.
     * @param referringKeys the foreign keys of other tables pointing
     * to this one. It's expected to be
     * a map of "fk_"referringTableName -> foreign_keys (list of attribute
     * lists).
     * @param attributes the attributes.
     * @param externallyManagedAttributes the attributes which are
     * managed externally.
     * @param allButExternallyManagedAttributes all but the attributes which
     * are managed externally.
     * @param lobAttributes all attributes whose type is Clob or Blob.
     * @param allButLobAttributes all but the attributes whose type is
     * Clob or Blob.
     * @param foreignKeys the entities pointing to this instance's table.
     * @param staticAttributeName the name of the static attribute, or
     * <code>null</code> for non-static tables.
     * @param staticAttributeType the type of the static attribute, or
     * <code>null</code> for non-static tables.
     * @param customSelects the custom selects.
     * @param customUpdatesOrInserts the custom updates and inserts.
     * @param customSelectsForUpdate the custom selects for update.
     * @param customResults the custom results.
     * @param metadataManager the database metadata manager.
     */
    @SuppressWarnings("unchecked")
    protected void fillClassParameters(
        @NotNull final Map input,
        @NotNull final String voName,
        @Nullable final String engineName,
        @Nullable final String engineVersion,
        @NotNull final String timestamp,
        final boolean staticTable,
        @NotNull final String tableRepositoryName,
        @NotNull final String tableName,
        @NotNull final Collection<Attribute> pkAttributes,
        @NotNull final Collection<Attribute> nonPkAttributes,
        @NotNull final Collection<ForeignKey> fkAttributes,
        @NotNull final Map<String,ForeignKey[]> referringKeys,
        @NotNull final Collection<Attribute> attributes,
        @NotNull final Collection<Attribute> externallyManagedAttributes,
        @NotNull final Collection<Attribute> allButExternallyManagedAttributes,
        @NotNull final Collection<Attribute> lobAttributes,
        @NotNull final Collection<Attribute> allButLobAttributes,
        @NotNull final ForeignKey[] foreignKeys,
        @Nullable final String staticAttributeName,
        @Nullable final String staticAttributeType,
        @NotNull final Collection<Sql> customSelects,
        @NotNull final Collection<Sql> customUpdatesOrInserts,
        @NotNull final Collection<Sql> customSelectsForUpdate,
        @NotNull final Collection<Result> customResults,
        @NotNull final MetadataManager metadataManager)
    {
        input.put("vo_name", voName);
        input.put("engine_name", engineName);
        input.put("engine_version", engineVersion);
        input.put("timestamp", timestamp);
        input.put("vo_name_uppercased", voName.toUpperCase());
        input.put("vo_name_lowercased", voName.toLowerCase());

        if  (staticTable)
        {
            input.put("static_table", Boolean.TRUE);
        }

        input.put("tr_name", tableRepositoryName);
        input.put("tr_name_capitalized", capitalize(tableRepositoryName));
        input.put("tr_name_normalized", normalize(tableRepositoryName));

        input.put("table_name", tableName);
        input.put("table_name_uppercased", tableName.toUpperCase());
        input.put(
            "table_name_normalized_lowercased",
            normalizeLowercase(tableName, DecorationUtils.getInstance()));
        input.put(
            "table_name_capitalized",
            capitalize(tableName, DecorationUtils.getInstance()));

        input.put("pk_attributes", pkAttributes);
        input.put("nonpk_attributes", nonPkAttributes);
        input.put("fk_attributes", fkAttributes);
        input.put("attributes", attributes);
        input.put(
            "externally_managed_attributes", externallyManagedAttributes);
        input.put(
            "all_but_externally_managed_attributes",
            allButExternallyManagedAttributes);
        input.put("lob_attributes", lobAttributes);
        input.put("all_but_lob_attributes", allButLobAttributes);
        input.put("foreign_keys", foreignKeys);
        input.put("foreign_keys_by_table", referringKeys);
        Collection t_cReferringTables = referringKeys.keySet();
        input.put("referring_tables", t_cReferringTables);
        input.put("referring_vo_names", toVoNames(t_cReferringTables));
        input.put(
            "own_foreign_keys",
            buildOwnForeignKeyList(
                tableName, t_cReferringTables, referringKeys));
        //debugReferringKeys(t_cReferringTables, referringKeys, foreignKeys);
        input.put("custom_selects", customSelects);
        input.put("custom_updates_or_inserts", customUpdatesOrInserts);
        input.put("custom_selects_for_update", customSelectsForUpdate);
        input.put("custom_results", customResults);
    }

    /**
     * Provides the parameters required by
     * <code>static_table</code> rule.
     * @param input the input.
     * @param staticAttributeName the static attribute name.
     * @param staticAttributeType the static attribute type.
     * @param tableName the table name.
     * @param managedExternally whether the attribute is managed
     * externally.
     * @param allowsNull if the attribute allows nulls.
     * @param metadataManager the <code>MetadataManager</code> instance.
     * @param metadataTypeManager the <code>MetadataTypeManager</code>
     * instance.
     * @param decoratorFactory the <code>DecoratorFactory</code> instance.
     */
    protected void fillStaticTableParameters(
        @NotNull final Map input,
        @NotNull final String staticAttributeName,
        @NotNull final String staticAttributeType,
        @NotNull final String tableName,
        final boolean managedExternally,
        final boolean allowsNull,
        @NotNull final MetadataManager metadataManager,
        @NotNull final MetadataTypeManager metadataTypeManager,
        @NotNull final DecoratorFactory decoratorFactory)
    {
        input.put(
            "static_attribute",
            decoratorFactory.createDecorator(
                new AttributeValueObject(
                    staticAttributeName,
                    metadataTypeManager.getJavaType(staticAttributeType),
                    staticAttributeType,
                    tableName,
                    metadataManager.getTableComment(tableName),
                    managedExternally,
                    allowsNull,
                    null,
                    metadataManager.isReadOnly(tableName, staticAttributeName),
                    metadataManager.isBoolean(tableName, staticAttributeName),
                    metadataManager.getBooleanTrue(tableName, staticAttributeName),
                    metadataManager.getBooleanFalse(tableName, staticAttributeName),
                    metadataManager.getBooleanNull(tableName, staticAttributeName)),
                metadataManager));
    }

    /**
     * Retrieves the custom selects.
     * @param tableName the table name.
     * @param customSqlProvider the provider.
     * @param metadataManager the database metadata manager.
     * @param decoratorFactory the <code>DecoratorFactory</code> instance.
     * @param daoTemplateUtils the <code>DAOTemplateUtils</code> instance.
     * @param templateUtils the <code>TemplateUtils</code> instance.
     * @return the custom selects.
     */
    @NotNull
    protected List<Sql> retrieveCustomSelects(
        @Nullable final String tableName,
        @NotNull final CustomSqlProvider customSqlProvider,
        @NotNull final MetadataManager metadataManager,
        @NotNull final DecoratorFactory decoratorFactory,
        @NotNull final DAOTemplateUtils daoTemplateUtils,
        @NotNull final TemplateUtils templateUtils)
    {
        @Nullable List<Sql> result =
            templateUtils.retrieveCustomSelects(
                tableName,
                customSqlProvider,
                metadataManager,
                decoratorFactory,
                daoTemplateUtils);

        if  (result == null)
        {
            result = new ArrayList<Sql>();
        }

        return result;
    }

    /**
     * Retrieves the custom updates or inserts.
     * @param tableName the table name.
     * @param customSqlProvider the provider.
     * @param metadataManager the database metadata manager.
     * @param decoratorFactory the <code>DecoratorFactory</code> instance.
     * @param daoTemplateUtils the <code>DAOTemplateUtils</code> instance.
     * @param templateUtils the <code>TemplateUtils</code> instance.
     * @return the custom sql.
     */
    @NotNull
    protected List<Sql> retrieveCustomUpdatesOrInserts(
        @Nullable final String tableName,
        @NotNull final CustomSqlProvider customSqlProvider,
        @NotNull final MetadataManager metadataManager,
        @NotNull final DecoratorFactory decoratorFactory,
        @NotNull final DAOTemplateUtils daoTemplateUtils,
        @NotNull final TemplateUtils templateUtils)
    {
        @Nullable List<Sql> result =
            templateUtils.retrieveCustomUpdatesOrInserts(
                tableName,
                customSqlProvider,
                metadataManager,
                decoratorFactory,
                daoTemplateUtils);

        if  (result == null)
        {
            result = new ArrayList<Sql>();
        }

        return result;
    }

    /**
     * Retrieves the custom selects.
     * @param tableName the table name.
     * @param customSqlProvider the provider.
     * @param metadataManager the database metadata manager.
     * @param decoratorFactory the <code>DecoratorFactory</code> instance.
     * @param daoTemplateUtils the <code>DAOTemplateUtils</code> instance.
     * @param templateUtils the <code>TemplateUtils</code> instance.
     * @return the custom selects.
     */
    @Nullable
    protected List<Sql> retrieveCustomSelectsForUpdate(
        @Nullable final String tableName,
        @NotNull  final CustomSqlProvider customSqlProvider,
        @NotNull final MetadataManager metadataManager,
        @NotNull final DecoratorFactory decoratorFactory,
        @NotNull final DAOTemplateUtils daoTemplateUtils,
        @NotNull final TemplateUtils templateUtils)
    {
        @Nullable List<Sql> result =
            templateUtils.retrieveCustomSelectsForUpdate(
                tableName,
                customSqlProvider,
                metadataManager,
                decoratorFactory,
                daoTemplateUtils);

        if  (result == null)
        {
            result = new ArrayList<Sql>();
        }

        return result;
    }

    /**
     * Retrieves the custom results.
     * @param tableName the table name.
     * @param customSqlProvider the provider.
     * @param metadataManager the database metadata manager.
     * @param decoratorFactory the <code>DecoratorFactory</code> instance.
     * @param daoTemplateUtils the <code>DAOTemplateUtils</code> instance.
     * @param templateUtils the <code>TemplateUtils</code> instance.
     * @return the custom results.
     */
    @NotNull
    protected List<Result> retrieveCustomResults(
        @NotNull final String tableName,
        @NotNull final CustomSqlProvider customSqlProvider,
        @NotNull final MetadataManager metadataManager,
        @NotNull final DecoratorFactory decoratorFactory,
        @NotNull final DAOTemplateUtils daoTemplateUtils,
        @NotNull final TemplateUtils templateUtils)
    {
        @Nullable List<Result> result =
            templateUtils.retrieveCustomResults(
                tableName,
                customSqlProvider,
                metadataManager,
                decoratorFactory,
                daoTemplateUtils);

        if  (result == null)
        {
            result = new ArrayList<Result>();
        }

        return result;
    }

    /**
     * Normalizes given value, in lower-case.
     * @param value the value.
     * @param decorationUtils the <code>DecorationUtils</code> instance.
     * @return such output.
     * @precondition value != null
     * @precondition decorationUtils != null
     */
    @NotNull
    protected String normalizeLowercase(
        @NotNull final String value, @NotNull final DecorationUtils decorationUtils)
    {
        return decorationUtils.normalizeLowercase(value);
    }

    /**
     * Capitalizes given value.
     * @param value the value.
     * @return such output.
     */
    @NotNull
    protected String capitalize(@NotNull final String value)
    {
        return capitalize(value, DecorationUtils.getInstance());
    }

    /**
     * Capitalizes given value.
     * @param value the value.
     * @param decorationUtils the <code>DecorationUtils</code> instance.
     * @return such output.
     */
    @NotNull
    protected String capitalize(
        @NotNull final String value, @NotNull final DecorationUtils decorationUtils)
    {
        return decorationUtils.capitalize(value);
    }

    /**
     * Checks whether given table contains Lob attributes or not.
     * @param tableName the table name.
     * @param metadataManager the metadata manager.
     * @param metadataTypeManager the metadata type manager.
     * @return <code>true</code> in such case.
     */
    protected boolean containsLobs(
        @NotNull final String tableName,
        @NotNull final MetadataManager metadataManager,
        @NotNull final MetadataTypeManager metadataTypeManager)
    {
        boolean result = false;

        String[] t_astrColumnNames = metadataManager.getColumnNames(tableName);

        int t_iLength =
            (t_astrColumnNames != null) ? t_astrColumnNames.length : 0;

        for  (int t_iIndex = 0; t_iIndex < t_iLength; t_iIndex++)
        {
            if  (metadataTypeManager.isClob(
                     metadataManager.getColumnType(
                         tableName,
                         t_astrColumnNames[t_iIndex])))
            {
                result = true;
                break;
            }
        }

        return result;
    }

    /**
     * Decorates given table.
     * @param table the table name.
     * @param metadataManager the <code>MetadataManager</code> instance.
     * @param decoratorFactory the <code>DecoratorFactory</code> instance.
     * @return the decorated table.
     * @precondition table != null
     * @precondition metadataManager != null
     * @precondition decoratorFactory != null
     */
    @NotNull
    protected TableDecorator decorate(
        @NotNull final String table,
        @NotNull final MetadataManager metadataManager,
        @NotNull final DecoratorFactory decoratorFactory)
    {
        return decoratorFactory.createTableDecorator(table, metadataManager);
    }

    /**
     * Retrieves the static attribute.
     * @param tableName the table name.
     * @param metadataManager the <code>MetadataManager</code> instance.
     * @return such attribute, from the table's comment (@static keyword).
     */
    @Nullable
    protected String retrieveStaticAttribute(
        @NotNull final String tableName, @NotNull final MetadataManager metadataManager)
    {
        return
            retrieveStaticAttribute(
                tableName,
                metadataManager,
                MetaLanguageUtils.getInstance());
    }

    /**
     * Retrieves the static attribute.
     * @param tableName the table name.
     * @param metadataManager the <code>MetadataManager</code> instance.
     * @param metaLanguageUtils the <code>MetaLanguageUtils</code> instance.
     * @return such attribute, from the table's comment (@static keyword).
     */
    @Nullable
    protected String retrieveStaticAttribute(
        @NotNull final String tableName,
        @NotNull final MetadataManager metadataManager,
        @NotNull final MetaLanguageUtils metaLanguageUtils)
    {
        return
            metaLanguageUtils.retrieveStaticAttribute(metadataManager.getTableComment(tableName));
    }

    /**
     * Converts given values to their VO names.
     * @param collection the values to convert.
     * @return such converted values.
     */
    @NotNull
    protected Collection toVoNames(@NotNull final Collection collection)
    {
        return
            toVoNames(
                collection,
                DecorationUtils.getInstance(),
                EnglishGrammarUtils.getInstance());
    }

    /**
     * Converts given values to their VO names.
     * @param collection the values to convert.
     * @param decorationUtils the <code>DecorationUtils</code> instance.
     * @param englishGrammarUtils the <code>EnglishGrammarUtils</code>
     * instance.
     * @return such converted values.
     */
    @NotNull
    protected Collection toVoNames(
        @Nullable final Collection collection,
        @NotNull final DecorationUtils decorationUtils,
        @NotNull final EnglishGrammarUtils englishGrammarUtils)
    {
        @NotNull Collection result = new ArrayList();

        @Nullable Iterator t_Iterator =
            (collection != null) ? collection.iterator() : null;

        if  (t_Iterator != null)
        {
            while  (t_Iterator.hasNext())
            {
                result.add(
                    toVoName(
                        "" + t_Iterator.next(),
                        decorationUtils,
                        englishGrammarUtils));
            }
        }

        return result;
    }

    /**
     * Converts given value to its VO name.
     * @param value the value to convert.
     * @param decorationUtils the <code>DecorationUtils</code> instance.
     * @param englishGrammarUtils the <code>EnglishGrammarUtils</code>
     * instance.
     * @return such converted value.
     */
    @NotNull
    protected String toVoName(
        @NotNull final String value,
        @NotNull final DecorationUtils decorationUtils,
        @NotNull final EnglishGrammarUtils englishGrammarUtils)
    {
        return
            decorationUtils.capitalize(
                englishGrammarUtils.getSingular(value.toLowerCase()));
    }

    /**
     * Builds the list of the foreign keys starting and ending on given table.
     * @param tableName the table name.
     * @param referringTables the referring tables.
     * @param referringKeys the referring keys.
     * @return such map.
     */
    @NotNull
    protected List buildOwnForeignKeyList(
        @NotNull final String tableName,
        @Nullable final Collection<String> referringTables,
        @NotNull final Map referringKeys)
    {
        @NotNull List result = new ArrayList();

        @Nullable Iterator t_Iterator =
            (referringTables != null) ? referringTables.iterator() : null;

        if  (t_Iterator != null)
        {
            String t_strReferringTable;
            ForeignKey[] t_aFks;
            int t_iCount;
            boolean t_bOwn;

            while  (t_Iterator.hasNext())
            {
                t_strReferringTable = "" + t_Iterator.next();

                t_aFks =
                    (ForeignKey[]) referringKeys.get(t_strReferringTable);

                t_bOwn = t_strReferringTable.equals(tableName);

                t_iCount = (t_aFks != null) ? t_aFks.length : 0;

                for  (int t_iIndex = 0; t_iIndex < t_iCount; t_iIndex++)
                {
                    result.add((t_bOwn) ? Boolean.TRUE : null);
                }
            }
        }

        return result;
    }

    /**
     * Debugs the referringTable->foreignKeys map.
     * @param referringTables the referring tables.
     * @param map the map.
     * @param foreignKeys the foreign keys.
     * @precondition referringTables != null
     * @precondition map != null
     */
    @SuppressWarnings("unused")
    protected void debugReferringKeys(
        @Nullable final Collection<String> referringTables,
        @NotNull final Map map,
        @NotNull final ForeignKey[] foreignKeys)
    {
        org.apache.commons.logging.Log t_Log =
            org.acmsl.commons.logging.UniqueLogFactory.getLog(
                BasePerTableTemplate.class);

        @Nullable Iterator t_Iterator =
            (referringTables != null)
            ? referringTables.iterator() : null;

        StringBuffer t_sbMessage;

        if  (t_Iterator != null)
        {
            String t_strReferringTable;
            ForeignKey[] t_aForeignKeys;
            t_sbMessage = new StringBuffer();

            while  (t_Iterator.hasNext())
            {
                t_strReferringTable = "" + t_Iterator.next();
                t_aForeignKeys = (ForeignKey[]) map.get(t_strReferringTable);

                t_sbMessage.append(t_strReferringTable);
                t_sbMessage.append("->");

                for  (int t_iIndex = 0; t_iIndex < t_aForeignKeys.length; t_iIndex++)
                {
                    t_sbMessage.append("[");
                    t_sbMessage.append(
                        concat(t_aForeignKeys[t_iIndex].getAttributes(), ","));

                    t_sbMessage.append("]@");
                    t_sbMessage.append(
                        "" + t_aForeignKeys[t_iIndex].hashCode());
                }
            }
            t_Log.info("Referring keys: " + t_sbMessage);
        }

        if  (foreignKeys != null)
        {
            t_sbMessage = new StringBuffer();

            for  (int t_iIndex = 0; t_iIndex < foreignKeys.length; t_iIndex++)
            {
                t_sbMessage.append("[");
                t_sbMessage.append(
                    concat(foreignKeys[t_iIndex].getAttributes(), ","));

                t_sbMessage.append("]@");
                t_sbMessage.append(
                    "" + foreignKeys[t_iIndex].hashCode());
            }
            t_Log.info("Foreign keys: " + t_sbMessage);
        }
    }

    /**
     * Concatenates given list.
     * @param list the list.
     * @param separator the separator.
     */
    @NotNull
    protected String concat(final Collection<?> list, @NotNull final String separator)
    {
        return concat(list, separator, StringUtils.getInstance());
    }

    /**
     * Concatenates given list.
     * @param list the list.
     * @param separator the separator.
     * @param stringUtils the <code>StringUtils</code> instance.
     */
    @NotNull
    protected String concat(
        @NotNull final Collection<?> list,
        @NotNull final String separator,
        @NotNull final StringUtils stringUtils)
    {
        return stringUtils.concatenate(list, separator);
    }
}
