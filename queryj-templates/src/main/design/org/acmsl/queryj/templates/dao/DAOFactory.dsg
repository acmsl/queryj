- Create a new ST template DAOFactory.stg, in folder src/main/resources/org/acmsl/queryj/templates/dao;
- Import "queryj.stg";
- Define template source(C):
  - Add comment: Generates a DAOFactory database implementation source file.;
  - Call template sourceImpl:
    - Pass table: C.table;
    - Pass C: C;
- Define template sourceImpl(table; C):
  - Add comment: Generates a DAOFactory database implementation source file.;
  - Add comment: @param table the table.;
  - Add comment: @param C the context.;
  - If C.header, Then Print:
    - C.header;
    - Else:
      - Call java_header:
        - Pass year: C.currentYear;
        - Pass description: an array of:
          - Call description:
            - Pass tableName: table.Name;
        - Pass timestamp: C.timestamp;
  - If C.generation_timestamps_enabled, Then Print:
     - // Generated by QueryJ using org/acmsl/queryj/dao/DAOFactory.stg at <C.timestamp>
    Else:
     - // Generated by QueryJ using org/acmsl/queryj/dao/DAOFactory.stg
  - Call package_declaration:
    - Pass p: C.package;
  - Call checkers_import;
  - Import JDK classes;
  - Import javax classes;
  - Import Apache Commons Logging classes;
  - Call class:
    - Pass table: table;
    - Pass C: C;
- Define template description(tableName):
  - Add comment: Generates a description for the generated file.;
  - Add comment: @param tableName the table name.
  - Print:
    <tableName>-specific DAOFactory implementation.
- Define template class(table, C):
 - Add comment: Generates the class body.
 - Add comment: @param table the table.
 - Add comment: @param C the context.
 - Call classImpl:
   - Pass table: table;
   - Pass repository: C.repository;
   - Pass C: C;
- Define template classImpl(table, repository, C):
  - Add comment: Generates the class body.
  - Add comment: @param table the table.
  - Add comment: @param repository the table repository name.
  - Add comment: @param C the context.
  - Print a Javadoc class comment:
    - Call description:
      - Pass tableName: table.name
    - Call class_common_javadoc:
      - Pass template: "org/acmsl/queryj/dao/DAOFactory.stg";
      - Pass generation_timestamps_allowed: C.generation_timestamps_allowed;
      - Pass timestamp: C.timestamp
  - Declare an abstract class called <table.rame.capitalized>DAOFactory;
  - Declare a public static method getInstance():
    - Add comment: Retrieves a {@code <table.name.capitalized>DAOFactory} instance.
    - Add comment: @return such instance.
    - Print:
      return getInstance(<repository.capitalized>DAOChooser.getInstance());
  - Declare a protected static <table.name.capitalized>DAOFactory getInstance(<repository.capitalized>DAOChooser daoChooser) method:
    - Add comment: Retrieves a {@code <table.name.capitalized>DAOFactory} instance.
    - Add comment: @param daoChooser the {@code <repository.capitalized>DAOChooser} instance.
    - Add comment: @return such instance.
    - Print:
      @Nullable final <table.name.capitalized>DAOFactory result;

      @Nullable final String factoryClassName = daoChooser.get<table.name.capitalized>DAOFactoryClassName();

      if (factoryClassName != null)
      {
          try
          {
              @NotNull final Class\<<table.name.capitalized>DAOFactory>> factoryClass = Class.forName(factoryClassName);

              result = t_FactoryClass.newInstance();
          }
          catch (@NotNull final ClassNotFoundException factoryImplementationMissing)
          {
              logError(
                  "Cannot find <table.name.capitalized>DAOFactory implementation",
                  factoryImplementationMissing);
          }
          catch (@NotNull final InstantiationException invalidClassName)
          {
              logError(
                  "Cannot instantiate <table.name.capitalized>DAOFactory implementation",
                  invalidClassName);
          }
      }
      else
      {
          logError("<table.name.capitalized>DAOFactory not specified");
      }

      return result;
  - Declare a protected static void logError(String message, Throwable error) method:
    - Add comment: Prints an error message.;
    - Add comment: @param message the error message.;
    - Add comment: @param error the underlying error (optional).;
    - Print:
          try
          {
              if (error != null)
              {
                  LogFactory.getLog(<table.name.capitalized>DAOFactory.class).fatal(
                      message, error);
              }
              else
              {
                  LogFactory.getLog(<table.name.capitalized>DAOFactory.class).fatal(
                      message, error);
              }
          }
          catch (@NotNull final Throwable throwable)
          {
              System.err.println("Cannot log using Apache Commons Logging.");
              System.err.println("The original error was: ");
              if (error != null)
              {
                  System.err.println(message + " (" + error.getMessage() + ")");
              }
              else
              {
                  System.err.println(message);
              }
              error.printStackTrace(System.err);
              System.err.println("The logging error is: " + throwable.getMessage);
              throwable.printStacktrace(System.err);
          }
  - Declare a public abstract <table.name.capitalized>DAO create<table.name.capitalized>DAO() method:
    - Add comment: Creates a <table.name>-specific DAO implementation.;
    - Add comment: @return such implementation.;
