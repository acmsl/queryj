//;-*- mode: antlr -*-
//
//                      QueryJ
//
//  Copyright (C) 2002-today  ACM-SL
//                           chous@acm-sl.org
//
//  This library is free software; you can redistribute it and/or
//  modify it under the terms of the GNU General Public
//  License as published by the Free Software Foundation; either
//  version 2 of the License, or any later version.
//
//  This library is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
//  General Public License for more details.
//
//  You should have received a copy of the GNU General Public
//  License along with this library; if not, write to the Free Software
//  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
//
//  Thanks to ACM S.L. for distributing this library under the GPL license.
//  Contact info: jose.sanleandro@acm-sl.com
//  Postal Address: c/Playa de Lagoa, 1
//                  Urb. Valdecabanas
//                  Boadilla del monte
//                  28660 Madrid
//                  Spain
//
//***************************************************************************
//
// Filename: callbacks.stg
//
// Author: Jose San Leandro Armendariz
//
// Description: Defines the common templates dealing with inner callbacks.
//
group callbacks;

inner_transaction_callbacks(daoName, voName, lobHandlingRequired) ::= <<
<!
 Generates the inner classes for transaction callbacks.
 @param daoName the DAO name.
 @param voName the value object for select-for-update operations.
 @param lobHandlingRequired whether the CLOBs need to be handled or not.
!>
/**
 * Transaction callback implementation to perform
 * {@link JdbcTemplate#update(PreparedStatementCreator, PreparedStatementSetter)}.
 */
protected static class AbstractTransactionCallback
    implements TransactionCallback
{
    /**
     * The {@link PreparedStatementCreator}.
     */
    private PreparedStatementCreator m__PreparedStatementCreator;

    /**
     * The {@link PreparedStatementSetter}.
     */
    private PreparedStatementSetter m__PreparedStatementSetter;

    /**
     * The {@link <daoName>DAO}.
     */
    private <daoName>DAO m__<daoName>DAO;

    /**
     * Creates a transaction callback.
     * @param creator the {@link PreparedStatementCreator} instance.
     * @param setter the {@link PreparedStatementSetter} instance.
     * @param dao the {@link <daoName>DAO} instance.
     */
    public AbstractTransactionCallback(
        <notnull()>final PreparedStatementCreator creator,
        <notnull()>final PreparedStatementSetter setter,
        <notnull()>final <daoName>DAO dao)
    {
        immutableSetPreparedStatementCreator(creator);
        immutableSetPreparedStatementSetter(setter);
        immutableSet<daoName>DAO(dao);
    }

    /**
     * Specifies the {@link PreparedStatementCreator} instance.
     * @param creator such instance.
     */
    private void immutableSetPreparedStatementCreator(
        <notnull()>final PreparedStatementCreator creator)
    {
        m__PreparedStatementCreator = creator;
    }

    /**
     * Specifies the {@link PreparedStatementCreator} instance.
     * @param creator such instance.
     */
    protected void setPreparedStatementCreator(
        <notnull()>final PreparedStatementCreator creator)
    {
        immutableSetPreparedStatementCreator(creator);
    }

    /**
     * Retrieves the {@link PreparedStatementCreator} instance.
     * @return such instance.
     */
    <notnull()>
    public PreparedStatementCreator getPreparedStatementCreator()
    {
        return m__PreparedStatementCreator;
    }

    /**
     * Specifies the {@link PreparedStatementSetter} instance.
     * @param setter such instance.
     */
    private void immutableSetPreparedStatementSetter(
        <notnull()>final PreparedStatementSetter setter)
    {
        m__PreparedStatementSetter = setter;
    }

    /**
     * Specifies the {@link PreparedStatementSetter} instance.
     * @param setter such instance.
     */
    protected void setPreparedStatementSetter(
        <notnull()>final PreparedStatementSetter setter)
    {
        immutableSetPreparedStatementSetter(setter);
    }

    /**
     * Retrieves the {@link PreparedStatementSetter} instance.
     * @return such instance.
     */
    <notnull()>
    public PreparedStatementSetter getPreparedStatementSetter()
    {
        return m__PreparedStatementSetter;
    }

    /**
     * Specifies the {@link <daoName>DAO} instance.
     * @param dao the DAO instance.
     */
    private void immutableSet<daoName>DAO(<notnull()>final <daoName>DAO dao)
    {
        m__<daoName>DAO = dao;
    }

    /**
     * Specifies the {@link <daoName>DAO} instance.
     * @param dao the DAO instance.
     */
    @SuppressWarnings("unused")
    protected void set<daoName>DAO(<notnull()>final <daoName>DAO dao)
    {
        immutableSet<daoName>DAO(dao);
    }

    /**
     * Retrieves the {@link <daoName>DAO} instance.
     * @return such DAO.
     */
    <notnull()>
    public <daoName>DAO get<daoName>DAO()
    {
        return m__<daoName>DAO;
    }

    /**
     * Executes the transactional operation.
     * @param status the transaction status.
     * @return the transaction result.
     */
    <nullable()>
    public Object doInTransaction(<notnull()>final TransactionStatus status)
    {
        return
            doInTransaction(
                status,
                getPreparedStatementCreator(),
                getPreparedStatementSetter(),
                get<daoName>DAO());
    }

    /**
     * Executes the transactional operation.
     * @param status the transaction status.
     * @param creator the {@link PreparedStatementCreator} instance.
     * @param setter the {@link PreparedStatementSetter} instance.
     * @param dao the {@link <daoName>DAO} instance.
     * @return {@link null} in either case (this method is meant
     * to be overridden by subclasses, but cannot be defined \<i>abstract\</i>
     * since the inner class is \<i>static\</i>.
     */
    <nullable()>
    protected Object doInTransaction(
        <notnull()>final TransactionStatus status,
        <notnull()>final PreparedStatementCreator creator,
        <notnull()>final PreparedStatementSetter setter,
        <notnull()>final <daoName>DAO dao)
    {
        return null;
    }
}

/**
 * Transaction callback implementation to perform
 * {@link JdbcTemplate#update(PreparedStatementCreator, PreparedStatementSetter)}.
 */
protected static class UpdateTransactionCallback
    extends AbstractTransactionCallback
{
    /**
     * Creates a transaction callback.
     * @param creator the {@link PreparedStatementCreator} instance.
     * @param setter the {@link PreparedStatementSetter} instance.
     * @param dao the {@link <daoName>DAO} instance.
     */
    public UpdateTransactionCallback(
        <notnull()>final PreparedStatementCreator creator,
        <notnull()>final PreparedStatementSetter setter,
        <notnull()>final <daoName>DAO dao)
    {
        super(creator, setter, dao);
    }

    /**
     * Executes the transactional operation.
     * @param status the transaction status.
     * @param creator the {@link PreparedStatementCreator} instance.
     * @param setter the {@link PreparedStatementSetter} instance.
     * @param dao the {@link <daoName>DAO} instance.
     * @return the transaction result.
     */
    @Override
    <nullable()>
    protected Object doInTransaction(
        <notnull()>final TransactionStatus status,
        <notnull()>final PreparedStatementCreator creator,
        <notnull()>final PreparedStatementSetter setter,
        <notnull()>final <daoName>DAO dao)
    {
        return Integer.valueOf(dao.update(creator, setter));
    }
}

/**
 * Transaction callback implementation to perform
 * {@link JdbcTemplate.query(PreparedStatementCreator, PreparedStatementSetter)}.
 */
protected static class QueryTransactionCallback
    extends AbstractTransactionCallback
{
    /**
     * The optional SQL.
     */
    <nullable()>
    private String m__strSQL;

    /**
     * The {@link ResultSetExtractor}.
     */
    <notnull()>
    private ResultSetExtractor m__ResultSetExtractor;

    /**
     * Creates a transaction callback.
     * @param sql the SQL sentence.
     * @param extractor the {@link ResultSetExtractor} instance.
     * @param dao the {@link <daoName>DAO} instance.
     */
    public QueryTransactionCallback(
        <nullable()>final String sql,
        <notnull()>final ResultSetExtractor extractor,
        <notnull()>final <daoName>DAO dao)
    {
        super(null, null, dao);
        immutableSetSQL(sql);
        immutableSetResultSetExtractor(extractor);
    }

    /**
     * Creates a transaction callback.
     * @param creator the {@link PreparedStatementCreator} instance.
     * @param setter the {@link PreparedStatementSetter} instance.
     * @param extractor the {@link ResultSetExtractor} instance.
     * @param dao the {@link <daoName>DAO} instance.
     */
    public QueryTransactionCallback(
        <notnull()>final PreparedStatementCreator creator,
        <notnull()>final PreparedStatementSetter setter,
        <notnull()>final ResultSetExtractor extractor,
        <notnull()>final <daoName>DAO dao)
    {
        super(creator, setter, dao);
        immutableSetResultSetExtractor(extractor);
    }

    /**
     * Specifies the SQL sentence.
     * @param sql such sentence.
     */
    private void immutableSetSQL(<nullable()>final String sql)
    {
        m__strSQL = sql;
    }

    /**
     * Specifies the SQL sentence.
     * @param sql such sentence.
     */
    @SuppressWarnings("unused")
    protected void setSQL(<nullable()>final String sql)
    {
        immutableSetSQL(sql);
    }

    /**
     * Retrieves the SQL sentence.
     * @return such sentence.
     */
    <nullable()>
    public String getSQL()
    {
        return m__strSQL;
    }

    /**
     * Specifies the {@link ResultSetExtractor} instance.
     * @param extractor such instance.
     */
    private void immutableSetResultSetExtractor(
        <notnull()>final ResultSetExtractor extractor)
    {
        m__ResultSetExtractor = extractor;
    }

    /**
     * Specifies the {@link ResultSetExtractor} instance.
     * @param extractor such instance.
     */
    @SuppressWarnings("unused")
    protected void setResultSetExtractor(
        <notnull()>final ResultSetExtractor extractor)
    {
        immutableSetResultSetExtractor(extractor);
    }

    /**
     * Retrieves the {@link ResultSetExtractor} instance.
     * @return such instance.
     */
    <notnull()>
    public ResultSetExtractor getResultSetExtractor()
    {
        return m__ResultSetExtractor;
    }

    /**
     * Executes the transactional operation.
     * @param status the transaction status.
     * @param creator the {@link PreparedStatementCreator} instance.
     * @param setter the {@link PreparedStatementSetter} instance.
     * @param dao the {@link <daoName>DAO} instance.
     * @return the transaction result.
     */
    @Override
    <nullable()>
    protected Object doInTransaction(
        <notnull()>final TransactionStatus status,
        <notnull()>final PreparedStatementCreator creator,
        <notnull()>final PreparedStatementSetter setter,
        <notnull()>final <daoName>DAO dao)
    {
        return
            doInTransaction(
                status,
                creator,
                setter,
                getSQL(),
                getResultSetExtractor(),
                dao);
    }

    /**
     * Executes the transactional operation.
     * @param status the transaction status.
     * @param creator the {@link PreparedStatementCreator} instance.
     * @param setter the {@link PreparedStatementSetter} instance.
     * @param sql the sql (optional).
     * @param extractor the {@link ResultSetExtractor} instance.
     * @param dao the {@link <daoName>DAO} instance.
     * @result the transaction result.
     */
    <nullable()>
    protected Object doInTransaction(
        <notnull()>final TransactionStatus status,
        <notnull()>final PreparedStatementCreator creator,
        <notnull()>final PreparedStatementSetter setter,
        <nullable()>final String sql,
        <notnull()>final ResultSetExtractor extractor,
        <notnull()>final <daoName>DAO dao)
    {
        Object result = null;

        if  (sql == null)
        {
            result = dao.query(creator, setter, extractor);
        }
        else
        {
            result = dao.query(auditSql(sql), extractor);
        }

        return result;
    }
}

<if(lobHandlingRequired)>
<if(voName)>
/**
 * Transaction callback implementation to perform a
 * \<i>select for update\</i>.
 */
protected static class SelectForUpdateTransactionCallback
    extends QueryTransactionCallback
    implements PreparedStatementCallback
{
    /**
     * The result of the query. This make the class stateful, so
     * instances cannot be reused.
     */
    <nullable()>
    private <voName> m__Result;

    /**
     * Creates a transaction callback.
     * @param creator the {@link PreparedStatementCreator} instance.
     * @param setter the {@link PreparedStatementSetter} instance.
     * @param extractor the {@link ResultSetExtractor} instance.
     * @param dao the {@link <daoName>DAO} instance.
     */
    public SelectForUpdateTransactionCallback(
        <notnull()>final PreparedStatementCreator creator,
        <notnull()>final PreparedStatementSetter setter,
        <notnull()>final ResultSetExtractor extractor,
        <notnull()>final <daoName>DAO dao)
    {
        super(creator, setter, extractor, dao);
    }

    /**
     * Specifies the result of the operation.
     * @param operationResult such information.
     */
    protected final void immutableSetOperationResult(
        <notnull()>final <voName> operationResult)
    {
        m__Result = operationResult;
    }

    /**
     * Specifies the result of the operation.
     * @param operationResult such information.
     */
    @SuppressWarnings("unused")
    protected void setOperationResult(
        <notnull()>final <voName> operationResult)
    {
        immutableSetOperationResult(operationResult);
    }

    /**
     * Specifies the result of the operation.
     * @return such information.
     */
    <notnull()>
    public <voName> getOperationResult()
    {
        return m__Result;
    }

    /**
     * Executes the transactional operation.
     * @param status the transaction status.
     * @return the transaction result.
     */
    @Override
    <nullable()>
    public Object doInTransaction(<notnull()>final TransactionStatus status)
    {
        return
            doInTransaction(
                status,
                getPreparedStatementCreator(),
                get<daoName>DAO());
    }

    /**
     * Executes the transactional operation.
     * @param status the transaction status.
     * @param creator the {@link PreparedStatementCreator} instance.
     * @param dao the {@link <daoName>DAO} instance.
     * @return the transaction result.
     */
    <nullable()>
    protected Object doInTransaction(
        <notnull()>final TransactionStatus status,
        <notnull()>final PreparedStatementCreator creator,
        <notnull()>final <daoName>DAO dao)
    {
        return dao.execute(creator, (PreparedStatementCallback) this);
    }

    /**
     * Manages the prepared statement logic.
     * @param preparedStatement the statement.
     * @return the result of the operation.
     * @throws SQLException if it gets thrown as result of the operation.
     * @throws DataAccessException if the data cannot be accessed for some
     * reason.
     */
    <nullable()>
    public Object doInPreparedStatement(
        <notnull()>final PreparedStatement preparedStatement)
      throws SQLException,
             DataAccessException
    {
        return
            doInPreparedStatement(
                preparedStatement,
                getPreparedStatementSetter(),
                getResultSetExtractor());
    }

    /**
     * Manages the prepared statement logic.
     * @param preparedStatement the statement.
     * @param preparedStatementSetter the prepared statement setter.
     * @param resultSetExtractor the result set extractor.
     * @return the result of the operation.
     * @throws SQLException if it gets thrown as result of the operation.
     * @throws DataAccessException if the data cannot be accessed for some
     * reason.
     */
    <nullable()>
    protected Object doInPreparedStatement(
        <notnull()>final PreparedStatement preparedStatement,
        <notnull()>final PreparedStatementSetter preparedStatementSetter,
        <notnull()>final ResultSetExtractor resultSetExtractor)
      throws SQLException,
             DataAccessException
    {
        <nullable()>Object result = null;

        // taken from Spring's JdbcTemplate.
        ResultSet t_ResultSet = null;

        try
        {
            if  (preparedStatementSetter != null)
            {
                preparedStatementSetter.setValues(preparedStatement);
            }

            t_ResultSet = preparedStatement.executeQuery();

            result = resultSetExtractor.extractData(t_ResultSet);
        }
        finally
        {
            if  (preparedStatementSetter instanceof ParameterDisposer)
            {
                ((ParameterDisposer) preparedStatementSetter)
                    .cleanupParameters();
            }

            JdbcUtils.closeResultSet(t_ResultSet);
        }

        return result;
    }
}
<endif>
<endif>
>>