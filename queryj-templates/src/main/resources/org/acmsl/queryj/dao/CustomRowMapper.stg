//;-*- mode: antlr -*-
//
//                      QueryJ
//
//  Copyright (C) 2002-today  ACM-SL
//                           chous@acm-sl.org
//
//  This library is free software; you can redistribute it and/or
//  modify it under the terms of the GNU General Public
//  License as published by the Free Software Foundation; either
//  version 2 of the License, or any later version.
//
//  This library is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
//  General Public License for more details.
//
//  You should have received a copy of the GNU General Public
//  License along with this library; if not, write to the Free Software
//  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
//
//  Thanks to ACM S.L. for distributing this library under the GPL license.
//  Contact info: jose.sanleandro@acm-sl.com
//  Postal Address: c/Playa de Lagoa, 1
//                  Urb. Valdecabanas
//                  Boadilla del monte
//                  28660 Madrid
//                  Spain
//
//***************************************************************************
//
// Filename: CustomRowMapper.stg
//
// Author: Jose San Leandro Armendariz
//
// Description: Defines the rules to generate RowMapper implementations
//              for each custom implementations.
//
group CustomRowMapper;

source(C) ::= <<
<!
  Generates a RowMapper implementation source file.
!>
<sourceImpl(result=C.result)>
>>

sourceImpl(result) ::= <<
<!
  Generates a RowMapper implementation source file.
  @param copyright_years the copyright's years.
  @param table_name the table name.
  @param package the package.
  @param dao_class_name the DAO class name.
  @param dao_factory_class_name the DAO factory class name.
  @param dao_implementation_class_name the DAO implementation class name.
  @params project_imports
  @params class
!>
<if(header)>
<header>
<else>
<java_header(
  year=current_year,
  description=
  [
    first_line_description(
      result=result,
      engineName=C.engine_name,
      engineVersion=C.engine_version)
  ],
  timestamp=timestamp)><endif>
<if(generation_timestamps_enabled)>
// Generated by QueryJ using org/acmsl/queryj/dao/RowMapper.stg at <timestamp>
<endif>

<package_declaration(package=C.package)>

<project_imports(
  result=result,
  basePackageName=C.project_package,
  package=C.package,
  voSubpackageName=typeInitMap.voSubpackageName,
  voFactorySubpackageName=typeInitMap.voFactorySubpackageName)>
<checkers_import()>
/*
 * Importing Spring classes.
 */
import org.springframework.jdbc.core.RowMapper;

/*
 * Importing some JDK classes.
 */
import java.sql.ResultSet;
import java.sql.SQLException;

/*
 * Importing Jakarta Commons Logging classes
 */
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;

<class(result=result)>
>>

first_line_description(result, engineName, engineVersion) ::= <<
<!
  Generates a description for the generated file.
  @param result the custom result.
  @param engineName the engine name.
  @param engineVersion the engine version.
!>
<result.voName>-specific {@link RowMapper} implementation.
>>

project_imports(
  result,
  basePackageName,
  package,
  voSubpackageName,
  voName,
  voFactorySubpackageName) ::= <<
<!
  Generates the project imports.
  @param result the custom result.
  @param basePackageName the base package name.
  @param package the package.
  @param voSubpackageName the subpackage for the value
  @param voName the class name of the value-object.
  @param voFactorySubpackageName the subpackage of the value object factories.
!>
/*
 * Importing project-specific classes.
 */
import <basePackageName>.<voSubpackageName>.<voName>;
import <basePackageName>.<voFactorySubpackageName>.<voName>ValueObjectFactory;

>>

class(result) ::= <<
<!
 Generates the class body.
 @param result the custom result.
!>
/**
 * <[
      first_line_description(
        result=result,
        engineName=C.engine_name,
        engineVersion=C.engine_version)
    ]:{line |<line>}; separator="\n * ">
<class_common_javadoc(template="org/acmsl/queryj/dao/CustomRowMapper.stg")>
 */
public class <result.voName>RowMapper
  implements RowMapper\<<result.voName>\>
{
    /**
     * Creates a {@link <result.voName>} with information
     * from the next row in given {@link ResultSet}.
     * @param resultSet the result set.
     * @param rowNum the index of the next row.
     * @return the <result.voName> instance.
     * @throws SQLException if the operations on ResultSet fail.
     */
    <notnull()>
    public <result.voName> mapRow(<notnull()>final ResultSet resultSet, final int rowNum)
        throws SQLException
    {
        return mapRow(resultSet, rowNum, <result.voName>Factory.getInstance());
    }

    /**
     * Creates a {@link <result.voName>} with information
     * from the next row in given {@link ResultSet}.
     * @param resultSet the result set.
     * @param rowNum the index of the next row.
     * @param factory the {@link <result.voName>Factory} instance.
     * @return the <result.voName> instance.
     * @throws SQLException if the operations on ResultSet fail.
     */
    <notnull()>
    protected <result.voName> mapRow(
        <notnull()>final ResultSet resultSet,
        final int rowNum,
        <notnull()>final <result.voName>Factory factory)
        throws SQLException
    {
        return
            factory.create(
                <result.properties:{ property | <property_from_resultset(property=property)> }; separator=",\n">);
    }
}
>>

property_from_resultset(property) ::= <<
<!
  Generates the code to retrieve the property from the result set.
  @param property the property.
!>
resultSet.get<property.type>("<property.columnName>")
>>