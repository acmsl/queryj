//;-*- mode: antlr -*-
//
//                      QueryJ
//
//  Copyright (C) 2002-today  ACM-SL
//                           chous@acm-sl.org
//
//  This library is free software; you can redistribute it and/or
//  modify it under the terms of the GNU General Public
//  License as published by the Free Software Foundation; either
//  version 2 of the License, or any later version.
//
//  This library is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
//  General Public License for more details.
//
//  You should have received a copy of the GNU General Public
//  License along with this library; if not, write to the Free Software
//  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
//
//  Thanks to ACM S.L. for distributing this library under the GPL license.
//  Contact info: jose.sanleandro@acm-sl.com
//  Postal Address: c/Playa de Lagoa, 1
//                  Urb. Valdecabanas
//                  Boadilla del monte
//                  28660 Madrid
//                  Spain
//
//***************************************************************************
//
// Filename: CustomResultSetExtractor.stg
//
// Author: Jose San Leandro Armendariz
//
// Description: Defines the rules to generate CustomResultSetExtractors.
//
// CustomResultSetExtractor.stg
//
group CustomResultSetExtractor;

source() ::= <<
<!
  Generates a CustomResultSetExtractor source file.
!>
<if(header)>
<header>
<else>
<java_header(
  year=current_year,
  description=
  [
    first_line_description(result=result),
    second_line_description(result=result)
  ],
  timestamp=timestamp)>
<endif>
<if(generation_timestamps_enabled)>
// Generated using org/acmsl/queryj/dao/CustomResultSetExtractor.stg at <timestamp>
<endif>

<package_declaration(package=package)>

<project_imports(
  result=result,
  basePackageName=project_package,
  baseDAOSubpackageName=typeInitMap.baseDAOSubpackageName,
  rdbSubpackageName=typeInitMap.rdbSubpackageName,
  trName=repository.capitalized)>

<checkers_import()>
/*
 * Importing Spring classes.
 */
import org.springframework.dao.DataAccessException;

/*
 * Importing some JDK classes.
 */
import java.math.BigDecimal;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Timestamp;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Collection;
import java.util.Date;
import java.util.List;

/*
 * Importing Jakarta Commons Logging classes
 */
import org.apache.commons.logging.LogFactory;

<class(result=result)>
>>

first_line_description(result) ::= <<
<!
  Generates the first line of the generated file description.
  @param result the result.
!>
Extracts <result.id> instances
>>

second_line_description(result) ::= <<
<!
  Generates the second line of the generated file description.
  @param result the result.
!>
 from java.sql.ResultSets.
>>

project_imports(result, basePackageName, baseDAOSubpackageName, rdbSubpackageName, trName) ::= <<
<!
 Generates the project imports.
 @param result the result instance.
 @param basePackageName the base package name.
 @param baseDAOSubpackageName the subpackage for base DAO classes.
 @param rdbSubpackageName the subpackage for rdb classes.
 @param trName the repository name.
!>
/*
 * Importing project classes.
 */
<if(!result.implicit)>
<if(!result.wrappingASingleProperty)>
import <result.classValue>;
import <result.classValue>ValueObjectFactory;
<endif>
<endif>
import <basePackageName>.<baseDAOSubpackageName>.<rdbSubpackageName>.<trName>DAOListener;
import <basePackageName>.<baseDAOSubpackageName>.<rdbSubpackageName>.<trName>ResultSetExtractor;

>>

class(result) ::= <<
<!
 Generates the class body.
 @param result the result.
!>
/**
 * <[
      first_line_description(result=result),
      second_line_description(result=result)
    ]:{line |<line>}; separator="\n * ")>
<class_common_javadoc(template="org/acmsl/queryj/dao/CustomResultSetExtractor.stg")>
 */
<class_annotations()>
public class <result.idCapitalized>Extractor
    extends  <repository.capitalized>ResultSetExtractor
{
    /**
     * Constructs a new {@link <result.idCapitalized>Extractor}.
     * @param daoListener the dao listener.
     */
    public <result.idCapitalized>Extractor(
        <notnull()>final String sql,
        <notnull()>final <repository.capitalized>DAOListener daoListener)
    {
        super(sql, daoListener);
    }

    // \<extract data\>
    /**
     * Extracts \<i><result.id>\</i> information from given result set.
     * @param resultSet the result set.
     * @param sql the original sql.
     * @param daoListener the {@link <repository.capitalized>DAOListener} instance.
<if(result.multiple)>
     * @return the \<i><result.classValue>\</i> instances or {@link null}
     * if the operation returned no data.
<else>
     * @return the \<i><result.classValue>\</i> instance or {@link null}
     * if the operation returned no data.
<endif>

     * @throws SQLException intercepted by \<i>Spring\</i>.
     * @throws DataAccessException with information about any
     * custom exception.
     */
    @Override
    <notnull()>
    public Object extractData(
        <notnull()>final ResultSet resultSet,
        <notnull()>final String sql,
        <notnull()>final <repository.capitalized>DAOListener daoListener)
      throws  SQLException,
              DataAccessException
    {
<if(result.wrappingASingleProperty)>
<if(result.multiple)>
        List\<<single_property_wrapper_return(result=result)>\> result = new ArrayList\<<single_property_wrapper_return(result=result)>\>();
<else>
        <single_property_wrapper_return(result=result)> result = null;
<endif>
<else>
        return
            extractData(
                resultSet,
                sql,
                daoListener,
                <result.classValue>ValueObjectFactory.getInstance());
    }

    /**
     * Extracts \<i><result.id>\</i> information from given result set.
     * @param resultSet the result set.
     * @param sql the original sql.
     * @param daoListener the {@link <repository.capitalized>DAOListener} instance.
     * @param factory the value object factory.

<if(result.multiple)>
     * @return a list of {@link <result.classValue> instances} or \<code>null\</code>
     * if the operation returned no data.
<else>
     * @return the {@link <result.classValue>} instance or \<code>null\</code>
     * if the operation returned no data.
<endif>
     * if the operation returned no data.
     * @throws SQLException intercepted by \<i>Spring\</i>.
     * @throws DataAccessException with information about any
     * custom exception.
     */
    protected Object extractData(
        <notnull()>final ResultSet resultSet,
        <notnull()>final String sql,
        <notnull()>final <repository.capitalized>DAOListener daoListener,
        <notnull()>final <result.classValue>ValueObjectFactory factory)
      throws  SQLException,
              DataAccessException
    {
<if(result.multiple)>
        List\<<result.classValue>\> result = new ArrayList\<<result.classValue>\>();
<else>
        <result.classValue> result = null;
<endif>
<endif>


        int t_iRowCount = 0;

<if(result.multiple)>
        while  (resultSet.next())
<else>
        if  (resultSet.next())
<endif>

        {
            t_iRowCount++;

            daoListener.resultSetMovedForward(sql, t_iRowCount);

            <result.properties:nullable_attribute_extraction(value=it)>
            <result.lobProperties:special_attribute_extraction(result=result, value=it)>

<if(result.multiple)>
            result.add(
<else>
            result =
<endif>

<if(!result.wrappingASingleProperty)>
                factory.create(
<endif>

<if(result.implicit)>
// implicit 
                    <result.implicitProperties:implicit_nullable_attribute_extraction(value=it); separator=",\n">)<if(result.multiple)>)<endif>;
                    <result.implicitProperties:{prop|/*<prop.columnName>-><prop.index>*/}; separator="\n">
<else>
                    <result.properties:attribute_extraction(value=it); separator=",\n"><if(!result.wrappingASingleProperty)>)<endif><if(result.multiple)>)<endif>;
<endif>

        }

        daoListener.resultSetClosed(sql, t_iRowCount);

        return result;
    }
}
>>


implicit_attribute_result(value) ::= <<
<!
 Prints the correct return clause for the implicit attribute.
 @param value the implicit attribute.
 !>
<if(value.nullable)>
return result;
<else>
return new <value.objectType>(result);
<endif>

>>

implicit_nullable_attribute_extraction(value) ::= <<
<!
 Generates the code to extract implicit nullable attributes.
 @param result the sql result.
 @param value the implicit attribute.
 !>
resultSet.get<value.objectType>("<value.columnName>")
>>

nullable_attribute_extraction(value) ::= <<
<!
 Generates the code to extract nullable attributes.
 @param value the attribute.
!>
<if(lob_handling_required)>
<indirect_template(
  name=lob_handling_flavor+"_nullable_attribute_extraction", extra1=value)>
<else>
<default_nullable_attribute_extraction(value=value )>
<endif>

>>

default_nullable_attribute_extraction(value) ::= <<
<!
 Generates the code to extract nullable attributes.
 @param value the attribute.
!>
<if(value.boolean)>
<Boolean_nullable_attribute_extraction(value=value)>
<else>
<if(value.allowsNull)>
<if(value.timestamp)>
Timestamp t_<value.columnNameNormalizedCapitalized>AsTimestamp =
<else>
<value.objectType> t_<value.columnNameNormalizedCapitalized>As<value.objectType> =
<endif>

<if(value.primitive)>
<if(lob_handling_required)>
    <object_nullable_clobhandling_attribute_extractor(value=value)>
<else>
    <primitive_nullable_attribute_extractor(value=value)>
<endif>
<else>
<if(lob_handling_required)>
    <indirect_template(name=value.objectType+"_nullable_clobhandling_attribute_extractor", extra1=value)>
<else>
    <indirect_template(name=value.objectType+"_nullable_attribute_extractor", extra1=value)>
<endif>
<endif>

if  (resultSet.wasNull())
{
<if(value.timestamp)>
    t_<value.columnNameNormalizedCapitalized>AsTimestamp = null;
<else>
    t_<value.columnNameNormalizedCapitalized>As<value.objectType> = null;
<endif>

}

<endif>
<endif>

>>

Boolean_nullable_attribute_extraction(value) ::= <<
<!
  Generates the code to extract a primitive nullable attribute.
!>
<if(value.allowsNull)>
Boolean t_<value.columnNameNormalizedCapitalized>AsBoolean = null;
<else>
boolean t_<value.columnNameNormalizedCapitalized>AsBoolean = false;
<endif>

<if(value.allowsNull)>
<value.objectType> t_<value.nameLowercased> =
    new <value.objectType>(
        resultSet.get<value.objectType>(
            "<value.columnName>"));

if  (resultSet.wasNull())
{
    t_<value.nameLowercased> = null;
}
<else>
<value.actualJavaType> t_<value.nameLowercased> =
    resultSet.get<value.objectType>(
        "<value.columnName>");
<endif>


<if(value.primitive)>
if  (t_<value.nameLowercased> == <value.booleanTrue>)
<else>
if  (("" + t_<value.nameLowercased>).equals("" + <value.booleanTrue>))
<endif>


{
<if(value.allowsNull)>
    t_<value.columnNameNormalizedCapitalized>AsBoolean = Boolean.TRUE;

}
else
{
    t_<value.columnNameNormalizedCapitalized>AsBoolean = Boolean.FALSE;
<else>
    t_<value.columnNameNormalizedCapitalized>AsBoolean = true;
<endif>

}


>>

String_nullable_attribute_extractor(value) ::= <<
<!
  Generates the code to extract a String nullable attribute.
!>
<object_nullable_attribute_extractor(value=value)>
>>

String_nullable_clobhandling_attribute_extractor(value) ::= <<
<!
  Generates the code to extract a String nullable attribute.
!>
<object_nullable_clobhandling_attribute_extractor(value=value)>
>>

Date_nullable_attribute_extractor(value) ::= <<
<!
  Generates the code to extract a Date nullable attribute.
!>
<object_nullable_clobhandling_attribute_extractor(value=value)>
>>

Date_nullable_clobhandling_attribute_extractor(value) ::= <<
<!
  Generates the code to extract a Date nullable attribute.
!>
<object_nullable_clobhandling_attribute_extractor(value=value)>
>>

Timestamp_nullable_attribute_extractor(value) ::= <<
<!
  Generates the code to extract a Timestamp nullable attribute.
!>
<object_nullable_clobhandling_attribute_extractor(value=value)>
>>

Timestamp_nullable_clobhandling_attribute_extractor(value) ::= <<
<!
  Generates the code to extract a Timestamp nullable attribute.
!>
<object_nullable_clobhandling_attribute_extractor(value=value)>
>>

BigDecimal_nullable_attribute_extractor(value) ::= <<
<!
  Generates the code to extract a BigDecimal nullable attribute.
!>
<object_nullable_attribute_extractor(value=value)>
>>

BigDecimal_nullable_clobhandling_attribute_extractor(value) ::= <<
<!
  Generates the code to extract a BigDecimal nullable attribute.
!>
<object_nullable_clobhandling_attribute_extractor(value=value)>
>>

primitive_nullable_attribute_extractor(value) ::= <<
<!
  Generates the code to extract a primitive nullable attribute.
!>
new <value.objectType>(
<if(value.numberSmallerThanInt)>
    resultSet.getInt(
<else>
    resultSet.get<value.objectType>(
<endif>

        "<value.columnName>"));
>>

primitive_nullable_clobhandling_attribute_extractor(value) ::= <<
<!
  Generates the code to extract a primitive nullable attribute.
!>
new <value.objectType>(
<if(value.numberSmallerThanInt)>
    resultSet.getInt("<value.columnName>"));
<else>
    resultSet.get<value.objectType>("<value.columnName>"));
<endif>

>>

object_nullable_attribute_extractor(value) ::= <<
<!
  Generates the code to extract a non-primitive nullable attribute.
!>
<if(value.timestamp)>
resultSet.getTimestamp("<value.nameUppercased>");
<else>
<if(value.numberSmallerThanInt)>
resultSet.getInt(
<else>
resultSet.get<value.objectType>(
<endif>
<endif>

    "<value.columnName>");
>>

object_nullable_clobhandling_attribute_extractor(value) ::= <<
<!
  Generates the code to extract a non-primitive nullable attribute.
!>
<if(value.timestamp)>
resultSet.getTimestamp("<value.columnName>");
<else>
<if(value.numberSmallerThanInt)>
resultSet.getInt("<value.columnName>");
<else>
// <attr> : object_nullable_clobhandling_attribute_extractor
resultSet.get<value.objectType>("<value.columnName>");
<endif>
<endif>


>>

attribute_extraction(value) ::= <<
<!
 Generates the code to extract attributes.
 @param value the attribute.
!>
<if(lob_handling_required)>
<indirect_template(
  name=lob_handling_flavor+"_attribute_extraction", extra1=value)>
<else>
<default_attribute_extraction(value)>
<endif>

>>

default_attribute_extraction(value) ::= <<
<!
 Generates the member declaration for a concrete attribute.
 @param value the attribute.
!>
//<value.columnName>
<if(value.allowsNull)>
<if(value.timestamp)>
t_<value.columnNameNormalizedCapitalized>AsTimestamp
<else>
t_<value.columnNameNormalizedCapitalized>As<value.objectType>
<endif>
<else>
<if(value.numberSmallerThanInt)>
resultSet.getInt("<value.columnName>")
<else>
<if(value.timestamp)>
resultSet.getTimestamp("<value.columnName>")
<else>
<if(value.boolean)>
t_<value.columnNameNormalizedCapitalized>AsBoolean
<else>
// <attr> : default_attribute_extraction
<if(value.blob)>
// TODO
null
<else>
resultSet.get<value.objectType>("<value.columnName>")
<endif>
<endif>
<endif>
<endif>
<endif>

>>

default_clobhandling_attribute_extraction(value) ::= <<
<!
 Generates the member declaration for a concrete attribute.
 @param value the attribute.
!>
<if(value.timestamp)>
resultSet.getTimestamp("<value.nameUppercased>")
<else>
<if(value.allowsNull)>
t_<value.columnNameNormalizedCapitalized>As<value.objectType>
<else>
<if(value.numberSmallerThanInt)>
resultSet.getInt("<value.nameUppercased>")
<else>
// <attr> : default_clobhandling_attribute_extraction
resultSet.get<value.objectType>("<value.nameUppercased>")
<endif>
<endif>
<endif>



>>

special_attribute_extraction(value) ::= <<
<!
 Generates the code to extract special attributes.
 @param value the attribute.
!>
<if(lob_handling_required)>
<indirect_template(
  name=lob_handling_flavor+"_special_attribute_extraction", extra1=value)>
<endif>
>>

Oracle_nullable_attribute_extraction(value) ::= <<
<!
 Generates the code to extract nullable attributes for Oracle.
 @param value the attribute.
!>
<oracle8_nullable_attribute_extraction(value=value)>
>>

oracle8_nullable_attribute_extraction(value) ::= <<
<!
 Generates the code to extract nullable attributes for Oracle8.
 @param value the attribute.
!>
<if(!value.clob)>
<default_nullable_attribute_extraction(value=value)>
<endif>
>>

oracle_special_attribute_extraction(value) ::= <<
<!
 Generates the code to extract special attributes for Oracle.
 @param value the attribute.
!>
<oracle8_special_attribute_extraction(value=value)>
>>

oracle8_special_attribute_extraction(value) ::= <<
<!
 Generates the code to extract special attributes for Oracle8.
 @param value the attribute.
!>
<if(value.clob)>
oracle.sql.CLOB t_<value.columnNameNormalizedCapitalized> =
    (oracle.sql.CLOB) resultSet.getClob("<value.columnName>");

if  (selectForUpdateMode)
{
    t_<value.columnNameNormalizedCapitalized>.putString(1, <value.nameLowercased>);
}
<else>
if  (resultSet.wasNull())
{
    t_<value.columnNameNormalizedCapitalized>As<value.objectType> = null;
}
<endif>
>>

Oracle_attribute_extraction(value) ::= <<
<!
 Generates the code to extract the attributes for Oracle.
 @param value the attribute.
!>
<oracle8_attribute_extraction(value=value)>
>>

oracle8_attribute_extraction(value) ::= <<
<!
 Generates the code to extract the attributes for Oracle8.
 @param value the attribute.
!>
<if(value.clob)>
(selectForUpdateMode)
?  <value.nameLowercased>
:  t_<value.columnNameNormalizedCapitalized>.getSubString(1, (int) t_<value.columnNameNormalizedCapitalized>.length())
<else>
<default_clobhandling_attribute_extraction(value=value)>
<endif>
>>

single_property_wrapper_return(result) ::= <<
<result.properties:{property|<property.objectType>}>
>>
