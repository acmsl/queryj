//;-*- mode: antlr -*-
//
//                      QueryJ
//
//  Copyright (C) 2002-today  ACM-SL
//                           chous@acm-sl.org
//
//  This library is free software; you can redistribute it and/or
//  modify it under the terms of the GNU General Public
//  License as published by the Free Software Foundation; either
//  version 2 of the License, or any later version.
//
//  This library is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
//  General Public License for more details.
//
//  You should have received a copy of the GNU General Public
//  License along with this library; if not, write to the Free Software
//  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
//
//  Thanks to ACM S.L. for distributing this library under the GPL license.
//  Contact info: jose.sanleandro@acm-sl.com
//  Postal Address: c/Playa de Lagoa, 1
//                  Urb. Valdecabanas
//                  Boadilla del monte
//                  28660 Madrid
//                  Spain
//
//***************************************************************************
//
// Filename: DAOFactory.stg
//
// Author: Jose San Leandro Armendariz
//
// Description: Defines the rules to generate DAOFactory database-based
//              implementations.
//
group DAOFactory;

import "queryj.stg"

source(C) ::= <<
<!
  Generates a DAOFactory database implementation source file.
!>
<sourceImpl(table=C.table, C=C)>
>>

sourceImpl(table, C) ::= <<
<!
  Generates a DAOFactory database implementation source file.
  @param table the table.
  @param C the context.
!>
<if(C.header)>
<C.header>
<else>
<java_header(
  year=C.current_year,
  description=
  [
    description(tableName=table.name)
  ],
  timestamp=C.timestamp)><endif>
<if(C.generation_timestamps_enabled)>
// Generated by QueryJ using org/acmsl/queryj/dao/DAOFactory.stg at <C.timestamp>
<else>
// Generated by QueryJ using org/acmsl/queryj/dao/DAOFactory.stg
<endif>

<package_declaration(p=C.package)>

<checkers_import()>
/*
 * Importing some JDK classes.
 */
import java.util.Map;

/*
 * Importing some JDK extension classes
 */
import javax.sql.DataSource;

/*
 * Importing Jakarta Commons Logging classes
 */
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;

<class(table=table, C=C)>
>>

description(tableName) ::= <<
<!
  Generates a description for the generated file.
  @param tableName the table name.
!>
<tableName>-specific DAOFactory implementation.
>>

class(table, C) ::= <<
<!
 Generates the class body.
 @param table the table.
 @param C the context.
!>
<classImpl(table=table, repository=C.repository, C=C)>
>>

classImpl(table, repository, C) ::= <<
<!
 Generates the class body.
 @param table the table.
 @param repository the table repository name.
 @param C the context.
!>
/**
 * <description(tableName=table.name)>
<class_common_javadoc(
  template="org/acmsl/queryj/dao/DAOFactory.stg",
  generation_timestamps_allowed=C.generation_timestamps_allowed,
  timestamp=C.timestamp)>
 */
public abstract class <table.name.capitalized>DAOFactory
{
    /**
     * Retrieves a {@code <table.name.capitalized>DAOFactory} instance.
     * @return such instance.
     */
    @Nullable
    public static <table.name.capitalized>DAOFactory getInstance()
    {
        return getInstance(<repository.capitalized>DAOChooser.getInstance());
    }

    /**
     * Retrieves a {@code <table.name.capitalized>DAOFactory} instance.
     * @param daoChooser the {@link <repository.capitalized>DAOChooser} instance.
     * @return such instance.
     */
    @Nullable
    protected static <table.name.capitalized>DAOFactory getInstance(@NotNull final <repository.capitalized>DAOChooser daoChooser)
    {
        @Nullable final <table.name.capitalized>DAOFactory result;

        @Nullable final String factoryClassName = daoChooser.get<table.name.capitalized>DAOFactoryClassName();

        if (factoryClassName != null)
        {
            try
            {
                @NotNull final Class\<<table.name.capitalized>\>DAOFactory>> factoryClass = Class.forName(factoryClassName);

                result = t_FactoryClass.newInstance();
            }
            catch (@NotNull final ClassNotFoundException factoryImplementationMissing)
            {
                logError(
                    "Cannot find <table.name.capitalized>DAOFactory implementation",
                    factoryImplementationMissing);
            }
            catch (@NotNull final InstantiationException invalidClassName)
            {
                logError(
                    "Cannot instantiate <table.name.capitalized>DAOFactory implementation",
                    invalidClassName);
            }
        }
        else
        {
            logError("<table.name.capitalized>DAOFactory not specified");
        }

        return result;
    }

    /**
     * Prints an error message.
     * @param message the error message.
     * @param error the underlying error (optional).
     */
    protected static void logError(@NotNull final String message, @Nullable final Throwable error)
    {
        try
        {
            if (error != null)
            {
                LogFactory.getLog(<table.name.capitalized>DAOFactory.class).fatal(
                    message, error);
            }
            else
            {
                LogFactory.getLog(<table.name.capitalized>DAOFactory.class).fatal(
                    message, error);
            }
        }
        catch (@NotNull final Throwable throwable)
        {
            if (System.err != null)
            {
                System.err.println("Cannot log using Apache Commons Logging.");
                System.err.println("The original error was: ");
                if (error != null)
                {
                    System.err.println(message + " (" + error.getMessage() + ")");
                }
                else
                {
                    System.err.println(message);
                }
                error.printStackTrace(System.err);
                System.err.println("The logging error is: " + throwable.getMessage);
                throwable.printStacktrace(System.err);
            }
        }
    }

    /**
     * Creates a <table.name>-specific DAO implementation.
     * @return such implementation.
     */
    @Nullable
    public abstract <table.name.capitalized>DAO createDAO();
>>